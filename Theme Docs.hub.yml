title: Dev Center
header:
  nav:
    left:
      - title: API Docs
        path: /api-docs
      - title: Stencil Docs
        path: /stencil-docs
      - title: Tools & Resources
        path: /tools-resources
      - title: Changelog
        path: /changelog
    center: []
    right:
      - title: My Apps
        path: ''
      - title: Create Account
        path: ''
pages:
  /:
    title: ''
    data: {}
  /stencil-docs:
    title: Stencil Docs
    data:
      children:
        - title: Getting Started
          route:
            path: /getting-started
          data:
            children:
              - title: About Stencil
                route:
                  path: /about-stencil
                data:
                  blocks:
                    - type: html
                      data: <h1>About Stencil</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#about_what-is-stencil\"> What is Stencil?</a></li>\n\t\t<li><a href=\"#about_features-and-stack\"> Stencil Development Features and Technology Stack</a></li>\n\t\t<li><a href=\"#about_key-components\">Key Components: Video Demo</a></li>\n\t\t<li><a href=\"#about_blueprint\"> Blueprint (Legacy Framework) Documentation </a></li>\n\t</ul>\n</div>\n"
                    - type: text
                      data: >-
                        ## What is Stencil?


                        Stencil is the theming engine for the BigCommerce
                        platform and for BigCommerce's Cornerstone theme, which
                        is the foundation a developer needs to quickly start
                        developing premium, custom themes with Stencil. 


                        [Cornerstone](https://github.com/bigcommerce/cornerstone)
                        is available on Github as an open source software, and
                        will be the Stencil engined theme we reference in this
                        documentation in order to demonstrate Stencil's
                        capabilities in a fully functioning storefront theme.
                        Here is a demo of the [BigCommerce Cornerstone
                        theme](http://cornerstone-light-demo.mybigcommerce.com/).


                        Stencil also provides features that allow merchants to
                        customize a storefront's look and feel with no coding,
                        making Stencil a powerful and useful engine for all
                        audiences.
                      header:
                        anchor: about_what-is-stencil
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Stencil Development Features and Technology Stack


                        Stencil's provides the following features, allowing
                        BigCommerce theme developers to create beautiful,
                        dynamic, and powerful storefronts.



                        ### Stencil Command Line Interface (Stencil CLI)


                        The Stencil CLI enables developers to locally develop
                        and customize on any Stencil theme with no impact on a
                        merchant's live storefront during the development
                        process. When locally developing, you will have access
                        to real-time Browsersync preview and testing across
                        desktop, mobile, and tablet devices/viewports.


                        Stencil CLI runs on the Node.js runtime environment.
                        Installing Node.js also provides the required npm
                        package manager.


                        ### Logic-Based Templates


                        Stencil's logic based templates allow BigCommerce
                        developers to customize storefront pages efficiently
                        with the lightweight templating languge, Handlebars.js. 
                        Handlebars allows you to efficiently embed dynamic and
                        conditional logic onto your storefront pages.


                        ### Sass/SCSS Support


                        Stencils Sass and SCSS support allows developers to nest
                        properties, variables, and mixins. Use the familiar
                        Foundation framework (provided) or substitute your
                        choice of framework.


                        Stencil's Cornerstone base theme uses a BigCommerce
                        pattern library called Citadel, which is built on top of
                        the ZURB Foundation framework, version 5.5.3. Stencil
                        does not support Foundation 6.x, due to breaking changes
                        introduced between versions 5.x and 6.x.


                        Foundation offers the framework for creating a
                        responsive theme. You have the option of swapping out
                        Foundation for another framework, although doing so
                        would require significant work.


                        Foundation assets bundled with Cornerstone are located
                        in these subdirectories: 


                        * `Cornerstone/assets/scss/settings/foundation/ `

                        * `Cornerstone/assets/scss/components/foundation/`


                        Citadel extends Foundation’s mixins and components to
                        provide Stencil’s own mixins, extensible components, and
                        utilities. These include drop-down lists, forms, and
                        similar resources. Citadel resources are named according
                        to BEM and SUIT CSS conventions. Classes are named
                        functionally, rather than based on visual presentation
                        or content. Our style guide is published here.

                        Citadel assets bundled with Cornerstone are located in
                        these Cornerstone subdirectories: 


                        * `Cornerstone/assets/scss/settings/citadel/`

                        * `Cornerstone/assets/scss/components/citadel/`


                        More detailed information about the Citadel and
                        Foundation SCSS components, and their naming conventions
                        will be covered in *Components and Design Patterns*.


                        ### Page-specific Resource Definition


                        Specify the dynamic content you want to be displayed on
                        your storefront pages with YAML formatted front matter.


                        ### Javascript Event Hooks


                        Your Stencil themes can access remote objects through
                        event hooks, using the hooks to trigger defined events
                        based on shopper behavior. This will allow you to
                        collect product data and optimize a shopper's
                        experience.


                        To facilitate theme-building, BigCommerce provides the
                        stencil-utils client-side JavaScript library for
                        managing event hooks.


                        ---


                        ## Stencil Theme Editor


                        The Stencil Theme Editor is a browser-based tool that
                        enables merchants to rapidly customize a theme's look
                        and feel with no coding. 


                        BigCommerce theme developers' configuration choices
                        determine which theme aspects merchants can customize,
                        and the range of choices for each aspect.


                        Stencil's Theme Editor graphical interface enables
                        merchants and store administrators to make styling
                        changes to the theme currently applied to their
                        storefront. 


                        As a theme developer, you have the capability to define
                        which style settings appear in the Stencil Theme Editor.
                        You can grant access to colors, fonts, display/hiding of
                        page features, and number of products/entries to display
                        per feature.


                        ### Stencil Theme Variations


                        Each Stencil theme can contain one to four variations.
                        You can optimize individual variations for specific
                        markets, audiences and styles – while still managing and
                        distributing all of these variations as one theme.

                        Cornerstone comes with 3 variations: Cornerstone Light,
                        Cornerstone Warm, and Cornerstone Bold.


                        ### Responsive, Mobile-Friendly Themes


                        BigCommerce stores powered by Stencil allow shoppers to
                        have a first class experience across any device.



                        _Note that this is simply a summary Stencil's core
                        features. Continue reading through the Stencil Developer
                        Documentation to learn about Stencil's full
                        capabilities._
                      header:
                        anchor: about_features-and-stack
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Key Components: Video Demo


                        Watch Stencil senior developer's tour of Stencil's key
                        components:


                        <iframe width="560" height="315"
                        src="https://www.youtube.com/embed/p5SR8N0SeCg"
                        frameborder="0" allowfullscreen></iframe>
                      header:
                        anchor: about_key-components
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Blueprint (Legacy Framework) Documentation


                        If you are looking for information on Blueprint,
                        BigCommerce's legacy theme framework, you can access
                        that below:


                        * [Themes
                        (Blueprint)](https://developer.bigcommerce.com/themes)

                        * [Stores API
                        reference](https://developer.bigcommerce.com/api)
                      header:
                        anchor: about_blueprint
              - title: Transitioning to Stencil
                route:
                  path: /transitionining-to-stencil
                data:
                  blocks:
                    - type: html
                      data: <h1>Transitioning to Stencil</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#choosing-dev-path\"> Choosing a Development Path</a></li>\n\t\t<li><a href=\"#front-matter-quick-start\">Front-Matter Quick Start</a></li>\n    <li><a href=\"#front-matter-quick-start\">Handlebars Quick Start</a></li>\n\t\t<li><a href=\"#seo-tips\">SEO Tips and Best Practices</a></li>\n\t\t<li><a href=\"#blueprint-to-stencil\">Blueprint to Stencil Features Map</a></li>\n    <li><a href=\"#interacting-with-api\">Interacting with the BigCommerce API</a></li>\n    <li><a href=\"#partnering-with-bc\">Partnering with BigCommerce</a></li>\n    <li><a href=\"#next-steps\">Next Steps</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >-
                        ## Choosing a Development Path


                        Are you approaching Stencil from a different theming
                        framework, like Blueprint, BigCommerce's legacy
                        framework? Or moving to the Stencil templating
                        environment from a pure HTML and CSS-based design?


                        You have four (non-mutually exclusive) options for
                        developing Stencil themes:


                        * Find a Design & Solutions Partner

                        * Light Customization using the Theme Editor

                        * Light Customization using HTML and CSS

                        * Adapting a Stencil Theme or Developing from Scratch


                        ###  Find a Design & Solutions Partner


                        If you prefer to have an expert collaborator customize
                        your theme, we recommend working with one of our
                        certified BigCommerce Design & Solutions Partners.
                        Reference the following resources to do so:


                        * [Partner
                        Directory](https://partners.bigcommerce.com/directory/search?i=75)

                        * [Working with a Design
                        Partner](https://support.bigcommerce.com/articles/Learning/Working-with-a-Design-Partner)
                        (Support Guide)


                        ### Light Customization with Stencil Theme Editor


                        Stencil can be customized without the use of any
                        specialized development tools or techniques by using of
                        the Stencil Theme Editor. The Stencil Theme Editor still
                        enables customization of a theme's colors, typography,
                        banners, headings, carousel, and footer. It also enables
                        customization of broader layout characteristics, such as
                        the number of products displayed in various panels,
                        category pages, and brand pages.


                        For details, please see:


                        * [Theme
                        Editor](https://support.bigcommerce.com/articles/Public/Using-the-Stencil-Theme-Editor/)
                        (Support article)

                        * [Stencil and the BigCommerce Control
                        Panel](https://www.youtube.com/watch?v=d2F6F8LJXzs&list=PLwTYtMwfzbe7EZiIWPAmPtuwRHkY7BG-0&index=2)
                        (Video introduction to Theme Editor)

                        * [Changing Your Store's
                        Theme](https://support.bigcommerce.com/articles/Learning/What-to-Consider-When-Changing-Your-Theme)
                        (Support guide)

                        * [Personalizing Your
                        Theme](https://support.bigcommerce.com/articles/Learning/Personalizing-your-New-Theme)
                        (Support guide)


                        ### Light Customization with HTML and CSS


                        If you are most comfortable working in HTML and CSS,
                        Stencil's *Edit Theme Files* feature allows you to
                        directly edit most of your theme's files from the
                        Control Panel. For details, please see:


                        * [Editing Stencil Theme
                        Files](https://support.bigcommerce.com/articles/Public/Editing-Stencil-Theme-Files)
                        (Support article)

                        * [Getting Started with the Stencil
                        Framework](https://www.youtube.com/watch?v=waJ1dg_dAh8&index=11&list=PLwTYtMwfzbe7EZiIWPAmPtuwRHkY7BG-0)
                        (Video overview of copying and editing a theme's files)


                        ### Adapt a Stencil Theme, or Develop from Scratch


                        For complete control over a theme's appearance and logic
                        – including the ability to edit _all_ theme
                        configuration files – you will want to use the Stencil
                        Command-line interface, also known as the Stencil CLI.


                        To learn Stencil CLI's templating conventions, see
                        Installing Stencil CLI. Also take a look at
                        BigCommerce's [Getting Started with the Stencil
                        Framework](https://www.youtube.com/playlist?list=PLwTYtMwfzbe7EZiIWPAmPtuwRHkY7BG-0)
                        video playlist.
                      header:
                        anchor: choosing-dev-path
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Front-Matter Quick Start


                        Stencil templates start with a section of "front matter"
                        where you can and concisely customize each page's design
                        and layout details. 


                        This front-matter section uses conventions from YAML, a
                        simple, widely used markup language. If you haven't used
                        these conventions before, refer to our [Front-Matter
                        Overview](https://stencil.bigcommerce.com/docs/using-yaml-front-matter).
                      header:
                        anchor: front-matter-quick-start
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Handlebars Quick Start


                        Stencil uses Handlebars.js to assemble dynamic content
                        into the storefront pages that are displayed to
                        shoppers. The dynamic content can be drawn from a few
                        sources, like the store's catalog.


                        Handlebars' syntax is quite simple, and it allows you to
                        accomplish powerful JavaScript operations with minimal
                        JavaScript code. To learn more about Handlebars.js, see
                        these third-party tutorials: 


                        * [Learn Handlebars in 10 Minutes or
                        Less](http://tutorialzine.com/2015/01/learn-handlebars-in-10-minutes/)

                        * [A Beginner’s Guide to
                        Handlebars](https://www.sitepoint.com/a-beginners-guide-to-handlebars/)

                        * [Getting Started with
                        Handlebars.js](http://blog.teamtreehouse.com/getting-started-with-handlebars-js)

                        * [Handlebars interactive
                        tutorial](http://tryhandlebarsjs.com/)
                      header:
                        anchor: handlebars-quick-start
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## SEO Tips and Best Practices


                        Search-engine optimization (SEO) helps translate an
                        elegant theme into a successful, high-conversion
                        storefront. Because so many shoppers reach online stores
                        through a search engine, a search-optimized site will be
                        more visible – attracting more traffic. 


                        The Stencil framework is [designed for high SEO
                        performance](https://www.bigcommerce.com/improve-organic-traffic/).
                        However, you will want to keep SEO in mind as you build
                        out each theme and storefront. For guidelines, please
                        see these BigCommerce support articles (which are a
                        series of intermediate to advanced chapters in our Guide
                        to SEO):


                        * [SEO Do's and
                        Don'ts](https://support.bigcommerce.com/articles/Learning/Things-to-Know/)

                        * [Developing a Keyword
                        Strategy](https://support.bigcommerce.com/articles/Learning/Developing-a-Keyword-Strategy/)

                        * [SEO Success
                        Essentials](https://support.bigcommerce.com/articles/Learning/Bigcommerce-SEO-Success-Essentials/)

                        * [Advanced SEO on
                        BigCommerce](https://support.bigcommerce.com/articles/Learning/Advanced-SEO-on-Bigcommerce/)


                        Also checkout our [Guide to Keyword
                        Research](https://support.bigcommerce.com/articles/Learning/Value-of-Keywords/).
                      header:
                        anchor: seo-tips
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Blueprint-to-Stencil Features Map 


                        This following resources are designed to help you
                        identify the Stencil counterparts to familiar Blueprint
                        components.


                        * What to Consider When Changing Your Theme (Support
                        article)

                        * Stencil and the BigCommerce Control Panel (Video tour
                        of Blueprint-to-Stencil  changes in the BigCommerce
                        control panel)
                      header:
                        anchor: blueprint-to-stencil
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Interacting with the BigCommerce API


                        Interacting with the BigCommerce API

                        BigCommerce's growing API resources enable application
                        developers to create private scripts or apps that
                        support a single store, or to create public apps offered
                        to multiple stores via BigCommerce's App Marketplace.


                        As a theme developer, you can rely on apps to enhance
                        your themes' capabilities, and to extend or complement
                        the storefront features built into the BigCommerce
                        platform. Popular app areas include inventory
                        management, email marketing, coupons, reviews, shipping,
                        tax accounting, and security. For more information, see
                        BigCommerce's:


                        * [App Marketplace](https://www.bigcommerce.com/apps/)

                        * [API
                        documentation](https://developer-beta.bigcommerce.com/api-docs)
                      header:
                        anchor: interacting-with-api
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Partnering with BigCommerce


                        Do we belong together? No formal business relationship
                        is required to develop themes on the BigCommerce
                        platform. However, consider applying to become a
                        BigCommerce Design & Solutions Partner (DSP), in order
                        to accelerate your development of new business and
                        revenue. For details, see our:


                        * Overview of BigCommerce Partnerships

                        * Design & Solutions Partners – basics and application
                        links

                        * Technology Partners – basics and application links

                        * Partnership Application
                      header:
                        anchor: partnering-with-bc
              - title: Supported Browsers
                route:
                  path: /supported-browsers
                data:
                  blocks:
                    - type: html
                      data: <h1>Supported Browsers</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#desktop-and-mobile\">Supported Desktop and Mobile Browsers</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >-
                        ## Supported Desktop and Mobile Browsers


                        The following browsers are supported for BigCommerce
                        storefronts that use Stencil-based themes. 


                        The browsers are sorted by popularity, beginning with
                        the most popular browsers. Please ensure that your theme
                        functions properly with all supported browsers.


                        ### Desktop Browsers


                        * Google Chrome (latest edition)

                        * Firefox (latest edition)

                        * Internet Explorer 10 and 11

                        * Safari (latest edition)

                        * Microsoft Edge (latest edition)


                        ### Mobile Browsers 


                        * Android Chrome browser (latest edition)

                        * iOS Safari browser (latest edition)
                      header:
                        anchor: desktop-and-mobile
                    - type: callout
                      data:
                        type: warning
                        body: >-
                          Browser support will cease to be offered if browser
                          usage falls below 2%.
                        title: Usage Support
              - title: Installing Stencil
                route:
                  path: /installing-stencil
                data:
                  blocks:
                    - type: html
                      data: <h1>Installing Stencil</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#installing_video-demo\">Video Demo</a></li>\n    <li><a href=\"#installing_prerequisites\">Prerequisites by OS</a></li>\n    <li><a href=\"#installing_installing-the-stencil-cli\">Installing the Stencil Command Line Interface (CLI)</a></li>\n    <li><a href=\"#installing_cloning-cornerstone\">Cloning Cornerstone Using Github</a></li>\n    <li><a href=\"#installing_installing-stencils-js-utilities\">Installing Stencil's Javascript Utilities</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >-
                        Below you’ll find instructions on installing the Stencil
                        CLI, cloning the Cornerstone theme, and installing
                        Stencil’s Javascript utilities.

                        Each OS has different prerequisites, so check the
                        Prerequisites by OS section before attempting
                        installation.
                    - type: text
                      data: >-
                        ## Video Demo


                        Watch a brief demonstration of the Stencil installation
                        and launch:


                        <iframe width="560" height="315"
                        src="https://www.youtube.com/embed/iWBrJalyM0A"
                        frameborder="0" allow="autoplay; encrypted-media"
                        allowfullscreen></iframe>
                      header:
                        anchor: installing_video-demo
                    - type: tabs
                      data:
                        children:
                          - title: ' Mac OS Prerequisites'
                            blocks:
                              - type: html
                                data: <h1>Mac OS Prerequisites</h1>
                              - type: html
                                data: "<div class=\"otp\" id=\"no-index\">\n\t<h3>On This Tab</h3>\n\t<ul>\n    <li><a href=\"mac_xcode\">Installing Xcode</a></li>\n    <li><a href=\"mac_nodejs\">Installing Node.js</a></li>\n    <li><a href=\"mac_troubleshooting\">Troubleshooting</a></li>\n\t</ul>\n</div>\n"
                              - type: callout
                                data:
                                  body: >-
                                    These instructions have been tested on Mac
                                    OS X Yosemite. Dependencies for other
                                    platforms will be added upon further
                                    testing.
                                  title: Platform Support
                              - type: text
                                data: >-
                                  ## Installing Xcode 


                                  You must install the [Xcode development
                                  tools](https://developer.apple.com/xcode/)
                                  (latest stable version).
                                header:
                                  anchor: mac_xcode
                              - type: text
                                data: '---'
                              - type: text
                                data: >-
                                  ## Node.js 


                                  Stencil requires the <a
                                  href="https://nodejs.org/">Node.js</a> runtime
                                  environment, version <a
                                  href="https://nodejs.org/en/blog/release/">6.x
                                  or later</a>. We have tested Stencil on
                                  selected Node.js versions, from <a
                                  href="https://nodejs.org/en/blog/release/v6.10.3/">6.10.3</a>
                                  to <a
                                  href="https://nodejs.org/en/blog/release/v7.9.0/">7.9.0</a>. 


                                  We recommend that you install or update
                                  Node.js using <a
                                  href="https://github.com/creationix/nvm#installation">nvm</a>.
                                  First install nvm, version <a
                                  href="https://github.com/creationix/nvm/tree/v0.31.0">0.31.0</a>,
                                  as follows:


                                  ```

                                  curl -o-
                                  https://raw.githubusercontent.com/creationix/nvm/v0.31.0/install.sh
                                  | bash

                                  ```


                                  Next, explicitly install a supported Node.js
                                  version, using this convention:<br>


                                  ```

                                  nvm install 6.4.0

                                  ```
                                header:
                                  anchor: mac_nodejs
                              - type: callout
                                data:
                                  body: >-
                                    You can choose to instead download the
                                    latest x.x version of Node.js from the
                                    Node.js Foundation's archives, using URLs of
                                    the form:
                                    https://nodejs.org/dist/latest-v6.x/,
                                    https://nodejs.org/dist/latest-v7.x/, etc.
                                    We recommend installing only LTS ("Long-Term
                                    Support"/"Mature and Dependable") versions.
                                  title: Notes on Dependencies
                              - type: text
                                data: '---'
                              - type: text
                                data: >
                                  ## Troubleshooting


                                  If you run into any problems with Stencil
                                  installation or launch, first consult
                                  [Troubleshooting Your Setup](). 


                                  If that does not resolve your issue, consult
                                  our [Support resources](), which include
                                  community and peer support via BigCommerce and
                                  Stack Overflow forums.
                                header:
                                  anchor: mac_troubleshooting
                          - title: Linux Prerequisites
                            blocks:
                              - type: html
                                data: <h1>Linux Prerequisites</h1>
                              - type: html
                                data: "<div class=\"otp\" id=\"no-index\">\n\t<h3>On This Tab</h3>\n\t<ul>\n    <li><a href=\"#linux_root\">Root Permissions</a></li>\n     <li><a href=\"#linux_git-client\">Git Client</a></li>\n     <li><a href=\"#linux_nodejs\">Node.js</a></li>\n      <li><a href=\"#linux_troubleshooting\">Troubleshooting</a></li>\n\t</ul>\n</div>"
                              - type: callout
                                data:
                                  body: >-
                                    These instructions have been tested on
                                    Linux/Ubuntu v.14.04.4. Dependencies for
                                    other platforms will be added upon further
                                    testing
                                  title: Platform Support
                              - type: text
                                data: >-
                                  ## Root Permissions


                                  You should have administrator/root permissions
                                  on your machine. (If not, you may need to
                                  precede some of the below commands with the
                                  `sudo` prefix.)
                                header:
                                  anchor: linux_root
                              - type: text
                                data: '---'
                              - type: text
                                data: >-
                                  ## Git Client


                                  You must have a [Git
                                  client](https://git-scm.com/downloads)
                                  installed.
                                header:
                                  anchor: linux_git-client
                              - type: text
                                data: '---'
                              - type: text
                                data: >-
                                  ## Node.js


                                  Stencil requires the Node.js runtime
                                  environment, version 6.x or later. We have
                                  tested Stencil on selected Node.js versions,
                                  from 6.10.3 to 7.9.0.


                                  We recommend that you install or update
                                  Node.js using nvm. First install nvm, version
                                  0.31.0, as follows:


                                  `curl -o-
                                  https://raw.githubusercontent.com/creationix/nvm/v0.31.0/install.sh
                                  | bash`


                                  Next, explicitly install a supported Node.js
                                  version, using this convention:


                                  `nvm install 6.4.0`
                                header:
                                  anchor: linux_nodejs
                              - type: text
                                data: '---'
                              - type: text
                                data: >-
                                  ## Troubleshooting


                                  If you run into any problems with Stencil
                                  installation or launch, please first see our
                                  Troubleshooting Your Setup page. Next, please
                                  consult our Support resources, which include
                                  community/peer support via BigCommerce and
                                  Stack Overflow forums.
                                header:
                                  anchor: linux_troubleshooting
                          - title: Windows Prerequisites
                            blocks:
                              - type: html
                                data: <h1>Windows Prerequisites</h1>
                              - type: html
                                data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Tab </h3>\n\t<ul>\n     <li><a href=\"#windows_root-permissions\">Root Permissions</a></li>\n     <li><a href=\"#windows_git-client\">Git Client and Git BASH</a></li>\n     <li><a href=\"#windows_python-installation\">Python Installation</a></li>\n     <li><a href=\"#windows_python-node-config\">Python/Node Configuration</a></li>\n     <li><a href=\"#windows_node-installation\">Node.js Installation</a></li>\n     <li><a href=\"#windows_compiler-options\">C++ Compiler Options</a></li>\n    <li><a href=\"#windows_troubleshooting\">Troubleshooting</a></li>\n\t</ul>\n</div>"
                              - type: callout
                                data:
                                  body: >-
                                    The following instructions have been tested
                                    on Windows 10. Dependencies for other
                                    platforms will be added upon further
                                    testing.
                                  title: Platform Support
                              - type: text
                                data: >-
                                  ## Root Permissions


                                  You must have authorization to run Powershell
                                  "as administrator" on your machine.
                                header:
                                  anchor: windows_root-permissions
                              - type: text
                                data: '---'
                              - type: text
                                data: >-
                                  ## Git Client and Git BASH


                                  You must have a Git client installed. The Git
                                  for Windows distribution includes a Git
                                  client, and also provides the Git BASH
                                  emulator for command-line access. All commands
                                  should be run in Git Bash from here.
                                header:
                                  anchor: windows_git-client
                              - type: text
                                data: '---'
                              - type: text
                                data: >-
                                  ## Python Installation


                                  Install [Python 2.7.x for
                                  Windows](https://www.python.org/downloads/windows/).
                                  This is required for Visual Studio's Windows
                                  Build Tools, installed below. **Python 3.x is
                                  not supported.**


                                  In the installer dialog shown below, change
                                  the bottom default, so as to enable the `Add
                                  python.exe` to Path option. This provides
                                  global command-line access to Python.
                                header:
                                  anchor: windows_python-installation
                              - type: image
                                data: >-
                                  //s3.amazonaws.com/user-content.stoplight.io/6116/1539115629012
                              - type: text
                                data: '---'
                              - type: text
                                data: >-
                                  ## Node.js Installation


                                  Stencil requires the [Node.js]() runtime
                                  environment, version [6.x or later]().


                                  On Windows, we have tested Stencil CLI on
                                  selected Node.js version
                                  [7.10.0](https://nodejs.org/en/blog/release/v7.10.0/"7.10.0).
                                  We recommend that you install only an LTS
                                  ("Long-Term Support"/"Mature and Dependable")
                                  version, and that you download that version's
                                  `.msi` installer (not its `.exe` binary).


                                  **Note:** _You can choose to instead download
                                  the latest x.x version of Node.js from the
                                  Node.js Foundation's archives, using URLs of
                                  the form:
                                  [https://nodejs.org/dist/latest-v8.x/](https://nodejs.org/dist/latest-v8.x/),
                                  [https://nodejs.org/dist/latest-v8.x/](https://nodejs.org/dist/latest-v8.x/),
                                  etc. In all cases, we recommend installing
                                  only LTS ("Long-Term Support"/"Mature and
                                  Dependable") versions, and that you download
                                  the .msi installer, not the .exe binary.

                                  However, please see the restriction on
                                  technical assistance in the Notes on
                                  Dependencies below._


                                  To verify your Node.js installation or
                                  reinstallation, this [blog
                                  post](http://blog.teamtreehouse.com/install-node-js-npm-windows)
                                  provides Windows-specific tips and tests.
                                header:
                                  anchor: windows_node-installation
                              - type: callout
                                data:
                                  body: >-
                                    You will need to restart your computer to
                                    complete Node.js installation.
                                  type: warning
                                  title: Restart Required
                              - type: text
                                data: >-
                                  ## Python/Node Configuration


                                  After installing both Python and Node.js,
                                  configure Python within the Node.js runtime
                                  environment by running this npm command:


                                  `npm config set python python2.7`
                                header:
                                  anchor: windows_python-node-config
                              - type: callout
                                data:
                                  body: >-
                                    The [node package
                                    manager](https://www.npmjs.com/) was
                                    installed as part of Node.js. As you proceed
                                    through Stencil CLI setup (and later
                                    refreshes), you will use this command-line
                                    utility to install packages/modules, and to
                                    configure and manage dependencies and their
                                    versions.
                                  title: About Node Package Manager (npm)
                              - type: text
                                data: >
                                  ## C++ Compiler Options


                                  Choose to either install Turbo C++ or Visual
                                  Studio for your C++ Compiler.


                                  ### Turbo C++


                                  You can install Turbo C++ as a lighter version
                                  instead of Visual Studio. The installation
                                  takes about 5 minutes. After installation, a
                                  box opens that highlights the features of
                                  Turbo C++. This box can be closed since it is
                                  not needed to complete installation. If you
                                  prefer using Visual Studio then use the steps
                                  below.


                                  ### Visual Studio Installation

                                  Install MicroSoft Visual Studio. Stencil
                                  requires a 2013 or later release, Community
                                  Edition (free) or higher.


                                  Be sure to install Visual Studio's "Common
                                  Tools" component. You can also add this
                                  component later in the window shown below.


                                  ### Visual Studio Version/Node Configuration

                                  Finally, configure Visual Studio within the
                                  Node.js runtime environment by running the
                                  following npm command.

                                  (Replace the 2015 parameter with 2013 or 2017,
                                  as needed, to match the Visual Studio release
                                  you have installed:)


                                  `npm config set msvs_version 2015`
                                header:
                                  anchor: windows_compiler-options
                              - type: callout
                                data:
                                  title: Notes on Dependencies
                                  body: >-
                                    While alternate versions might also support
                                    Stencil, BigCommerce does not offer
                                    technical assistance on substitutions for,
                                    or customized versions of, the tested
                                    dependencies listed here.


                                    Once Stencil is fully installed, you can
                                    check dependencies' installed versions by
                                    examining your
                                    `<theme-name>/package.jsonfile`.
                              - type: text
                                data: >-
                                  ## Troubleshooting


                                  If you run into any problems with Stencil
                                  installation or launch, please first see our
                                  [Troubleshooting Your Setup]() article. If
                                  that doesn't solve the issue, try consulting
                                  our [Support
                                  resources](https://forum.bigcommerce.com/s/group/0F913000000HLjECAW/bigcommerce-developers).
                                header:
                                  anchor: windows_troubleshooting
                      header:
                        title: Stencil Prerequisites by OS
                        anchor: installing_prerequisites
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Installing the Stencil Command Line Interface


                        The first step toward developing on Stencil is to
                        install the Stencil CLI. 


                        You can do this via the following command (_If you are
                        using Windows, you will need to run this command in git
                        bash._):


                        `npm install -g @bigcommerce/stencil-cli`


                        ### Items to Note


                        * The command above requires <a
                        href="https://www.npmjs.com/">npm</a> to be installed in
                        your local development environment.


                        * In Windows, this `npm` command's execution might at
                        times appear to freeze. However, the installer is
                        running. 

                        Give it several minutes to complete installation.


                        * On Mac OS machines with installed xcode, version 5.x,
                        this `npm` command has generated errors of the form: 

                        `npm ERR! invalid: string_decoder`. The workaround is to
                        upgrade xcode to the latest stable xcode version 

                        (7.3.1 as of this page's last revision). 


                        * If you receive a file-permissions error, and you did
                        not install Node.js via <a
                        href="https://github.com/creationix/nvm#installation">nvm</a>
                        (Node Version Manager), 

                        then either install nvm now, or follow one of the
                        workarounds on [this external
                        page](https://docs.npmjs.com/getting-started/fixing-npm-permissions).
                      header:
                        anchor: installing_installing-the-stencil-cli
                    - type: callout
                      data:
                        body: >-
                          To ensure the Stencil CLI is compatible with all the
                          changes introduced in Cornerstone 2.0.0, you must
                          upgrade to the latest version of Stencil CLI (1.15.1)
                          if using Cornerstone 2.x.x.


                          Occasionally, you will receive a command line prompt
                          to run the installation command when you restart your
                          Stencil server. This occurs when BigCommerce publishes
                          a critical fix in Stencil CLI, to resolve an issue
                          like a newly discovered security exploit.
                        title: CLI Force Upgrade and Cornerstone 2.0.0
                        type: warning
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Cloning Cornerstone using Github


                        _Windows users need to run this in git bash._


                        Navigate to a directory where you would like to install
                        a subdirectory for your theme. You must have appropriate
                        write permissions in this directory. 


                        Execute the following command to clone Stencil's base
                        theme, Cornerstone, into a new subdirectory named
                        `.../cornerstone/`


                        `git clone
                        https://github.com/bigcommerce/cornerstone.git`
                          
                        If the above command fails, and you are accessing GitHub
                        anonymously, give the URL this alternate prefix:


                        `git clone git://github.com/bigcommerce/cornerstone.git`



                        <!-- Add a note here: If downloading a marketplace
                        theme, must install jspm, register your jspm instance,
                        and set up BitBucket access...  -->


                        <!-- If you are installing Stencil for the first time,
                        then in--> In the next step, you will install Stencil's
                        <a
                        href="/docs/stencil-docs/getting-started/installing-and-launching/javascript-utilities">JavaScript
                        utilities</a> to enable API access via Ajax.


                        /stencil-docs/getting-started/installing-and-launching/adding-a-base-theme
                      header:
                        anchor: installing_cloning-cornerstone
                    - type: callout
                      data:
                        body: >-
                          If you are reinstalling over a base theme on which you
                          have already begun development, first back up your
                          theme's `.stencil` file. This contains your store URL,
                          BigCommerce username and access tokens, and other
                          basic settings. Preserving those settings will speed
                          up initializing and launching the new version. If you
                          would like to allow for complete rollback, back up
                          your entire theme's directory.
                        type: error
                        title: Back Up before Reinstalling
                    - type: text
                      data: '---'
                    - type: text
                      data: "## Installing Stencil's Javascript Utilities\n\nStencil's Cornerstone theme provides utilities called `stencil-utils` to enable API usage (via Ajax) to BigCommerce's backend. \n\nYou will learn more about Stencil Utils in our Stencil Utils overview, but for now, you'll want to be sure you have it installed in your theme. \n\nYou must use [npm](https://www.npmjs.com/) to install the `stencil-utils` module in your theme during initial installation. You must run `npm install` after downloading and installing a refreshed Cornerstone version to ensure that all your dependencies are up to date.\n\n_Windows users need to run this in git bash._\n\nComplete the following steps:\n\nNavigate to your Stencil theme directory. This example assumes that this target directory has the default name `cornerstone`.\n\n`cd cornerstone`\n\nNext, execute the following command inside of that directory:\n\t\n`npm install`\n\nThis will install the required npm modules to properly leverage the Stencil event framework.\n\nNow that your installation is complete, start \n<a href=\"/docs/preparing-your-store-tokens\">preparing your store/tokens</a>."
                      header:
                        anchor: installing_installing-stencils-js-utilities
                    - type: text
                      data: '---'
              - title: Authentication & Tokens
                route:
                  path: /authentication-and-tokens
                data:
                  blocks:
                    - type: html
                      data: <h1>Creating an API Account to Obtain OAuth Tokens</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#authentication_creating-an-api-account\">Creating an API Account</a></li>\n    <li><a href=\"#authentication_issuing-additional\">Issuing Additional Tokens</a></li>\n    <li><a href=\"#authentication_revoking-tokens\">Revoking Tokens</a></li>\n    <li><a href=\"#authentication_copying-oauth-tokens\">Copying OAuth Tokens</a></li>\n\t</ul>\n</div>"
                    - type: callout
                      data:
                        type: error
                        body: >-
                          If you've successfully installed Stencil you're ready
                          to create a BigCommerce API Account. 

                          _If you have not yet installed Stencil, see the
                          articles in "Installing and Launching Stencil._
                        title: Status Check
                    - type: text
                      data: >-
                        ## Creating an API Account 


                        Follow the steps below to create an API Account and
                        obtain your OAuth Tokens.


                        1. Using the store owner's credentials, log into the
                        control panel of the store for which you are
                        developing. 


                        2. From the left nav, select `Advanced Settings` > `API
                        Accounts`.


                        3. From the resulting Store API Accounts page, select
                        the `Create API Account` button.


                        4. Give your account a name that reflects its purpose.


                        _The BigCommerce platform does not validate this name,
                        however, we recommend naming accounts by purpose to help
                        you keep track of which accounts you need to keep
                        active. You should assign a name that will make the
                        account's purpose clear to you and other store
                        administrators._


                        5. Under OAuth Scopes, set the Themes selector to either
                        `modify` or `read-only`.


                        _The read-only scope is sufficient to
                        authorize/initialize a Stencil theme. However, the
                        modify scope will achieve the same goal, while also
                        authorizing this account to upload themes to the store
                        from the command line._


                        6. Click `Save`. 


                        _As outlined in [this support article](), doing so will
                        display a modal, from which you can copy your `Client
                        ID` and `Access Token` values. The modal will also
                        prompt your browser to download a .txt file that
                        contains your credentials. You will need these values to
                        authorize and initialize your Stencil theme. If you're
                        ready to do so now, move ahead to [Authorizing and
                        Initializing Stencil]()._
                      header:
                        anchor: authentication_creating-an-api-account
                    - type: callout
                      data:
                        type: warning
                        title: Reserved Role
                        body: >-
                          Currently, only the store owner can create an OAuth
                          API account according to the instructions below. Also,
                          note that each store is limited to 50 accounts at a
                          time.
                    - type: text
                      data: '---'
                    - type: text
                      data: >
                        ## Issuing Additional Tokens


                        To issue store tokens for additional themes or
                        developers, repeat the process outlined in Creating an
                        API Account.


                        (Even if you originally initialized your theme using a
                        legacy API [Basic-Auth] token, you will need to generate
                        any new tokens using the new OAuth flow.)


                        You can create up to 50 API accounts/tokens per store.
                        If you hit this limit and still need to create new
                        tokens, you will need to delete existing accounts.
                        Deleting an account will invalidate the corresponding
                        token, which will affect any developer using that token.
                      header:
                        anchor: authentication_issuing-additional
                    - type: text
                      data: >-
                        ## Revoking OAuth Tokens


                        **Note**: After completing the below process, there is
                        no undo. The following process completely deletes the
                        selected account(s), revoking the corresponding
                        token(s).


                        If you are completely sure you would like to revoke an
                        existing OAuth store token, delete the corresponding
                        Store API account with the following steps:


                        1. Navigate to the Control Panel's API Accounts page.


                        2. Select the trash-can button to the right of the
                        account that you want to delete.


                        _*You can also use the check boxes at left to select
                        multiple accounts to delete them all at once._
                      header:
                        anchor: authentication_revoking-tokens
                    - type: image
                      data: >-
                        //s3.amazonaws.com/user-content.stoplight.io/6116/1537421464104
                    - type: text
                      data: >-
                        ## Copying OAuth Tokens 


                        To access an existing OAuth token to authorize your
                        theme:


                        1. Open the `.txt` file that the BigCommerce control
                        panel generated when you created the API account.


                        _If you did not retain this file, you will need to
                        generate a new token by repeating the Creating an API
                        Account procedure._


                        2. Note the Client ID and Access Token hashes in the
                        file (or in the control-panel modal for your newly
                        created token).


                        3. If you are a merchant granting an outside theme
                        developer access to your store, provide the Client ID
                        and Access Token values to the developer. The developer
                        will need these when [Authorizing and Initializing
                        Stencil](). If you are a merchant developing a theme
                        against your own store, you will use the same two values
                        in the same [Authorizing and Initializing Stencil]()
                        step.
                      header:
                        anchor: 'authentication_copying-oauth-tokens '
              - title: Launching Stencil
                route:
                  path: /launching-stencil
                data:
                  children:
                    - title: Authorizing and Initializing Stencil
                      route:
                        path: /authorizing-and-initializing
                      data:
                        blocks:
                          - type: html
                            data: <h1>Authorizing and Initializing Stencil</h1>
                          - type: html
                            data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#authorizing_authorizing-oauth\">Authorizing with OAuth Tokens</a></li>\n\t</ul>\n</div>"
                          - type: callout
                            data:
                              body: >-
                                Even when you share a theme across storefronts,
                                we strongly recommend that you clone a separate
                                subdirectory (each containing its own .stencil
                                file) for each store. This helps isolate and
                                secure each merchant's data.


                                You can clone your .../cornerstone/ subdirectory
                                now to create your first isolated copy, and then
                                switch to the resulting new subdirectory to
                                continue. (Prior to March 2017, Stencil's
                                default subdirectory name was .../stencil/.)
                              title: ' Best Practice: Isolate Stores by Subdirectory'
                          - type: text
                            data: >+
                              ## Authorizing with OAuth Tokens


                              Use the following steps to authorize your theme
                              using an OAuth API account:


                              1. Have your store API account's Client ID and
                              Access Token hashes ready. 

                              (Refer back to the Copying a Token to Initialize
                              Stencil or Creating an API Account instructions.)


                              2. Starting from the subdirectory for the
                              appropriate theme (and store), initialize Stencil
                              CLI by running the following command (_Windows
                              users need to run this in git bash_):


                              `stencil init`


                              3. You will be prompted to provide the homepage
                              URL of the production store against which you want
                              to develop. This can be your own store, or a
                              client store that you are customizing.


                              4. Next, you will be prompted to enter the port
                              where you would like to run your store on your
                              local machine. This can be any port you like, but
                              we recommend using port 3000.


                              5. Next, you will be prompted: What is your
                              Stencil OAuth Client ID? Enter your store API
                              account's Client ID.


                              (If you used this Client ID when you last ran
                              stencil init, you'll see it hinted on the command
                              line, and can just confirm it.)


                              6. Finally, you will be prompted: What is your
                              Stencil OAuth Access Token? If you entered these
                              credentials when you last ran stencil init, you'll
                              see the token hinted in cleartext. If not, paste
                              your Access Token hash onto the command line. Then
                              press Enter.



                              Your terminal window should now confirm that you
                              have successfully initialized Stencil CLI on your
                              local machine. With Stencil CLI initialized, you
                              are ready to start Stencil and begin development.


                            header:
                              anchor: authorizing_authorizing-oauth
                    - title: Running Stencil Locally
                      route:
                        path: /running-stencil-locally
                      data:
                        blocks:
                          - type: html
                            data: <h1>Running Stencil Locally</h1>
                          - type: html
                            data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#running_local-launch-theme\">Local Launch: Theme Only</a></li>\n    <li><a href=\"#running_local-launch-theme-and-editor\">Local Launch: Theme and Theme Editor</a></li>\n    <li><a href=\"#running_disabling\">Local Launch: Disabling Caching</a></li>\n\t</ul>\n</div>"
                          - type: text
                            data: >-
                              ## Local Launch: Theme Only


                              In order to run Stencil locally, issue the
                              following command in your initialized Stencil
                              theme directory (_Windows users need to run this
                              in git bash_):


                              `stencil start`


                              Assuming that you set Stencil to run on `port
                              3000`, when you navigate to http://localhost:3000,
                              you should see the storefront to which you pointed
                              your local instance – but with the stencil theme
                              applied to it.


                              ## Troubleshooting Token Errors


                              If you receive the following error message, 


                              `Unauthorized, please use a valid username/token`


                              then store token authentication has failed.


                              In this case, please track back and review the
                              following articles:


                              * [Creating an API
                              Account](creating-an-api-account): How to issue or
                              reissue tokens in the BigCommerce control panel.

                              * [Authorizing and Initializing
                              Stencil:](authorizing-and-initializing-stencil):
                              How to initialize Stencil with your username and
                              token.
                            header:
                              anchor: running_local-launch-theme
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Local Launch: Theme and Theme Editor


                              To run Stencil locally while also launching a
                              local version of Theme Editor, start in your theme
                              directory and run the following command, but
                              append the -e option:


                              `stencil start -e`


                              The Theme Editor server will run in parallel with
                              the stencil theme at
                              [http://localhost:8181](http://localhost:8181/).
                              The use case for this is a developer who is
                              reconfiguring the Theme Editor/Store Design (check
                              terminology) settings. It is important to note
                              this is a tool to understand the experience
                              changes when editing the schema.json file. Making
                              changes to your store on the Theme Editor/Using
                              store design on the local host port will not
                              affect your life store.


                              ### Customizing Theme Editor's Port


                              You can override Theme Editor's default port by
                              appending the "--theme-editor-port [port]" option.
                              For example, to specify port 9000, you would
                              enter:


                              `stencil start -e --theme-editor-port 9000

                              `


                              To verify Theme Editor's launch, you would then go
                              to http://localhost:9000. Using this option, you
                              can specify any port between `1024` and `65535`.
                            header:
                              anchor: running_local-launch-theme-and-editor
                          - type: text
                            data: '---'
                          - type: text
                            data: >
                              ## Local Launch: Disabling Caching


                              By default, Stencil caches API resource data per
                              storefront page. This minimizes server traffic
                              while you develop your theme locally.

                              If you prefer to see your changes reflected
                              immediately in your live store, you can turn off
                              caching by appending the `--no-cache` or `-n`
                              option:


                              `stencil start --no-cache`

                              `stencil start -n`


                              ### To re-enable caching:


                              Kill the current Stencil server (_ctrl + c will do
                              the job_) and restart Stencil, this time omitting
                              the `--no-cache` or `-n` option.


                              `stencil start` 
                            header:
                              anchor: running_disabling
                    - title: Troubleshooting Your Setup
                      route:
                        path: /troubleshooting-your-setup
                      data:
                        blocks:
                          - type: html
                            data: <h1>Troubleshooting Your Setup</h1>
                          - type: html
                            data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#troubleshooting_unsupported\">Unsupported Node Version</a></li>\n    <li><a href=\"#troubleshooting_npm-install\"><code>npm install</code> errors</a></li>\n    <li><a href=\"#troubleshooting_npm-install-stencil-init\">npm install and stencil init Errors</a></li>\n    <li><a href=\"#troubleshooting_stencil-init\">\"stencil init/stencil start errors</a></li>\n    <li><a href=\"#troubleshooting_stencil-start-missing-module\"><code>stencil start</code>/missing module Errors</a></li>\n    <li><a href=\"#troubleshooting_uncaught\">\"Uncaught TypeError: Illegal invocation\" error</a></li>\n    <li><a href=\"#troubleshooting_mac-os\">Mac OS: \"Xcode/iOS license...\" Errors upon Stencil Commands</a></li>\n    <li><a href=\"#troubleshooting_etimeout\">ETIMEOUT Errors on Node >4.4.0</a></li>\n    <li><a href=\"#troubleshooting_stencil-command-not-found\"><code>stencil</code> command not found</a></li>\n    <li><a href=\"#troubleshooting_500-errors\">500 Errors</a></li>\n    <li><a href=\"#troubleshooting_lint-errors\">Lint Errors upon Bundling</a></li>\n    <li><a href=\"#troubleshooting_module-not-found\">\"Module Not Found\" Errors upon Bundling</a></li>\n    <li><a href=\"#troubleshooting_short\">Short or Undescriptive JavaScript Diagnostics</a></li>\n    <li><a href=\"#troubleshooting_tr-300\">TR-300 Error upon Theme Upload</a></li>\n    <li><a href=\"#troubleshooting_uninstalling\">Uninstalling and Reinstalling Stencil CLI</a></li>\n\t</ul>\n</div>"
                          - type: callout
                            data:
                              title: First Check the Terminal Window
                              body: >-
                                For any unexpected behavior that you encounter
                                while developing your Stencil theme, first check
                                your terminal window where you started Stencil
                                CLI. 


                                In some cases, the terminal will provide a
                                verbose error message specifying where to look
                                for problems. In any case, it has the potential
                                to provide further insight on the issue.
                                Diagnostic suggestions are listed on this page
                                for error messages that may not be helpful in
                                revealing the issue you're experiencing.
                          - type: text
                            data: >-
                              ## Unsupported Node Version


                              If you receive the following error message, please
                              reinstall Node.js to a supported "LTS" ("Long-Term
                              Support") version:


                              ```

                              Debug: internal, implementation, error
                                      TypeError: Uncaught error: Object #<Object> has no method 'parse'
                                      at internals.implementation 
                                      (/usr/local/lib/node_modules/stencil-cli/server/plugins/CssCompiler/index.js:32:26)
                              ```


                              On Mac OS, we have tested Stencil CLI most
                              robustly on Node.js version 4.4.0. On Linux, we
                              have tested most robustly on version 4.1.2. On
                              Windows, we have tested most robustly on version
                              4.6.1. You’ll find detailed steps (for each
                              operating system) in these instructions'
                              Installing Stencil Prerequisites by OS section.
                            header:
                              anchor: troubleshooting_unsupported
                          - type: text
                            data: >-
                              ## `npm install` Errors


                              The following headings represent errors that may
                              occur when running the `npm install` command. The
                              content under each heading issues a fix for the
                              issue.


                              ### "Unmet Peer Dependency"


                              If you get any `Unmet Peer Dependency` errors when
                              issuing the `npm install` command – or at other
                              times – make sure you are running the `npm
                              install` command **inside** your theme directory.


                              If running the `npm install ` command inside your
                              theme directory does not resolve the error, try
                              one of the following:


                              * Try removing your theme directory's
                              `/node_modules/` subdirectory, by running `rm -rf
                              node_modules`


                              * Run the `npm cache clean` command


                              * Re-run `npm install`



                              ### Permissions (EPERM or EACCES) Error


                              If you get a file-permissions error such as
                              `EPERM` or `EACCES` when issuing the `npm install`
                              command, try one of the workarounds listed on this
                              [external](https://docs.npmjs.com/getting-started/fixing-npm-permissions)
                              page. 


                              ### "js/bundle" Errors


                              If you get errors of the following type upon
                              executing the `stencil init` command:


                              ```

                              Potentially unhandled rejection [6] TypeError:
                              Error loading "js/bundle" 

                              at
                              file:/Users/<username>/Desktop/Fortune-1.4.6/assets/js/bundle.js


                              Error evaluating
                              file:/Users/<username>/Desktop/Fortune-1.4.6/assets/js/bundle.js


                              Cannot read property 'createElement' of
                              undefined...

                              ```


                              try the following workaround:


                              1. Download and unzip a fresh copy of the theme.


                              3. Refresh theme dependencies by running `npm
                              install && jspm install`


                              3. Run `stencil init`.


                              *You will see the same error message as before,
                              but proceed.*


                              4. Delete the `<theme-name>/assets/js/bundle.js`
                              file.


                              5. Run `stencil init` again.

                              This should now execute properly.

                              6. Run `stencil start`


                              8. Verify your theme's launch at:
                              http://localhost:3000.
                            header:
                              anchor: troubleshooting_npm-install
                          - type: text
                            data: >-
                              ## `npm install` and `stencil init` Errors


                              If you get unexpected error messages when issuing
                              the `npm install` or `stencil init` commands,
                              check your Node.js version and ensure it aligns
                              with a version that is compatible for the Stencil
                              framework.
                            header:
                              anchor: troubleshooting_npm-install-stencil-init
                          - type: text
                            data: >-
                              ## `stencil init`/`stencil start` Errors


                              If you get unexpected error messages or unexpected
                              results upon executing the `stencil init`,
                              `stencil start`, or other Stencil CLI commands,
                              make sure you are working in the subdirectory for
                              the specific theme you intend to launch. 


                              One way of checking what directory you are working
                              in is by running the `pwd` command in your
                              terminal.
                            header:
                              anchor: troubleshooting_stencil-init
                          - type: text
                            data: >-
                              ## `stencil start`/missing module Errors


                              If executing `stencil start` provokes errors like
                              the following


                              ```

                              module.js:327

                              throw err;

                              ^


                              Error: Cannot find module 'webpack'

                              at Function.Module._resolveFilename
                              (module.js:325:15)

                              at Function.Module._load (module.js:276:25)

                              at Module.require (module.js:353:17)

                              at require (internal/module.js:12:17)

                              at Object.
                              (/Users/jane.doe/themes/cornerstone/stencil.conf.js:2:15)

                              at Module._compile (module.js:409:26)

                              at Object.Module._extensions..js
                              (module.js:416:10)

                              at Module.load (module.js:343:32)

                              at Function.Module._load (module.js:300:12)

                              at Module.require (module.js:353:17)

                              ```


                              switch to your theme directory and run `npm
                              install`. Running this command will add the
                              missing JavaScript library dependencies.


                              If you receive the same error again after running
                              `npm install`, you should completely uninstall and
                              reinstall both the Stencil framework and Node.js.
                            header:
                              anchor: troubleshooting_stencil-start-missing-module
                          - type: text
                            data: >-
                              ## "Uncaught TypeError: Illegal invocation" error


                              If you receive an `Uncaught TypeError: Illegal
                              invocation` console error, and previously
                              installed Stencil using the original jspm-based
                              installation flow and later switched to our
                              current webpack installation flow, please remove
                              your theme's `/node_modules/` subdirectory, then
                              re-run `npm install` inside your theme's
                              directory.
                            header:
                              anchor: troubleshooting_uncaught
                          - type: text
                            data: >
                              ## Mac OS: "Xcode/iOS license..." Errors upon
                              Stencil Commands


                              On Mac OS, if you have recently installed a new
                              version of Xcode, the command line will display
                              the following error when you next try to use or
                              reinstall Stencil: 


                              `error: Agreeing to the Xcode/iOS license requires
                              admin privileges, please re-run as root via sudo.`


                              To resolve this error, do the following:

                              * Launch Xcode.

                              * Accept its user agreement.

                              * Quit Xcode.

                              * Re-execute your Stencil command.
                            header:
                              anchor: troubleshooting_mac-os
                          - type: text
                            data: >-
                              ## ETIMEOUT Errors on Node >4.4.0


                              If you are running a version of Node.js higher
                              than 4.4.0, and you receive an `ETIMEOUT` error
                              when running Stencil CLI, re-install the latest
                              version of Stencil CLI to resolve this error by
                              following the workflow in Installing Stencil
                              CLI/Framework.
                            header:
                              anchor: troubleshooting_etimeout
                          - type: text
                            data: >
                              ## `stencil` command not found


                              ### Reinstall Stencil CLI


                              If you receive the error message -bash: `stencil:
                              command not found`, ensure that you have followed
                              the steps on Installing Stencil CLI/Framework or
                              attempt to reinstall the Stencil CLI. 


                              ### Redirect Bash shell


                              If you receive the error message -bash: stencil:
                              command not found, enter echo $NVM_DIR. If this
                              command returns nothing, then run source
                              ~/.bash_profile and try running running stencil
                              commands again.


                              ### Check/Specify `nvm` Version


                              If you receive a `stencil: command not found`
                              error message upon executing stencil start from
                              inside your theme subdirectory: Check whether nvm
                              has installed multiple versions of Node.js, by
                              entering the following command:


                              `ls ~/.nvm/versions/node`


                              If this reports more than one version, specify
                              your platform's supported Node.js
                              `<version_number>` by entering: 


                              `nvm use <version_number>`


                              To prevent this error from recurring, add the same
                              `nvm use <version_number>` command to your
                              ~/.bash_profile file.
                            header:
                              anchor: troubleshooting_stencil-command-not-found
                          - type: text
                            data: >-
                              ## `stencil start` errors


                              ### "Unauthorized...username/token" Error


                              If executing the `stencil start` command generates
                              an `Unauthorized, please use a valid
                              username/token` error: Please make sure that the
                              `.stencil` file contains the correct store URL.
                              Also, verify that you have copied the correct
                              username and token. If you continue to get the
                              same error, please reissue tokens.


                              ### "Unable to load registry %bitbucket%"


                              If you have downloaded and installed a Marketplace
                              theme (other than Cornerstone), and after running
                              stencil start, received the error `Unable to load
                              registry %bitbucket%`: Try this workaround.


                              1. Back up your current theme
                              directory/directories. 

                              (In a default installation, the theme directory is
                              named `.../cornerstone/`. Prior to March 2017,
                              this directory's name defaulted to `.../stencil/`.
                              Use the same substitutions for other code examples
                              on this page.)


                              2. To ensure that you install refreshed
                              dependencies, delete your
                              `<theme-name>/node_modules/` and
                              `<theme-name>/assets/jspm_packages/`
                              subdirectories. (You can check installed versions
                              of dependencies by examining your
                              `<theme-name>/package.json` file.)


                              3. Starting inside your theme directory, enter
                              this alternate sequence of commands:


                              ```

                              npm install -g jspm-git

                              npm install

                              jspm config registries.bitbucket.baseurl
                              git+ssh://git@bitbucket.org/

                              jspm config registries.bitbucket.handler jspm-git

                              jspm install

                              ```


                              4. Re-launch your theme.
                          - type: text
                            data: >-
                              ## 500 Errors


                              If you see errors like or _similar_ to below:


                              `{"statusCode":500,"error":"Internal Server
                              Error","message":"An internal server error
                              occurred"}`


                              they often indicate a template syntax error, such
                              as unmatched or missing punctuation. Check your
                              terminal window for more details.
                            header:
                              anchor: troubleshooting_500-errors
                          - type: text
                            data: >
                              ## Lint Errors upon Bundling


                              If bundling your theme triggers multiple lint
                              errors related to the `bundle.js` file, your theme
                              is missing the `.eslintignore` file. Please
                              retrieve this file from the [Cornerstone
                              repo](https://github.com/bigcommerce/cornerstone),
                              then re-run `stencil bundle`.
                            header:
                              anchor: troubleshooting_lint-errors
                          - type: text
                            data: >-
                              ## "Module Not Found" Errors upon Bundling


                              If you see the following error when running
                              stencil bundle, this is a past bug that has since
                              been corrected.


                              `[ModuleNotFoundError: Module not found: Error:
                              Cannot resolve module 'pace' in...]`


                              To remove the error, please update your
                              Cornerstone version. 
                            header:
                              anchor: troubleshooting_module-not-found
                          - type: text
                            data: >-
                              ## Short or Undescriptive JavaScript Diagnostics


                              If JavaScript errors in your browser's developer
                              tools are not reporting filenames and line
                              numbers, try changing your `webpack.conf.js`
                              file's sourcemap entry from:


                              `devtool: 'eval-cheap-module-source-map'`


                              to:


                              `devtool: 'eval-source-map'`


                              The `eval-cheap-module-source-map` option performs
                              faster rebuilds, but omits line numbers. The
                              `eval-source-map` option is slower, but more
                              verbose. 
                            header:
                              anchor: troubleshooting_short
                          - type: text
                            data: >-
                              ## TR-300 Error upon Theme Upload


                              If uploading your theme triggers a TR-300 error,
                              this can indicate an included source-map file
                              (`bundle.js.map`) that exceeds its size limit of 5
                              MB. If your `bundle.js.map` exceeds that limit,
                              the workaround is to move this file outside your
                              theme directory before re-running `stencil
                              bundle`. 
                            header:
                              anchor: troubleshooting_tr-300
                          - type: text
                            data: >-
                              ## Uninstalling and Reinstalling Stencil CLI


                              If you encounter persistent problems in
                              initializing or starting Stencil, you have the
                              option of completely removing Stencil CLI and
                              doing a fresh reinstall. You would do so as
                              follows:


                              1. From your command line, issue the command:

                              `npm uninstall -g @bigcommerce/stencil-cli`


                              2. Navigate back to the Installing and Launching
                              Stencil section and repeat all installation steps
                              to reinstall dependencies and restore your theme,
                              according to your development scenario.


                              A more-drastic measure is to **also** uninstall
                              and reinstall Stencil CLI's Node.js prerequisites
                              (along with uninstalling Stencil CLI). We do not
                              recommend this, as it might disable other Node.js
                              applications on your local machine.
                            header:
                              anchor: troubleshooting_uninstalling
                    - title: Stencil CLI Options and Commands
                      route:
                        path: /stencil-cli-options-and-commands
                      data:
                        blocks:
                          - type: html
                            data: <h1>Stencil CLI Options and Commands</h1>
                          - type: html
                            data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#stencil_basic-cli\">Basic CLI Options and Commands</a></li>\n    <li><a href=\"#stencil_stencil-start\">Stencil Start Options</a></li>\n    <li><a href=\"#stencil_stencil-push\">Stencil Push Options</a></li>\n\t</ul>\n</div>"
                          - type: text
                            data: "## Basic CLI Options and Commands\n\nThe syntax to run a basic Stencil CLI command is: stencil <commands> [options] <parameter>.\n\nTo see the basic options and commands that the Stencil CLI package supports, enter any of the following forms of the help option on your command line:\n\n`stencil <command> [option] <parameter>`\n\nTo see the basic options and commands that the Stencil CLI package supports, enter any of the following forms of the help option on your command line:\n\n```\nstencil\nstencil help\nstencil --help\nstencil -h\n```\n\nYour terminal window will display options and commands listed in the tables below. \n\t\n<table>\n  <tr>\n    <th>Option</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>-h, --help</td>\n    <td>Outputs usage information.</td>\n  </tr>\n  <tr>\n    <td>-V, --version</td>\n    <td>Outputs the version number (which is read from package.json file</span>).</td>\n  </tr>\n</table>\n\n<p></p>\n<table>\n  <tr>\n    <th>Command</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>init</td>\n    <td >Interactively creates a .stencil file, which configures how to run a BigCommerce store locally.</td>\n  </tr>\n  <tr>\n    <td>start</td>\n    <td>Starts up the BigCommerce store, using theme files in the current directory. \n\n<b>Note:</b> If stencil start generates an \"Unauthorized, please use a valid username/token error: Please make sure that the .stencil file contains the correct store URL and (for OAuth) the correct URL prefix). Also, verify that you have copied the correct credentials, as outlined here. If you continue to get the same error, please reissue tokens, as outlined here.\n    </td>\n  </tr>\n \n  \n  <tr>\n    <td>bundle</td>\n    <td>Bundles up the theme into a structured .zip file, which can be uploaded to BigCommerce. (Please see restrictions here).</td>\n  </tr>\n  \n  <tr>\n    <td></a>push</td>\n    <td>Bundles up the theme into a structured .zip file; then directly uploads (pushes) the .zip to BigCommerce.(Please see</nobr> usage instructions here. The same restrictions apply as for the bundle command.)</td>\n  </tr>\n  \n  <tr>\n    <td>release</td>\n    <td>Creates a new release in a theme's GitHub repository. Developers outside BigCommerce can use this for forks (not master) of Stencil's Cornerstone base theme, or for their own parallel themes independent of Cornerstone.</td>\n  </tr>\n    \n  <tr>\n    <td>help &lt;command&gt;</td>\n    <td>return all the options available to use for the specified command. For example, <code>stencil help bundle</code> will return the options that are available to use specifically with the stencil bundle command.\t\n    </td>\n  </tr>  \n</table>\n"
                            header:
                              anchor: '#stencil_basic-cli'
                          - type: image
                            data: >-
                              //s3.amazonaws.com/user-content.stoplight.io/6116/1538055264839
                            header:
                              title: Basic Stencil CLI Options and Commands
                          - type: callout
                            data:
                              title: '''stencil start'' and ''stencil push'' Options'
                              body: >-
                                The `stencil start` and `stencil push` CLI
                                Commands have additional custom options that can
                                be used with the command, which are detailed
                                below.
                          - type: text
                            data: >
                              ## Stencil Start Options


                              To see Stencil CLI's additional options for the
                              `stencil start` command (described above), enter
                              the following on your command line:


                              `stencil help start` 


                              Your terminal screen should read similar to the
                              image below.
                            header:
                              anchor: '#stencil_stencil-start'
                          - type: image
                            data: >-
                              //s3.amazonaws.com/user-content.stoplight.io/6116/1538029681278
                            config:
                              maxWidth: '1300'
                              maxHeight: '1300'
                          - type: text
                            data: >-
                              ## Stencil Push Options


                              To see Stencil CLI's additional options for the
                              stencil push command (described above), enter the
                              following on your command line:


                              `stencil help push`


                              Your terminal screen should read similar to the
                              image below.
                            header:
                              anchor: stencil_stencil-push
                          - type: image
                            data: >-
                              //s3.amazonaws.com/user-content.stoplight.io/6116/1538055086025
                            config:
                              maxHeight: '800'
                              maxWidth: '800'
                          - type: text
                            data: >+
                              You can use the `-f` or `--filename` option in
                              cases where you have already run `stencil bundle`
                              to bundle your theme, but the resulting .zip file
                              has not yet uploaded to BigCommerce. Use the
                              generated .zip file's **filename** as a parameter
                              to identify the generated file in your theme
                              directory. An example of the command is outlined
                              below.


                              `stencil push -f Cornerstone-2.3.2.zip`


                              In this example, `Cornerstone-2.3.2.zip` is the
                              name of the file that was generated after running
                              `stencil bundle`.


                              When you run `stencil push` with the `-f` or
                              `--filename` option, Stencil CLI skips all its
                              bundling steps and diagnostics. It proceeds
                              directly to uploading the specified file,
                              displaying its processing progress bar to show
                              upload status.

                    - title: Cornerstone File Structure
                      route:
                        path: /cornerstone-file-structure
                      data:
                        blocks:
                          - type: html
                            data: <h1>Cornerstone File Structure</h1>
                          - type: html
                            data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#cornerstone_cornerstone-file-structure\">The Cornerstone Theme File Structure</a></li>\n\t</ul>\n</div>"
                          - type: text
                            data: >
                              ## The Cornerstone Theme File Structure


                              Cornerstone is the base Stencil theme, and it is
                              also the default theme for all newly initialized
                              local storefronts. Cornerstone provides the
                              standard file structure, base design pattern, and
                              default file assets necessary to start developing
                              a custom storefront experience.


                              The Cornerstone file structure consists of four
                              main subdirectories. Within those subdirectories,
                              you'll be directed to specific files in the
                              Development Quick Start tutorial and in Stencil
                              reference material:


                              ### `template/pages`

                              `templates/pages` contains all the base template
                              pages used in a BigCommerce online storefront. The
                              pages are grouped by page category. In order to
                              prevent any rendering errors, please avoid
                              changing page names. For details, please see
                              Templates Required Directory > Pages Subdirectory.



                              ### `template/components`

                              `templates/components` Components consist of code
                              snippets and partials that can be reused
                              throughout your theme. This directory is grouped
                              by component type. For details, please see
                              Templates Required Directory > Component
                              Subdirectory.


                              ### `template/layout`

                              `templates/layout` define the overall structure
                              (header, footer, etc.) for your storefront. You
                              can implement multiple layouts here, for different
                              use cases – to make it easy to switch between
                              different look-and-feel variations for the same
                              theme. For details, please see Templates Required
                              Directory > Layout Subdirectory.


                              ### `assets/`

                              `assets/` (images, CSS and JavaScript files) will
                              be located in this directory. For details, please
                              see CSS, JavaScript, and Design Resources.


                              ### `lang/`

                              `lang/` contains translation files, including the
                              required `en.json`. For details, please see the
                              Internationalization/Localization section of the
                              documentation.


                              When developing in your local environment, all
                              files that you change in your Stencil theme
                              directory (/cornerstone/ in our default
                              installation) will be reflected immediately at
                              [http://localhost:3000](http://localhost:3000).
                            header:
                              anchor: cornerstone_cornerstone-file-structure
                  blocks: []
              - title: Advanced Installation Options
                route:
                  path: /advanced-installation-options
                data:
                  blocks: []
                  children:
                    - title: Navigating Your Setup Scenario
                      route:
                        path: /navigating-your-setup-scenario
                      data:
                        blocks:
                          - type: html
                            data: <h1>Navigating Your Setup Scenario</h1>
                          - type: html
                            data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#navigating_illustration\">Illustration of Stencil's Setup Options</a></li>\n    <li><a href=\"#navigating_initial\">Intial Cornerstone Setup</a></li>\n    <li><a href=\"#navigating_download-and-install\">Download and Install a New Version of Cornerstone</a></li>\n    <li><a href=\"#navigating_download-marketplace\">Download a Marketplace Theme</a></li>\n    <li><a href=\"#navigating_implementing-custom-build\">Implementing a Custom Build System</a></li>\n    <li><a href=\"#navigating_blueprint-store\">Blueprint Store Launched Before January 26th, 2016</a></li>\n\t</ul>\n</div>"
                          - type: callout
                            data:
                              type: warning
                              title: Notes on Dependencies
                              body: >
                                Our installation instructions have been tested
                                on Mac OS X Yosemite, Linux/Ubuntu v.14.04.4,
                                and Windows. Dependencies for other
                                platforms/releases will be added upon further
                                testing.
                          - type: text
                            data: >-
                              ## Illustration of Stencil's Setup Options


                              The diagram below visually illustrates _all_
                              currently supported workflows for setting up a
                              Stencil theme. You will choose one pathway to
                              setup Stencil for your store. The color codes for
                              each setup scenario are as follows: 


                              * [Black arrows: Initial setup with the default
                              Cornerstone theme.](#navigating_initial)


                              * [Orange arrows: Refresh Cornerstone from Theme
                              Marketplace.](#navigating_cornerstone-refresh)


                              * [Purple arrows: Customize a theme (_other than_
                              Cornerstone) downloaded from Theme
                              Marketplace.](#navigating_download-marketplace)


                              * [Green arrows: Configure a custom JavaScript
                              build
                              system](#navigating_implementing-custom-build)


                              * [Blue arrows: Adds onto any of the preceding
                              four scenarios. If developing for a BigCommerce
                              Blueprint production store launched before Jan.
                              26, 2016, you must add one extra step to enable
                              Stencil in the store's control
                              panel.](#navigating_blueprint-store)
                            header:
                              anchor: navigating_illustration
                          - type: image
                            data: >-
                              //s3.amazonaws.com/user-content.stoplight.io/6116/1538540242143
                            config:
                              centered: true
                              fluid: true
                              bordered: true
                          - type: callout
                            data:
                              title: Detailed Steps Described Below
                              body: >-
                                Continue reading to get a detailed description
                                and breakdown of the steps required for each
                                setup scenario.
                          - type: text
                            data: "## Initial Cornerstone Setup \n\nThis is the workflow to start developing based on BigCommerce's default Cornerstone theme. This workflow uses Webpack as the JavaScript build system. Steps required:\n\n* Install your necessary prerequisites\n\t* [Mac OS Prerequisites](/stencil-docs/getting-started/installing-and-launching/mac-os-prerequisites)\n\t* [Linux Prerequisites](/stencil-docs/getting-started/installing-and-launching/linux-prerequisites)\n\t* [Windows Prerequisites](/stencil-docs/getting-started/installing-and-launching/windows-prerequisites)\n* [Install Stencil CLI](/stencil-docs/getting-started/installing-and-launching/installing-the-stencil-cli)\n* [Clone the Cornerstone theme using Github](/stencil-docs/getting-started/installing-and-launching/cloning-the-cornerstone-theme)\n* [Install JavaScript Utilities](stencil-docs/getting-started/installing-and-launching/installing-stencil-utils)\n* [Create an API Account to prepare store and tokens](stencil-docs/getting-started/installing-and-launching/creating-an-api-account)\n\n\nOnce you have completed these steps, proceed to the _Launching Stencil_ section."
                            header:
                              anchor: navigating_initial
                          - type: text
                            data: '---'
                          - type: text
                            data: "## Download and Install a New Version of Cornerstone \n\nIf you would like to download and install a **new** version of Cornerstone from BigCommerce's Theme Marketplace, perform the following steps:\n\n* Ensure all necessary prerequisites are installed\n\t* [Mac OS Prerequisites](/stencil-docs/getting-started/installing-and-launching/mac-os-prerequisites)\n\t* [Linux Prerequisites](/stencil-docs/getting-started/installing-and-launching/linux-prerequisites)\n\t* [Windows Prerequisites](/stencil-docs/getting-started/installing-and-launching/windows-prerequisites)\n* [Ensure Stencil CLI is installed](/stencil-docs/getting-started/installing-and-launching/installing-the-stencil-cli)\n* [Download a new Cornerstone .zip file](/stencil-docs/advanced-installation-options/downloading-cornerstone)\n* [Reinstall JavaScript Utilities](stencil-docs/getting-started/installing-and-launching/installing-stencil-utils)\n* Repeat steps in _Launching Stencil_"
                            header:
                              anchor: navigating_download-and-install
                          - type: text
                            data: '---'
                          - type: text
                            data: "## Download a Marketplace Theme \n\nIf you would like to customize a theme _other than_ Cornerstone, follow the required steps to download a theme from BigCommerce's Theme Marketplace. This workflow requires BitBucket. Some earlier theme versions will also require additional steps for the jspm JavaScript build system. Steps required:\n\n* Install all necessary prerequisites\n\t* [Mac OS Prerequisites](/stencil-docs/getting-started/installing-and-launching/mac-os-prerequisites)\n\t* [Linux Prerequisites](/stencil-docs/getting-started/installing-and-launching/linux-prerequisites)\n\t* [Windows Prerequisites](/stencil-docs/getting-started/installing-and-launching/windows-prerequisites)\n* [Install Stencil CLI](/stencil-docs/getting-started/installing-and-launching/installing-the-stencil-cli)\n* [Set up BitBucket and Download the Marketplace theme's .zip file](/stencil-docs/advanced-installation-options/downloading-a-marketplace-theme)\n* [Install JavaScript Utilities](stencil-docs/getting-started/installing-and-launching/installing-stencil-utils)\n* [Create an API Account to Prepare Your Store and Tokens](stencil-docs/getting-started/installing-and-launching/creating-an-api-account)\n* Complete the steps outlined in _Launching Stencil_"
                            header:
                              anchor: navigating_download-marketplace
                          - type: text
                            data: '---'
                          - type: text
                            data: "## Implement a Custom JavaScript Build System \n\nThe Stencil framework currently uses Webpack 4 as its default Javascript Build system (jspm for older versions), but if you prefer, you can substitute this for a custom JavaScript build system such as Grunt. Steps recommended:\n\n* Install all necessary prerequisites\n\t* [Mac OS Prerequisites](/stencil-docs/getting-started/installing-and-launching/mac-os-prerequisites)\n\t* [Linux Prerequisites](/stencil-docs/getting-started/installing-and-launching/linux-prerequisites)\n\t* [Windows Prerequisites](/stencil-docs/getting-started/installing-and-launching/windows-prerequisites)\n* [Install Stencil CLI](/stencil-docs/getting-started/installing-and-launching/installing-the-stencil-cli)\n* [Clone the Cornerstone theme using Github](/stencil-docs/getting-started/installing-and-launching/cloning-the-cornerstone-theme)\n* [Install JavaScript Utilities](stencil-docs/getting-started/installing-and-launching/installing-stencil-utils)\n* [Configure your custom build system](/stencil-docs/getting-started/installing-and-launching/configuring-webpack-or-custom-build)\n* [Create an API Account to Prepare Your Store and Tokens](stencil-docs/getting-started/installing-and-launching/creating-an-api-account)\n* Proceed to _Launching Stencil_"
                            header:
                              anchor: navigating_implementing-custom-build
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Blueprint Store Launched before January 26th,
                              2016


                              If your store is **both**:

                              * running on a Blueprint theme

                              * was launched before Jan. 26th, 2016 


                              and you would like to enable Stencil development
                              on it, you must perform the following steps:


                              * Follow the installation path above that
                              corresponds to your development scenario

                              * Enable Stencil in the store’s control panel
                            header:
                              anchor: navigating_blueprint-store
                    - title: Downloading the Cornerstone Theme
                      route:
                        path: /downloading-the-cornerstone-theme
                      data:
                        blocks:
                          - type: html
                            data: >-
                              <h1>Downloading the Cornerstone Theme from the
                              BigCommerce Control Panel</h1>
                          - type: html
                            data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#downloading_downloading-cornerstone-zip\">Downloading the Cornerstone .zip file</a></li>\n    <li><a href=\"#downloading_reinstalling-dependencies\">Reinstalling Dependencies and Relaunching</a></li>\n    <li><a href=\"#downloading_next-steps\">Next Steps</a></li>\n\t</ul>\n</div>"
                          - type: callout
                            data:
                              type: error
                              title: Back Up Before Reinstalling
                              body: >-
                                If you are reinstalling over a base theme on
                                which you have already begun development, first
                                back up at least your theme's .stencil file.
                                This file contains your store URL, your
                                BigCommerce username and access tokens, and
                                other basic settings. Preserving those settings
                                will speed up initializing and launching the new
                                version. To allow complete rollback, back up
                                your whole theme directory. (In a current
                                default installation, this directory is named
                                `cornerstone`. Prior to March 2017, this
                                directory's name defaulted to `stencil`).
                          - type: text
                            data: "## Downloading the Cornerstone .zip file from the Control Panel\n\n_If you have not yet added Cornerstone to your store, navigate to `Storefront` > `Themes Marketplace` and add the Cornerstone theme to your store._\n\nUse these steps to download a the Cornerstone theme from the store Control Panel: \n\n**Note:** The steps below are required only if you are downloading a refreshed copy of Stencil's default Cornerstone theme, specifically from the BigCommerce Theme Marketplace. \n\nIf you are downloading a Marketplace theme (other than Cornerstone) for customization, you must follow the workflow outlined in Downloading a Marketplace Themes.\n    \n* Go to `Storefront` -> `My Themes`.\n\n* Click the Cornerstone theme's thumbnail:\n\t* If Cornerstone is the store's currently active theme, click its image thumbnail at the top of the page, under the `Current Theme` heading.\n\t* If Cornerstone is _not_ the current theme, scroll down below the lower My Themes subheading, find, and click the Cornerstone thumbnail.\n\n_The Cornerstone theme's description should zoom to full-page and display a Theme Options drop-down list at the upper right._\n\n* From the `Theme Options` drop-down list, select `Download theme file` to download this Cornerstone release as it was refreshed on Theme Marketplace. \n\n* Unpack the zipped theme to a working directory. This can either be the directory where you have been developing your theme or a new directory.\n"
                            header:
                              anchor: '#downloading_downloading-cornerstone-zip'
                          - type: text
                            data: '---'
                          - type: text
                            data: >
                              ## Reinstalling Dependencies and Relaunching


                              * Ensure that your theme includes all current
                              dependencies by repeating the [Stencil Utils
                              installation.](stencil-docs/getting-started/installing-and-launching/installing-stencil-utils) 


                              * To relaunch, repeat the steps listed in the
                              _Launching Stencil_ section.
                            header:
                              anchor: '#downloading_reinstalling-dependencies'
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Next Steps


                              When you are ready to upload your custom theme to
                              a store, follow the instructions in Bundling and
                              Submitting a Theme and Troubleshooting Theme
                              Uploads.
                            header:
                              anchor: '#downloading_next-steps'
                          - type: callout
                            data:
                              body: >-
                                Distribution of Cornerstone-based themes is
                                subject to BigCommerce's Cornerstone license,
                                including the mandatory incorporation of
                                BigCommerce's copyright statement.
                              title: Distribution of Cornerstone-based Themes
                              type: error
                    - title: Downloading a Marketplace Theme
                      route:
                        path: /downloadining-a-marketplace-theme
                      data:
                        blocks:
                          - type: html
                            data: >-
                              <h1>Downloading a Marketplace Theme from the
                              BigCommerce Control Panel</h1>
                          - type: html
                            data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#downloading_setting-up-bitbucket\">Setting Up BitBucket SSH Keys</a></li>\n    <li><a href=\"#downloading_downloading-a-marketplace-theme\">Downloading a Marketplace Theme for Customization</a></li>\n    <li><a href=\"#downloading_checking-themes-version\">Checking the Theme's Version</a></li>\n    <li><a href=\"#downloading_jspm-steps\">jspm Steps for Earlier Versions</a></li>\n    <li><a href=\"#downloading_installing-modules\">Installing Modules (Webpack themes)</a></li>\n    <li><a href=\"#downloading_next-steps\">Next Steps</a></li>\n    </ul>\n</div>"
                          - type: callout
                            data:
                              body: >-
                                BitBucket registry access is required for all
                                Marketplace themes (excluding Cornerstone). jspm
                                Extra Steps (to enable jspm and jspm-git) are
                                required only for theme versions earlier than
                                v1.2.1, as outlined on this article.
                              title: BitBucket Registry Access
                              type: warning
                          - type: text
                            data: >+
                              ## Setting Up BitBucket SSH Keys


                              To set up Stencil CLI for themes other than
                              Cornerstone, you must authorize communication
                              among your local system, the BitBucket registry,
                              and GitHub.


                              **Note:** _Steps beyond this point require that
                              you have active accounts on both BitBucket and
                              GitHub._


                              To authorize ongoing communication, you must set
                              up a secure shell (SSH) key that is shared between
                              BitBucket and GitHub. This is a multi-step
                              process, which is beyond the scope of this
                              documentation. However, we have tested the
                              following instructions and found them to be
                              reliable:


                              * [Setting up SSH for Git on BitBucket](

                              https://confluence.atlassian.com/bitbucket/set-up-ssh-for-git-728138079.html)


                              _Follow the default instructions to create a key
                              in your `~/.ssh/config`_


                              * [Setting up SSH on GitHub (a series of linked
                              steps)](

                              https://help.github.com/articles/connecting-to-github-with-ssh/)

                            header:
                              anchor: downloading_setting-up-bitbucket
                          - type: callout
                            data:
                              body: >-
                                Marketplace themes other than Cornerstone must
                                be purchased in order to be downloadable.


                                You are entitled to customize a free or
                                purchased theme for a store that you support.
                                However, the theme's original creator retains
                                rights to that theme's design. So, except for
                                Cornerstone-based themes, you may not upload a
                                derived theme to a public theme marketplace
                                (whether BigCommerce's or third-party), nor sell
                                it privately.
                              title: ' Theme Access, Copyright/Ownership, and Distribution'
                          - type: text
                            data: "## Downloading a Marketplace Theme for Customization\n\nUse these steps to download a theme (other than Cornerstone) available in the store control panel's Storefront Design area. \n\n1. If you have not yet added the theme to your store, start at Storefront Design > Themes Marketplace, and add the theme.\n\n2. Go to `Storefront Design` > `My Themes`.\n\n3. Click the theme's thumbnail:\n\t \n\t* To download the store's currently active theme, click the image thumbnail at the top of the page, under the Current Theme heading.\n\t\n\t* To download an inactive theme, scroll down below the lower My Themes subheading, and click the appropriate theme's thumbnail.\n\nYour selected theme will zoom up to a full-page description and display a Theme Options drop-down list at the upper right.\n\n4. Note the version number displayed under the theme's title and credits. At Checking the Theme's Version below, you will use this number to choose between two installation flows.\n\n5. From the Theme Options drop-down list, select the appropriate Download option. (The options visible depend on your theme's current state:)\n\n\t* Download current theme: Download the theme version that is now active on the storefront. (This option appears only if you selected the Current Theme.)\n\n\t* Download your latest customizations: Download the theme's most recently saved version. (This option appears only for themes that have been customized for this store.)\n\n\t* Download theme file: Download the theme as it was originally uploaded to Theme Marketplace. \n\n6. Unpack the zipped theme to a working directory.\n(In the remainder of this documentation, substitute this working directory's name for the default `stencil` path or the `theme-name` placeholder.)"
                            header:
                              anchor: downloading_downloading-a-marketplace-theme
                          - type: image
                            data: >-
                              //s3.amazonaws.com/user-content.stoplight.io/6116/1538543505088
                            header:
                              title: Theme Options
                              subtitle: 'Dropdown list options as related to step #5'
                            config:
                              centered: true
                              fluid: true
                              bordered: true
                              maxWidth: '300'
                              maxHeight: '300'
                          - type: callout
                            data:
                              body: >-
                                Some versions of the BigCommerce control panel
                                offer you shortcuts for steps 3–5 above,
                                removing the need to click the theme
                                card/thumbnail:


                                * For your store's currently active theme, look
                                for a version number to the right of the
                                thumbnail. You can select the Advanced drop-down
                                list to display options similar to those at step
                                5 above.


                                * For inactive themes, look for a version number
                                at the theme card's lower left. Also, you can
                                select the "..." menu at the theme card's lower
                                right to display options similar to those at
                                step 5 above.
                              title: Theme Download Shortcuts
                          - type: text
                            data: >
                              ## Checking the Theme's Version


                              Refer to the theme's version number that you noted
                              above at Downloading a Theme for Customization:


                              * If the version number is 1.10.0 or higher, the
                              theme uses Webpack as its JavaScript build system.
                              Skip ahead to the simplified installation
                              instructions in Installing Modules (Webpack
                              Themes).


                              * If the theme's version number is lower than
                              1.10.0, the theme uses jspm as its JavaScript
                              build system. Follow the steps outlined on [jspm
                              Steps for Earlier Versions]()
                            header:
                              anchor: downloading_checking-themes-version
                          - type: callout
                            data:
                              body: >-
                                For version numbers below 1.10.0, consider using
                                the options within control panel > My Themes to
                                download a newer version of the same theme. This
                                will allow you to jump ahead to the streamlined
                                instructions below at Installing Modules
                                (Webpack Themes).


                                **Note**: These version numbers do not apply to
                                the Cornerstone theme. All currently supported
                                Cornerstone versions use Webpack, and can be
                                refreshed using the even simpler refresh
                                instructions in [Downloading the Cornerstone
                                Theme]().
                              title: Consider Updating Your Theme
                              type: warning
                          - type: text
                            data: >-
                              ## jspm Steps for Earlier Versions


                              See [this legacy
                              article](https://stencil.bigcommerce.com/v1.0/docs/legacy-configuring-with-jspm)
                              to access the steps necessary for themes installed
                              with jspm.
                            header:
                              anchor: downloading_jspm-steps
                          - type: text
                            data: >-
                              ## Installing Modules (Webpack themes)


                              For Marketplace themes whose version number is
                              1.10.0 or higher, simply use npm to install the
                              modules required to access Stencil JavaScript
                              events:


                              1. Navigate to your theme directory. This example
                              assumes that this target directory has the default
                              name Cornerstone:


                              `cd cornerstone`


                              2. Within that directory, install the
                              stencil-utils module to ensure that all your
                              dependencies are up to date:


                              `npm install`
                            header:
                              anchor: downloading_installing-modules
                          - type: text
                            data: >
                              ## Next Steps


                              To authorize, initialize, and launch your theme,
                              follow the steps in the _Launching Stencil_
                              section.


                              Later, when you are ready to upload your
                              customized theme to a store, you should follow the
                              zipping and uploading instructions in Bundling and
                              Submitting a Theme and Troubleshooting Theme
                              Uploads.
                            header:
                              anchor: downloading_next-steps
                          - type: callout
                            data:
                              body: >-
                                When you issue the `stencil init` command to
                                authorize and initialize Stencil, you might
                                receive error messages about resolving BitBucket
                                as an SSH host. These errors occur when you have
                                not recently logged into BitBucket.


                                When prompted, enter the BitBucket password you
                                used in Setting Up BitBucket SSH Keys above.
                                This will clear the errors and allow you to
                                proceed.
                              type: warning
                              title: BitBucket Reauthentication
                    - title: Theme Updates & Version Control
                      route:
                        path: /theme-updates-and-version-control
                      data:
                        blocks:
                          - type: html
                            data: <h1>Theme Updates and Version Control</h1>
                          - type: html
                            data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#theme-updates_customizing\">Customizing Strategically for Easier Updates</a></li>\n    <li><a href=\"#theme-updates_goruck-best-pracs\">GoRuck's Best Practices for Handling Theme Updates</a></li>\n    <li><a href=\"#theme-updates_synchronizing-cornerstone\">Synchronizing Your Theme With Cornerstone's Updates</a></li>\n    <li><a href=\"#theme-updates_synchronizing-multiple\">Synchronizing Updates for Multiple Themes</a></li>\n\t</ul>\n</div>\n\n"
                          - type: callout
                            data:
                              title: Distributed Version Control via Git
                              body: >-
                                Many techniques discussed below rely on GitHub's
                                _distributed version control_ model and
                                features. For the underlying principles, please
                                see [Git's own
                                documentation](https://git-scm.com/book/en/v2/Getting-Started-About-Version-Control).
                          - type: text
                            data: >-
                              ## Customizing Strategically for Easier Updates


                              In order to keep your store and Stencil theme
                              performant, it's crucial to know the best way to
                              set up your customized Stencil theme in order to
                              smoothly incorporate future bug fixes,
                              enhancements, and updates that are applied to the
                              base theme. 
                            header:
                              anchor: theme-updates_customizing
                          - type: text
                            data: '---'
                          - type: text
                            data: "## GoRuck's Best Practices for Handling Theme Updates\n\nThe guidelines provided are from Web Developement team from the BigCommerce client, [GoRuck](https://www.goruck.com/). \n\nGoRuck's scenario addresses maintaining a single custom theme that is based on a third-party Marketplace theme (a theme other than Cornerstone). These guidelines can also apply to maintaining a custom theme based on Stencil's default Cornerstone theme.\n\n### Handling and Managing Theme Updates\n\n_We've made significant changes to our theme, and one principle that I've found successful is isolating my changes as much as possible. I try to put my changes into their own files, whether they're changes to templates, JavaScript, or SCSS._\n\n_I also name all my files, CSS classes and identifiers, and JavaScript methods and classes with a `gr-` prefix (as an abbreviation for our company, GORUCK LLC). Also, any changes I make to standard theme files are identified with a comment, such as:_\n\n`//Go Ruck Customization`\n\t\t\n_For example, I have a file in `assets/scss/` named `gr-theme.scss`. All of the styles I've added to the theme are either in this file, or imported by this file. So for styling, my only changes to the theme itself are in a handful of places where I had to change an existing theme style (identified with a comment), plus this one line in `templates/layout/base.html`:_\n\n`{{{stylesheet '/assets/css/gr-theme.css'}}}`\n\n_I've found that this approach provides several advantages:_\n\n* It makes it easier to distinguish my custom code from code supplied by the default theme.\n* It makes it less likely that my code will get intermingled with the standard theme code. This, in turn, prevents my code from unexpectedly being affected by theme updates.\n* It makes it easier to merge base-theme updates into my theme code.\n\n### Comparing and Merging Theme Updates\n\n_Having isolated my changes as much as I can, I identify theme changes and updates by comparing base themes, rather than by comparing base themes to my customized theme. When a new version of the theme is released, I download the .zip file from the BigCommerce Control Panel._\n\n_I then use a desktop diff tool (Beyond Compare) to \ncompare the new version to the .zip file of the theme's previous release. I ignore changes in the .zip file's\n `meta/` and `parsed/` folders, and to its `manifest.json`, and do a `Compare Contents` on the rest of the files._\n\nUltimately, I need to examine the changes carefully, to identify any changes that might affect, or be affected by, my customizations. And I need to test thoroughly. But comparing the stock themes to each other reduces the number of changes I have to examine. \n\nAlso, because I isolate my changes, most of the theme changes can be copied directly into the corresponding file in my customized theme. In practice, this means that I can limit my testing to the areas affected by changes in the standard theme, rather than having to re-test all my own changes.\n\nI personally find that it is also helpful to migrate *every* theme update into my customized version, as the update is released. If I were to wait, and to allow changes to accumulate and become more substantial, I think it would be more difficult to adequately test – and correctly integrate – the changes. Similarly, I'm grateful to the developer of our base theme (Pixel Union) for updates that have always made small, incremental changes.\n\n### Dynamic Content Injection\n\n_We've also come up with a variety of techniques for dynamically placing content on a page. For example, we can dynamically add tabs to a product page, using content stored on our WebDAV. Similarly, we can inject content from an external file into the body of a page. This allows us to put something that appears in many places, like a sizing chart, in a single place where it can be easily updated._\n\n_Or, we can use the BigCommerce control panel's various HTML editors – for Products, Categories, and Content > Web Pages – to inject content into predefined \"dropzones\" (custom div's). This allows us to generate a wide variety of content pages using a single custom template._\n\nAll of these techniques minimize the complexity of merging base-theme updates into our customized theme. For further details and examples on how we implement these techniques, see [Dynamic Content Rendering on Stencil Storefronts]()."
                            header:
                              anchor: theme-updates_goruck-best-pracs
                          - type: text
                            data: '---'
                          - type: text
                            data: >+
                              ## Synchronizing Your Theme With Cornerstone's
                              Updates


                              This section addresses two methods that will allow
                              you to keep your customized Stencil theme up to
                              date with Cornerstone's updates, enhancements, and
                              bug fixes


                              Updating Lightly Customized Themes

                              Updating Heavily Customized Themes


                              We've adapted these tips from a Stencil
                              developer's titled Stencil Version Control Best
                              Practices? on the BigCommerce Community forums.


                              ### Updating Lightly Customized Themes


                              In this scenario, you can use Git's cherry-pick
                              option to merge in specific Cornerstone commits.


                              Use the Stencil Framework Release Notes to look up
                              specific updates' commit hashes on the Cornerstone
                              repository.


                              See this Stack Overflow explanation of how to use
                              the cherry-pick option.


                              ### Updating Highly Customized Themes


                              Here, unexpected errors from automatic merges can
                              be time-consuming to undo. So, consider this
                              handtooled approach:


                              Use GitHub's Web interface to inspect each
                              Cornerstone commit (change) of interest. Each
                              commit will show you – for all changed files – a
                              diff view highlighting any deletions (left/red)
                              and any insertions (right/green).


                              For changes that you want to incorporate into your
                              theme, access the source code.


                              As illustrated below, you can either access
                              individual files via Github's Raw view, or you can
                              download a .zip of the whole Cornerstone repo in
                              order to access all files locally.


                              Manually edit the changes into your theme's
                              affected files.


                              ### Accessing Individual Files


                              In the file-by-file approach: For each commit that
                              you would like to incorporate into your custom
                              theme, do the following for each of the commit's
                              changed files.


                              In GitHub's diff view, click the View button at
                              the upper right. (We show it highlighted with a
                              red border and a tooltip.) You will see the file's
                              full contents, as shown below.


                              Click the Raw button at the upper right (which we
                              show highlighted in red). This will reveal the
                              file's full contents as plaintext – allowing you
                              to copy and paste without picking up the table
                              metadata used to display line numbering.


                              ### Downloading the Cornerstone Repository


                              This approach downloads all theme files at once,
                              allowing you to copy/paste their relevant contents
                              locally.


                              1. Navigate to the [Cornerstone Github
                              Repository](https://github.com/bigcommerce/cornerstone).

                              2. On the right hand side of the page, click the
                              green `Clone or download` button, and select
                              Download ZIP.



                            header:
                              anchor: theme-updates_synchronizing-cornerstone
                          - type: text
                            data: >-
                              ## Synchronizing Updates for Multiple Themes


                              These tips run from simpler to more-complex
                              scenarios, with a similar progression from simpler
                              to more-complex tools.


                              ### Enlist Your Clients in Future-Proofing

                              Warn your clients that editing their themes' .html
                              files (via Edit Theme Files) will complicate
                              future theme upgrades. Ask clients to keep a
                              record of such changes, so that when you release a
                              theme update, they can reapply their changes
                              themselves.


                              ### Max Out Variations

                              For very simple theme differences (like changing
                              color values), you can maintain a different theme
                              variation per storefront or use case. Given
                              Stencil's limit of four variations per theme, this
                              approach obviously has limited scalability.


                              ### Customize Outside the Theme

                              Rely as much as possible on dynamic aspects of the
                              BigCommerce control panel, like the Footer Scripts
                              editor. (Control‑panel customizations are saved
                              per store, without complicating your theme's
                              codebase.) For other examples of control-panel
                              options, please see Dynamic Content Injection
                              above.


                              ### Use Conditional Logic within Master Templates

                              For subtle changes to a portion of a template
                              file, use Handlebars helpers and conditionals to
                              render different HTML for each client's flavor of
                              the theme.


                              ### Parallel GitHub Repo's

                              Where different clients' theme flavors diverge
                              into completely custom pages – for example, each
                              client has a wildly different homepage layout –
                              Git's systematic version control helps. You will
                              probably want to fork or branch separate repo's,
                              one per client, and maintain/update them in
                              parallel.


                              As with relying on theme variations, this approach
                              has limited scalability. Beyond a certain number
                              of clients/themes (certainly by 10), it becomes
                              cumbersome.


                              ### Buffered Updates to Multiple Themes

                              For greater scalability, you might choose to
                              create your own master fork/branch of Cornerstone
                              for your group of themes. Keep that fork/branch in
                              sync with Cornerstone updates, then cascade the
                              updates to theme-specific repo's that you
                              fork/branch from this master. (This extends the
                              approach of isolating customizations, outlined
                              above.)
                            header:
                              anchor: theme-updates_synchronizing-multiple
                      config:
                        sidebar:
                          token: ''
                    - title: Configuring Webpack or a Custom Build System
                      route:
                        path: /configuring-webpack-or-custom-build
                      data:
                        blocks:
                          - type: html
                            data: >-
                              <h1>Configuring Webpack or a Custom Build
                              System</h1>
                          - type: html
                            data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#configuring_webpack-jspm-other\">Webpack, jspm, or Other JavaScript Managers</a></li>\n    <li><a href=\"#configuring_webpack-specific\">Webpack-Specific Configuration</a></li>\n    <li><a href=\"#configuring_build-system\">Build-System Configuration File</a></li>\n    <li><a href=\"#configuring_watched-folders\">Watched Folders: watchOptions Object</a></li>\n    <li><a href=\"#configuring_javascript-rebundling\">JavaScript Rebundling: development Function</a></li>\n    <li><a href=\"#configuring_theme-packaging\">Theme Packaging: production Function</a></li>\n\t</ul>\n</div>\n\n\n\n\n"
                          - type: text
                            data: >-
                              ## Webpack, jspm, or Other JavaScript Managers


                              Stencil themes are Node.js applications, and
                              therefore contain dependencies on other JavaScript
                              libraries. For the default Cornerstone theme, we
                              provide the
                              [Webpack](https://webpack.github.io/docs/) build
                              manager to handle these dependencies. 


                              As you develop and customize a theme based on
                              Cornerstone, you have option to reconfigure
                              Webpack's watched folders, and to even substitute
                              a different build system. These options are
                              explained below.


                              All themes in the BigCommerce Theme Marketplace
                              use Webpack. However, older versions of certain
                              themes used the jspm JavaScript dependency manager
                              instead of Webpack. Please see this page to
                              determine (by version number) whether you are
                              developing based on one of these earlier versions,
                              and to find the required jspm setup procedures.
                            header:
                              anchor: configuring_webpack-jspm-other
                          - type: callout
                            data:
                              type: info
                              body: >-
                                The steps below are required only if you plan to
                                modify or override the default Webpack-based
                                workflow that installs with Stencil's default
                                Cornerstone theme or and current theme in the
                                BigCommerce Theme Marketplace. If you do not
                                require these advanced configuration options,
                                you can safely skip this page.
                              title: Optional Workflow
                          - type: text
                            data: >-
                              ## Webpack-Specific Javascript Diagnostics


                              The following Webpack configuration options can
                              aid in troubleshooting.


                              If JavaScript errors in your browser's developer
                              tools are not reporting filenames and line
                              numbers, try changing your `webpack.conf.js`
                              file's
                              [sourcemap](https://webpack.js.org/guides/build-performance/#devtool)
                              entry from:


                              ```

                              devtool: 'source-map'

                              ```

                              to:


                              ```

                              devtool: 'eval-source-map'

                              ```


                              The `eval-source-map` option is slower, but more
                              verbose. This [Webpack Devtool
                              Configuration](https://webpack.js.org/configuration/devtool/)
                              article provides an overview of all devtool
                              options and details regarding each.
                            header:
                              anchor: configuring_webpack-specific
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Build-System Configuration File


                              To take advantage of automatic JavaScript bundling
                              and browser refresh, Stencil themes require the
                              [`stencil.conf.js`](https://github.com/bigcommerce/cornerstone/blob/master/stencil.conf.js)
                              file. If you would like to enable a custom build
                              system, you will need to edit this file.


                              Within `stencil.conf.js`, Stencil CLI looks for
                              the exported `watchOptions` object, and
                              `development` and `production` callbacks, shown
                              below. 


                              Continue reading to take a closer look at each of
                              these three references.
                            header:
                              anchor: configuring_build-system
                          - type: text
                            data: >-
                              ## Watched Folders: watchOptions Object


                              The `watchOptions` object defines directories for
                              the [Browsersync](https://browsersync.io/docs)
                              preview engine to watch or ignore, in two
                              respective lists. You are free to edit these
                              lists:


                              ```

                              var watchOptions = {
                                  // If files in these directories change, reload the page.
                                  files: [
                                      '/templates',
                                      '/lang'
                                  ],

                                  //Do not watch files in these directories
                                   ignored: [
                                      '/assets/scss',
                                      '/assets/less',
                                      '/assets/css',
                                      '/assets/dist',
                                  ]
                              };

                              ```
                            header:
                              anchor: configuring_watched-folders
                          - type: text
                            data: >-
                              ### JavaScript Rebundling: `development` Function


                              Upon the command-line instruction `stencil start`,
                              Stencil CLI will look for and call the
                              `development` function. 


                              In the base Cornerstone theme, we have created a
                              Webpack watcher to trigger a browser reload
                              whenever theme edits cause JavaScript to be
                              rebundled to the theme's `bundle.js` file. This
                              watcher uses options configured in the
                              `webpack.conf.js` file passed by `webpackConfig`.
                              So a JavaScript rebuild will refresh the browser:


                              ```

                              function development() {
                                  webpack(webpackConfig).watch({}, err => {
                                      if (err) {
                                          console.error(err.message, err.details);
                                      }

                                      process.send('reload');
                                  });
                              }

                              ```
                            header:
                              anchor: configuring_javascript-rebundling
                          - type: text
                            data: >-
                              ## Theme Packaging: `production` Function 


                              When you issue the command-line instruction
                              `stencil bundle`, to process and package a
                              completed theme for upload to a store, Stencil CLI
                              will look for and call the `production` function.
                              This function passes a callback as its first
                              argument to support asynchronous builds. 


                              The callback must be invoked somewhere inside the
                              `production` function to notify Stencil CLI that
                              the theme-specific build has completed and is
                              ready to package:


                              ```

                              function production() {
                                  webpackConfig.watch = false;
                                  webpackConfig.devtool = false;
                                  webpackConfig.plugins.push(new webpack.LoaderOptionsPlugin({
                                      minimize: true,
                                  }));
                                  webpackConfig.plugins.push(new webpack.optimize.UglifyJsPlugin({
                                      comments: false,
                                      compress: {
                                          warnings: true,
                                      },
                                      sourceMap: false, // Toggle to turn on source maps.
                                  }));

                                  webpack(webpackConfig).run(err => {
                                      if (err) {
                                          console.error(err.message, err.details);
                                          throw err;
                                      }

                                      process.send('done');
                                  });
                              }


                              if (process.send) {
                                  // running as a forked worker
                                  process.on('message', message => {
                                      if (message === 'development') {
                                          development();
                                      }

                                      if (message === 'production') {
                                          production();
                                      }
                                  });

                                  process.send('ready');
                              }

                              ```
                            header:
                              anchor: configuring_theme-packaging
            blocks: []
        - title: Theme Development Quickstart
          route:
            path: /development-quickstart
          data:
            children:
              - title: Customizing a Theme
                route:
                  path: /customizing-a-theme
                data:
                  blocks:
                    - type: html
                      data: <h1>Customizing a Theme</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#customizing_video\">Customizing a Theme: Video Series</a></li>\n\t\t<li><a href=\"#customizing_config-json\">Configuring config.json Keys</a></li>\n    <li><a href=\"#customizing_basic-changes\">Making Basic Design/Layout Changes</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >-
                        ## Customizing a Theme: Video Series


                        If you prefer to consume by watching video tutorials,
                        this video series will quickly get you started in
                        editing and customizing your Stencil theme.


                        1. [Customizing a Theme (Part 1) - Config.json and
                        Templates
                        Directory](https://www.youtube.com/watch?v=HORseXHq-nI&index=6&list=PLwTYtMwfzbe7EZiIWPAmPtuwRHkY7BG-0)

                        2. [Customizing a Theme (Part 2) - Lang and Assets
                        Directories](https://www.youtube.com/watch?v=OUg8ksWQGA0&index=7&list=PLwTYtMwfzbe7EZiIWPAmPtuwRHkY7BG-0)

                        3. [Customizing a Theme (Part 3) - Custom Pages, Fonts,
                        and
                        Icons](https://www.youtube.com/watch?v=ZwrVN5QrEZY&index=8&list=PLwTYtMwfzbe7EZiIWPAmPtuwRHkY7BG-0)


                        Continue reading if you would like information to
                        supplement the videos, or if you would get started
                        customizing your theme by reading and following along.
                      header:
                        anchor: customizing_video
                    - type: text
                      data: "## Configuring config.json Keys\n\n**Note:** these instructions will refer to the top-level theme directory as _cornerstone_.\n\nThe first thing you must do when beginning theme developement is configure certain values in the [cornerstone/config.json file](https://github.com/bigcommerce/cornerstone/blob/master/config.json). For example, here are the first few key/value sets in Cornerstone's config.json:\n\n```\n{\n\"name\": \"Cornerstone\",\n\"version\": \"1.0.0\",\n\"meta\": {\n  \"price\": 0,\n   \"documentation_url\": \t\t\n   \"https://support.bigcommerce.com/articles/Public/Cornerstone-\n   \tTheme-Manual\",\n  ...\n  }\n}\n```\n\nFor further details about `config.json` settings and a breakdown of each key/value set, see the in-depth config.json reference. \n\nThe next code block shows how you might change these values to reflect your own theme’s name, version number, price on Theme Marketplace, and documentation URL:\n\n```\n{\n\"name\": \"MyTheme\",\n\"version\": \"1.1.2\",\n\"meta\": {\n  \"price\": 10000,\n  \"documentation_url\": \"https://www.mywebsite.com/theme-docs/my-theme.html\",\n  ...\n  }\n}\n```"
                      header:
                        anchor: customizing_config-json
                    - type: text
                      data: >-
                        ## Making Basic Design & Layout Changes


                        ### Changing the Footer’s Background Color (config.json)


                        In a browser, load the local version of your storefront
                        (by default, http://localhost:3000). Note the page
                        footer’s appearance.


                        Next, open your `<theme-name>/config.json` in a text
                        editor. Change the page footer’s default background
                        color to red, by changing the value `"585858"` to
                        `"#a96e6e"` as indicated below:

                        ```

                        {
                         "settings": {
                          "footer-backgroundColor": "#a96e6e",
                          }
                        }

                        ```


                        This new value will propagate through the theme’s CSS
                        files and will globally change your footer. Refresh your
                        store’s home page in your browser to verify the change.


                        ### Changing the Product Image Size (config.json and
                        Handlebars)


                        In the `<theme-name>/config.json` file’s `"settings"`
                        section, you can define theme-wide image sizes for
                        rendering dynamic content. The excerpt below shows this
                        section’s predefined keys and values (dimensions in
                        pixels) for product thumbnails, galleries, and other
                        standard sizes.


                        ```

                        {
                          "settings": {
                             //...
                            "logo_size": "250x100",
                            "brand_size": "190x250",
                            "gallery_size": "300x300",
                            "productgallery_size": "500x659",
                            "product_size": "500x659",
                            "productthumb_size": "100x100",
                            "thumb_size": "100x100",
                            "zoom_size": "1280x1280",
                            "blog_size": "190x250",
                            // ...
                          },
                        }

                        ```


                        For definitions of each key’s usage, please see the
                        `config.json` reference. You can also create theme-wide
                        custom sizes by defining new key/value pair properties
                        in the `config.json` file.


                        Below is an example of code that calls one of the above
                        variables, in
                        Cornerstone's,`<theme-name>/templates/components/products/card.html`
                        file. (This file defines the display of products’ panels
                        or "cards" on multiple storefront pages.): 



                        ```<img class="card-image" src="{{getImage image
                        'productgallery_size' (cdn
                        theme_settings.default_image_product)}}"
                        alt="{{image.alt}}">

                        ```


                        Note the `{{getImage image 'productgallery_size'}}`
                        statement, a Handlebars reference to the standard
                        `productgallery_size` size defined in config.json.


                        Further examples will guide you in customizing your
                        storefront using the Handlebars templating language. 

                        For now, open `config.json` and try redefining some of
                        the default size values shown above. Then, refresh your
                        storefront’s home page (or other pages or modals) in
                        your browser, and note how the display of product images
                        changes to match your new global size values.


                        ### Redesigning Page Elements (config.json and
                        Handlebars)


                        The following example demonstrates how to redesign a
                        storefront page’s layout by editing Handlebars
                        statements in the page’s HTML. The goal here is simply
                        to move the Product landing page’s "Customers Also
                        Viewed" panel above that page’s "Product Reviews" panel.


                        With your storefront’s local version loaded in a
                        browser, click through to any product, and note the
                        relative positions of the "Product Reviews" and
                        "Customers Also Viewed" panels.


                        Next, open your working theme’s
                        `<theme-name>/templates/components/products/tabs.html
                        file`. As indicated below, **delete or comment out** the
                        `similar_by_views` component:


                        ```

                        // ...
                          {{#if product.similar_by_views}}
                              <li class="tab" role="presentational">
                                  <a class="tab-title" href="#tab-similar" role="tab" tabindex="0" aria-selected="false" controls="tab-similar">{{lang 'products.similar_by_views'}}</a>
                              </li>
                          {{/if}}
                        </ul>



                        // ...


                        {{#if product.similar_by_views}}
                          <div role="tabpanel" aria-hidden="true" class="tab-content has-jsContent" id="tab-similar">
                              {{> components/products/carousel products=product.similar_by_views columns=6}}
                          </div>
                        {{/if}}

                        </div>

                        ```


                        Now open your `/templates/pages/product.html` file. As
                        indicated below (in bold), add the `similar_by_views`
                        component with a reusable carousel wrapper:


                        ```

                        {{#if product.videos.list.length}}
                          {{> components/products/videos product.videos}}
                        {{/if}}


                        {{#if product.similar_by_views}}
                           {{> components/products/carousel products=product.similar_by_views columns=6}}
                        {{/if}}


                        {{#if settings.show_product_reviews}}
                          {{> components/products/reviews reviews=product.reviews product=product urls=urls}}
                        {{/if}}

                        ```


                        In your browser, refresh the product page, and check the
                        new arrangement of these components.
                      header:
                        anchor: customizing_basic-changes
                  children: []
              - title: config.json Resource Interactions
                route:
                  path: /config-json-resource-interactions
                data:
                  blocks:
                    - type: html
                      data: <h1><code>config.json</code> Interactions</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#config_new\">New Products Example</a></li>\n    <li><a href=\"#config_changing\">Changing Page Layout using Local Front Matter</a></li>\n    <li><a href=\"#config_retrieving\">Retrieving Specific config. Values through Sass</a></li>\n    <li><a href=\"#config_adding\">Adding/Removing Components</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >
                        To customize your theme’s appearance at a global level,
                        the values that you define in the 

                        `<theme-name>/config.json` file interact with local
                        resources. Your config.json definitions set global
                        defaults for templates, front-matter attributes, and
                        Handlebars resources throughout your theme. You can also
                        define custom variables in config.json, named according
                        to your needs.


                        ## New Products Example


                        To see how interactions with `config.json` values work,
                        first note the default values in `config.json` for the
                        `homepage_new_products_count` and
                        `product_list_display_mode` keys:


                        ```

                        {

                        "settings": {
                          "homepage_new_products_count": 12,
                          "product_list_display_mode": "grid",
                          }
                        }

                        ```


                        Next, open your `<theme-name>templates/pages/home.html`
                        file. Highlighted in bold below is a statement that uses
                        the theme-wide settings above to customize an API
                        request to the server.


                        (Note the reference to the `homepage_new_products_count`
                        key in the file’s front matter, between the two "---"
                        delimiters. If your current theme’s `home.html` front
                        matter omits this `products:new:limit` definition, paste
                        it in for this demonstration.)


                        ```

                        ---

                        products:
                          new:
                            limit: {{theme_settings.homepage_new_products_count}}
                          featured:
                            limit: {{theme_settings.homepage_featured_products_count}}
                          top_sellers:
                            limit: {{theme_settings.homepage_top_products_count}}
                        carousel: {{theme_settings.homepage_show_carousel}}

                        blog:
                            recent_posts:
                                limit: {{theme_settings.homepage_blog_posts_count}}
                        ---

                        {{#partial "hero"}}


                        <!-- [...] -->


                        {{/partial}}

                        {{> layout/base}}

                        ```


                        If you load your storefront’s home page (by default,
                        [http://localhost:3000](http://localhost:3000), you
                        should see a "New Products" section that displays 12
                        products in a grid.
                      header:
                        anchor: config_new
                    - type: text
                      data: >
                        ## Changing Page Layout Using Local Front Matter


                        Look again at your
                        `<theme-name>templates/pages/home.html` file’s front
                        matter. As in the New Products example above, note how
                        the presence and number of featured products correlates
                        to your theme’s `config.json` setting:


                        ```

                        ---

                        [...]

                        products:
                          featured:
                              limit: {{theme_settings.homepage_featured_products_count}}
                        [...]

                        ---

                        ```


                        Next, try changing the `limit:
                        {{theme_settings.homepage_featured_products_count}}`
                        statement in the `home.html` file to a hard-coded limit:
                        2, as indicated below in bold:


                        ```

                        ---

                        products:
                          // [...]
                          featured:
                              limit: 2
                          // [...]  
                        ---


                        <!-- [...] -->


                        {{#partial "page"}}


                        <!-- [...] -->


                        <div class="main full">
                          {{#if products.featured}}
                              {{> components/products/featured products=products.featured columns=2}}
                          {{/if}}
                        </div>

                        {{/partial}}

                        {{> layout/base}}

                        ```


                        If you now reload your storefront’s home page in your
                        browser, you should see the number of displayed
                        "Featured Products" change from its default number (as
                        specified in `config.json`) to two.
                      header:
                        anchor: config_changing
                    - type: text
                      data: >
                        ## Retrieving Specific config.json Values through Sass


                        In `config.json`, global variables bring dynamic values
                        into the framework. Sass imports these global variables’
                        values to gracefully handle data like theme-wide colors’
                        hexadecimal values, and to make the data available to
                        Theme Editor. Here is one short snippet from
                        `config.json`:


                        ```

                        {

                        // [...]

                        "color-highlight": "#00abc9",

                        "color-highlightDark": "#f2f2f2",

                        "color-highlightDarker": "#dfdfdf",

                        // [...]

                        }

                        ```


                        Here are the corresponding references in the default
                        Stencil theme’s
                        `<theme-name>/assets/scss/settings/global/color/_color.scss`
                        file:


                        ```

                        // [...]

                        $color-highlight:       stencilColor("color-highlight");

                        $color-highlightDarker:
                        stencilColor("color-highlightDarker");

                        $color-highlightDark:  
                        stencilColor("color-highlightDark");

                        // [...]

                        ```


                        In `config.json`, try redefining one or more color
                        variables to hex values of your choice. Then re-render
                        your theme’s home page to see the effects.
                      header:
                        anchor: config_retrieving
                    - type: text
                      data: >
                        ## Adding/Removing Components


                        The storefront properties that Stencil abstracts as
                        Handlebars resources are completely portable between
                        HTML files. For an example of how this works, first open
                        any storefront page in a browser. In the page’s footer,
                        note the appearance of product Categories.


                        Next, open your
                        `<theme-name>/templates/components/common/footer.html`
                        file in a text editor. As indicated below, cut (or copy
                        and comment out) the code section shown below
                        (characterized by the strikethrough), and keep it on
                        your Clipboard:


                        ```

                        <footer class="footer" role="contentinfo">
                          <div class="container">
                              <section class="footer-info">
                                  <!-- [...] -->
                        <article class="footer-info-col footer-info-col--small">
                          <h5 class="footer-info-heading">{{lang 'footer.categories'}}</h5>
                          <ul class="footer-info-list">
                              {{#each categories}}
                              <li>
                                  <a href="{{url}}">{{name}}</a>
                              </li>
                              {{/each}}
                          </ul>
                        </article>

                        ```


                        If you now refresh the storefront page in your browser,
                        the Categories list should disappear from the footer.


                        Next, create a new
                        `<theme-name>/templates/components/footer/
                        `subdirectory. Paste the code block from the previous
                        cut/copy into a new file named
                        `<theme-name>/templates/components/footer/categories.html`,
                        and save it:


                        ```

                        <article class="footer-info-col footer-info-col--small">
                          <h5 class="footer-info-heading">{{lang 'footer.categories'}}</h5>
                          <ul class="footer-info-list">
                              {{#each categories}}
                              <li>
                                  <a href="{{url}}">{{name}}</a>
                              </li>
                              {{/each}}
                          </ul>
                        </article>

                        ```


                        Next, back in
                        `/templates/components/common/footer.html`, add a
                        reference to your new path/file, as indicated below in
                        comments:


                        ```

                        <footer class="footer" role="contentinfo">
                          <div class="container">
                              <section class="footer-info">
                                  <!-- [...] -->
                                  {{> components/footer/categories}}
                                  <!-- [...] -->
                              </section>
                          </div>
                        </footer>

                        ```


                        If you now refresh storefront pages in your browser, the
                        Categories list should reappear in the footer. The
                        component returns even though you have moved its data
                        resources to an arbitrary new location, and referenced
                        them indirectly.
                      header:
                        anchor: config_adding
              - title: Customizing Javascript
                route:
                  path: /customizing-javascript
                data:
                  blocks:
                    - type: html
                      data: <h1>Customizing Javascript</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#customizing-javascript_customizing\">Customizing Javascript for Inidivudal Pages</a></li>\n    \t<li><a href=\"#customizing-javascript_bringing-handlebars\">Bringing Handlebars Context Values into JavaScript</a></li>\n\t\t<li><a href=\"#customizing-javascript_installing-various\">Installing Various JavaScript Libraries</a></li>\n    <li><a href=\"#customizing-example\">Example Links</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: "## Customizing JavaScript for Individual Pages\n\nHere is a very simple example of customizing the JavaScript provided in the default Stencil theme.\nIn a text editor, open the `<theme-name>/assets/js/theme/product.js` file. At the top of the Product class, insert the \"Hello World\" statement shown in bold below:\n\n\t\n```\n\texport default class Product extends PageManager {\n  constructor() {\n      super();\n  }\n\n  before(next) {\n      next();\n  }\n\n  loaded(next) {\n      console.log(\"Hello World\");\n    // Init collapsible\n    collapsible();\n    [...]\n}\n```\n\t\nIn your browser, refresh any product-details pop-up or page to see your new `\"Hello World\"` message.\n"
                      header:
                        anchor: customizing-javascript_customizing
                    - type: text
                      data: >
                        ## Bringing Handlebars Context Values into JavaScript


                        Within Stencil pages, you can inject any variables from
                        the Handlebars context into your client-side JavaScript.
                        You do so by calling the Stencil custom Handlebars
                        helper named `inject`, shown below:


                        `{{inject 'productThumbSize'
                        theme_settings.productthumb_size}}`


                        You could inject the above statement into a page
                        template rendered with `page_type = "Product"` (for
                        example: `<theme-name>/templates/pages/product.html`).
                        Stencil’s `PageManager` class will be provided this
                        context:


                        ```

                        export default class Product extends PageManager {
                          constructor() {
                              super();
                          }

                          before(next) {
                              next();
                          }

                          loaded(next) {
                              console.log("Hello World");
                              console.log(this.context.productThumbSize);
                          }

                        }

                        ```


                        Note that the
                        `console.log(this.context.themeImageSizes)`; statement
                        will report your configured image size, following the
                        `"Hello World"` message that you previously defined in
                        the Customizing JavaScript for Individual Pages above.
                      header:
                        anchor: customizing-javascript_bringing-handlebars
                    - type: text
                      data: >+
                        ## Installing Various JavaScript Libraries


                        Once you have installed the default Stencil theme, you
                        can add custom JavaScript libraries. To see how this
                        works, find your favorite library on GitHub – for
                        example: https://github.com/jquery/jquery.


                        To install this particular library for Stencil themes,
                        you would entering the following on the command line:


                        `npm install jquery`


                        Next, you would open
                        `<theme-name>/assets/js/theme/product.js`, and insert
                        the statements excerpted below:


                        ```

                        import $ from 'jquery';


                        $('.myElement').click(() => {
                            alert("You clicked myElement");
                        });

                        ```


                        As always, for specifics, refer to your chosen library’s
                        documentation.


                      header:
                        anchor: customizing-javascript_installing-various
                    - type: text
                      data: >-
                        ## Example Links 


                        For more-extended examples of adding custom JavaScript
                        (whether your own or third-party) to a theme, please see
                        this documentation's JavaScript Customization section.
                      header:
                        anchor: customizing-example
              - title: Rendering HTML with Ajax
                route:
                  path: /rendering-html-with-ajax
                data:
                  blocks:
                    - type: html
                      data: <h1>Rendering HTML with Ajax</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#rendering_rendering-html\">Rendering HTML with Ajax</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: "## Rendering HTML with Ajax\n\nStencil allows you to render dynamic components on the fly. For example, note this default code in `<theme-name>/templates/components/products/quick-view.html` (note also this file name, which Handlebars will reference later in this example):\n\n```\n<div class=\"modal-body quickView\">\n  <a href=\"#\" class=\"modal-close\" aria-label=\"Close\">&#215;</span></a>\n  {{> components/products/product-view}}\n</div>\n```\n\nTo render a different template, you would instead reference that template’s file name. For example, assume that you want to substitute a custom template that you’ve named: `<theme-name>/templates/components/products/quicker-view.html`.\n\nThis next code block is from the Stencil default theme’s `/assets/js/theme/global/quick-view.js` file. Note the `quicker-view.html` statements brought in to reference the new file name:\n\n```\nlet $modal = $('#modal'),\n  $modalContent = $('.modal-content', $modal),\n  $modalOverlay = $('.loadingOverlay', $modal),\n  modalModifierClasses = 'modal--large';\n\n$('body').on('click', '.quickview', (event) => {\n  let productId = $(event.currentTarget).data('product-id');\n\n  event.preventDefault();\n\n  // clear the modal\n  $modalContent.html('');\n  $modalOverlay.show();\n\n  // open modal\n  $modal.foundation('reveal', 'open');\n\n\t//quicker-view.html statement, replacing the standard template's quick-view.html template\n  utils.api.product.getById(productId, {template: 'products/quicker-view'}, function done(err, response) {\n      $modalOverlay.hide();\n      $modalContent.html(response);\n\n      return new ProductDetails($modalContent, context);\n  });\n});\nlet $modal = $('#modal'),\n  $modalContent = $('.modal-content', $modal),\n  $modalOverlay = $('.loadingOverlay', $modal),\n  modalModifierClasses = 'modal--large';\n\n$('body').on('click', '.quickview', (event) => {\n  let productId = $(event.currentTarget).data('product-id');\n\n  event.preventDefault();\n\n  // clear the modal\n  $modalContent.html('');\n  $modalOverlay.show();\n\n  // open modal\n  $modal.foundation('reveal', 'open');\n\n\t// \n  utils.api.product.getById(productId, {template: 'products/quicker-view'}, function done(err, response) {\n      $modalOverlay.hide();\n      $modalContent.html(response);\n\n      return new ProductDetails($modalContent, context);\n  });\n});\n```"
                      header:
                        anchor: rendering_rendering-html
              - title: Testing and Debugging Your Theme
                route:
                  path: /testing-and-debugging-your-theme
                data:
                  blocks:
                    - type: html
                      data: <h1>Testing and Debugging Your Theme</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#testing_testing-and-debugging\">Testing and Debugging Your Theme</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >
                        ## Testing and Debugging Your Theme


                        The Stencil framework provides built-in debugging tools
                        to aid in your custom front-end development.

                        When you want to see what data is available on the page
                        you are working on, you can simply add the `debug` query
                        string to your store’s localhost URL. Here is an
                        example:


                        `http://localhost:3000/product/this-is-a-sample-product?debug=context

                        `


                        This will return a list of all the objects available on
                        the page, in JSON syntax.


                        If you want to view the available JSON objects and
                        rendered page at the same time, simply change the
                        `debug` value to `bar`. Here is an example:


                        `http://localhost:3000/product/this-is-a-sample-product?debug=bar`


                        ### Using Browsersync to Render the Store on
                        Desktop/Tablet/Mobile for Testing


                        The Stencil framework uses Browsersync to help you
                        rapidly test your storefront themes across devices of
                        different viewports. After you launch Stencil with
                        stencil start, your console window will display several
                        IP addresses below the BigCommerce "B".


                        ```
                                                             `+h
                                                           `+ddd
                                                         .oddddd
                                                       .oddddddd
                                                     -sddddddddd
                                                  `-sddddddddddd
                                                 -shdddddddddddd
                                                 ...-:+ydddddddd
                                            `......`   `+ddddddd
                                            -ddddddh-    ddddddd
                                        `   .yyyyyyo.  `+ddddddd
                                      .o/    `````    :ydddddddd
                                    -ohd+   `//////:` `.sddddddd
                                  -sdddd+   -ddddddds   `hdddddd
                                :sdddddd+   .sssssso-   `ddddddd
                              :ydddddddd+              -yddddddd
                            /yddddddddddy+++++++++++oshddddddddd
                         `/hdddddddddddddddddddddddddddddddddddd
                        /hdddddddddddddddddddddddddddddddddddddd

                        _________________________


                        BigCommerce Stencil

                        _________________________


                        [BS] Proxying: http://localhost:4001

                        [BS] Access URLs:

                        ------------------------------------
                              Local: http://localhost:4000
                           External: http://172.24.4.28:4000
                        ------------------------------------
                                 UI: http://localhost:3001
                        UI External: http://172.24.4.28:3001

                        ------------------------------------

                        [BS] Watching files...

                        ```


                        Note the `External` IP address. You can copy/paste this
                        URL to access the Browsersync server from multiple
                        devices. Then, watch as scrolling and other actions sync
                        up across devices. (Note: Firewalls and other security
                        measures might interfere with this feature.)


                        To maximize the adoption of your themes, we recommend
                        that you use such testing to design responsive themes
                        that display and function well across multiple viewport
                        sizes.
                      header:
                        anchor: testing_testing-and-debugging
              - title: Managing Theme Variations
                route:
                  path: /new-subpage
                data:
                  blocks:
                    - type: html
                      data: <h1>Managing Theme Variations</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#managing_creating\">Creating and Naming a New Theme Variation </a></li>\n\t\t<li><a href=\"#managing_changing\">Changing a Theme Variation’s Font Family (config.json)</a></li>\n    <li><a href=\"#managing_preparing\">Preparing a Variation's Thumbnails</a></li>\n    <li><a href=\"#managing_using-cli\">Using Stencil CLI to Change Variations</a></li>\n    <li><a href=\"#managing_bundling-and-uploading\">Bundling and Uploading Your Theme</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >-
                        ## Creating and Naming a New Theme Variation  (Cascading
                        Settings from `config.json`)


                        You define variations in your `<theme-name>/config.json`
                        file. From the default Stencil theme’s config.json, here
                        is the Light variation’s definition, followed by the
                        head of the `Bold` variation’s definition:


                        ```

                        "variations": [

                        {
                          "name": "Light",
                          "id": "light",
                          "meta": {
                            "desktop_screenshot": "desktop_screenshot.jpg",
                            "mobile_screenshot": "mobile_screenshot.png",
                            "description": "This is the light style of the Stencil Theme",
                            "demo_url": "https://stencil-light.mybigcommerce.com",
                            "optimized_for": ["fashion", "image_heavy", "etc"],
                            "industries": []
                          },
                        {
                          "name": "Bold",
                          "id": "bold",
                        ...

                        ```


                        Try inserting a new custom variation of your own, below
                        the `"Light"` block shown above. Your variation’s
                        definition might look something like this:


                        ```

                        "variations": [

                        ...

                        {
                          "name": "MyCustomVariation",
                          "id": "my_custom_variation",
                          "meta": {
                            "desktop_screenshot": "my_custom_desktop_screenshot.jpg",
                            "mobile_screenshot": "my_custom_mobile_screenshot.png",
                            "description": "This is a really cool custom style of the Stencil Theme",
                            "demo_url": "https://stencil-custom.mybigcommerce.com",
                            "optimized_for": ["fashion", "image_heavy", "etc"],
                            "industries": []
                          },
                        {
                          "name": "Bold",
                          "id": "bold",
                        ...

                        "variations": [

                        ...

                        {
                          "name": "MyCustomVariation",
                          "id": "my_custom_variation",
                          "meta": {
                            "desktop_screenshot": "my_custom_desktop_screenshot.jpg",
                            "mobile_screenshot": "my_custom_mobile_screenshot.png",
                            "description": "This is a really cool custom style of the Stencil Theme",
                            "demo_url": "https://stencil-custom.mybigcommerce.com",
                            "optimized_for": ["fashion", "image_heavy", "etc"],
                            "industries": []
                          },
                        {
                          "name": "Bold",
                          "id": "bold",
                        ...

                        ```
                      header:
                        anchor: managing_creating
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Changing a Theme Variation’s Font Family
                        (config.json)


                        To learn more about defining variations, see the
                        `config.json` reference for details about each key’s
                        usage and allowable values. 

                        In particular, note the option to configure settings and
                        variables that are scoped to each variation. For
                        example, you could insert the
                        `"settings":...”body-font-family”` block shown below, to
                        set body text throughout this variation (only) to a
                        specific typeface/family:


                        ```

                        {
                          "name": "MyCustomVariation",
                          "id": "my_custom_variation",
                          "settings": {
                            ...
                            "body-font-family": "MyCoolFont, AnotherFont, sans-serif",
                            ...
                          }
                        }

                        ```
                      header:
                        anchor: managing_changing
                    - type: text
                      data: >
                        ## Preparing a Variation's Thumbnails


                        For details on preparing screenshots that enable
                        merchants to preview each variation – and to preview
                        your theme as a whole – in the BigCommerce control panel
                        and Theme Marketplace, see [Preparing Thumbnail
                        Images](/stencil-docs/stencil-theme-editor/preparing-thumbnail-images).
                      header:
                        anchor: managing_preparing
                    - type: text
                      data: >-
                        ## Using Stencil CLI to Change Variations


                        To locally test/debug a specific variation of your
                        theme, launch it by invoking the Stencil CLI’s
                        (command-line interface’s) `stencil start -v` switch.
                        Depending on how you’ve named your variation in
                        `config.json`, you would type something like this on the
                        command line:


                        `stencil start -v MyCustomVariation`
                      header:
                        anchor: managing_using-cli
                    - type: text
                      data: >
                        ## Bundling and Uploading Your Theme


                        If at this stage you are ready to bundle and upload your
                        theme, refer to [Bundling and
                        Uploading](/stencil-docs/prepare-and-upload-a-theme/bunding-and-uploading)
                        a Theme.
                      header:
                        anchor: managing_bundling-and-uploading
        - title: 'Stencil Theme Editor '
          route:
            path: /stencil-theme-editor
          data:
            children:
              - title: Stencil Theme Editor Overview
                route:
                  path: /stencil-theme-editor-overview
                data:
                  blocks:
                    - type: html
                      data: <h1>Stencil Theme Editor Overview</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#stencil_stencil-theme-editor-overview\">Stencil Theme Editor</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >-
                        ## Stencil Theme Editor

                        The [Stencil Theme
                        Editor](https://forum.bigcommerce.com/s/article/Stencil-Themes?_ga=2.258361674.1984523106.1539568940-967431010.1523308107)
                        is a Graphical User Interface (GUI) that allows
                        BigCommerce merchants to modify a storefront's look and
                        feel without manually entering any code. A merchant
                        using the Stencil Theme Editor can customize a
                        storefront theme by modifying characteristics from a
                        variety of menu options such as Styles, Colors,
                        Typography, Buttons, and more. Furthermore, the Stencil
                        Theme Editor is a useful rapid-customization tool for
                        developers. 


                        As a theme developer, you not only have the opportunity
                        to _use_ the theme editor to rapidly customize your
                        theme, but also _configure your own settings_ for the
                        Theme Editor. This will give merchants who download your
                        theme the ability to use the Theme Editor with your
                        theme in the ways you provide access to. Like previously
                        mentioned, the Theme Editor by default allows merchants
                        to customize everything from Styles, Colors, Typography,
                        Buttons, and more. As a theme developer, you can choose
                        and configure what features can be modified via the
                        Theme Editor for the theme that you develop.


                        To configure and work with the Theme Editor GUI locally,
                        run `stencil start -e` , and point your browser to
                        `localhost:8181`, as described here. This allows you to
                        see and test your personally configured Theme Editor
                        from a merchant's point of view. 


                        The remainder of this section guides you, as a
                        developer, through configuring your own theme options.
                      header:
                        anchor: stencil_stencil-theme-editor-overview
                    - type: callout
                      data:
                        type: error
                        body: >-
                          Open only one instance of Theme Editor at a time
                          against each storefront. There is currently no
                          synchronization mechanism for configuration changes
                          made by multiple Theme Editor instances.
                        title: ' Single Instance per Storefront'
              - title: Configuring Stencil Theme Editor
                route:
                  path: /configuring-stencil-theme-editor
                data:
                  blocks:
                    - type: html
                      data: <h1>Configuring the Stencil Theme Editor</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#configuring_configuration-files\">Configuration Files</a></li>\n    <li><a href=\"#configuring_managing-keys\">Managing Keys between Versions</a></li>\n    <li><a href=\"#configuring_persistent-settings\">Persistent Settings Storage</a></li>\n    <li><a href=\"#configuring_theme-upgrades\">Theme Upgrades and Settings</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >-
                        ## Configuration Files


                        Each theme contains two related JSON files of key-value
                        pairs: `config.json` and `schema.json`. These files'
                        keys provide the following features:


                        Keys that you include in `schema.json` – together with
                        their corresponding `config.json` default values –
                        define the settings that merchants can customize through
                        the Theme Editor graphical interface.

                        Other `config.json` keys contain metadata about the
                        theme, such as the theme's name, version, and resource
                        controls.

                        Keys located under the `config.json > variations` object
                        define variations of the theme. For example, a theme
                        might have a "Light" variation and a "Bold" variation,
                        each with different typography and colors. Each theme
                        can include as many variations as you like.

                        Keys located under both files' `settings` objects define
                        the theme's look, feel, and functionality.


                        For documentation on the principal keys included in
                        Stencil's reference Cornerstone theme, see this
                        section's [config.json Metadata]() and [schema.json
                        Metadata]() entries. For an introduction to the
                        graphical editor, see

                        [Stencil Theme Editor Overview]().
                      header:
                        anchor: configuring_configuration-files
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Managing Keys between Versions


                        To make sure revisions to your theme are
                        backward-compatibile, we generally recommend that you
                        manage keys in both your `config.json` and `schema.json`
                        files in an additive way. Specific recommendations:


                        Adding new keys is generally fine. (However, each key in
                        `schema.json` must have a matching default in
                        `config.json`, as outlined in [Enabling Theme
                        Editor]().)

                        * Use caution in deleting any key. Doing so can break
                        your new theme version's backward compatibility.

                        * We do not recommend renaming keys. Instead, we
                        recommend introducing a new key, while maintaining the
                        old key until it is no longer in use by anyone using an
                        older version of your theme.

                        * Each object within your `config.json` > [variations]()
                        object defines one theme variation. If you are adapting
                        an existing theme and consciously want to remove one or
                        more variations, you can do so by removing the
                        corresponding key(s).
                      header:
                        anchor: configuring_managing-keys
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Persistent Settings Storage


                        When store administrators use Theme Editor to customize
                        your theme for their store, the store's resulting
                        configuration settings are saved to a separate
                        configuration service at BigCommerce.
                      header:
                        anchor: configuring_persistent-settings
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Theme Upgrades and Settings


                        When a merchant upgrades your theme to a newer version,
                        all key-value pairs that were saved to the BigCommerce
                        configuration service are carried forward. For example,
                        assume this customization/upgrade scenario:


                        You release your Star Glow theme, version 1. This
                        theme's `config.json` includes a key named `logo_size`,
                        establishing a default value of 100x250. The combination
                        of the key and the value compose a `logo_size` setting.

                        The merchant uses Theme Editor to change the `logo_size`
                        setting to 175x275. This customized setting is stored in
                        the BigCommerce configuration service.

                        You release Star Glow, version 1.1. In this theme
                        revision, you have changed the `logo_size` to 300x300.

                        When the merchant applies Star Glow version 1.1 to their
                        store, their custom `logo_size` setting of 175x275
                        remains in effect.

                        If you the merchant creates a second store and applies
                        Star Glow version 1.1 to it, that store has no custom
                        `logo_size` setting – so it will default to the new
                        theme version's 300x300 value.
                      header:
                        anchor: configuring_theme-upgrades
              - title: config.json Metadata
                route:
                  path: /config-json-metadata
                data:
                  blocks:
                    - type: html
                      data: <h1><code>config.json</code> Metadata</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#config_configjson-overview\">config.json Overview</a></li>\n    <li><a href=\"#config_keys-and-example\">Keys and Example Values</a></li>\n    <li><a href=\"#config_requirements-and-restrictions\">Requirements and Restrictions</a></li>\n    <li><a href=\"#config_video-demo\">Video Demo</a></li>\n\t</ul>\n</div>\n\n\n"
                    - type: text
                      data: >
                        ## `config.json` Overview


                        You configure the `/<theme‑name>/config.json` file to
                        properly manage each of your custom theme's front-end
                        aspects. This `config.json` file’s functions are to:


                        * Provide global context for Stencil’s CSS and
                        Handlebars resources.

                        * Provide values for the Theme Editor GUI to manage.

                        * Provide metadata for your theme’s listing in the Theme
                        Marketplace.

                        * Define variations included in your theme.
                      header:
                        anchor: config_configjson-overview
                    - type: text
                      data: "## Keys and Example Values \n\nBelow are the properties you can configure, with notes and example values from Stencil's Cornerstone reference theme. Note that keys here might appear in a different order than in the Cornerstone file:\n\n<table>\n  <tr>\n    <th>Property</th>\n    <th>Format</th>\n    <th>Default/Examples</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>name</td>\n    <td>String</td>\n    <td>\"Stencil\"</td>\n\t\t<td>Theme’s name, as it will appear in the Theme Marketplace. (<b>Note:</b> Theme names should be composed of only the following characters: a-z, A-Z, 0-9, hyphen.)</td>\n  </tr>\n  <tr>\n    <td>version</td>\n    <td><a href=\"http://semver.org/\">SemVer</a></td>\n    <td>\"1.0.0\"</td>\n    <td>Theme’s version number, formatted asmajor.minor.patch.</td>\n  </tr>\n  <tr>\n    <td>meta</td>\n    <td>Object</td>\n    <td></td>\n    <td>BigCommerce will use this metadata to list themes in Theme Marketplace.(Theme variations also have their own metadata collections.)</td>\n  </tr>\n  <tr>\n    <td>price</td>\n    <td>Number</td>\n    <td>15000</td>\n    <td>Price, in cents, to purchase this theme in Theme Marketplace.</td>\n  </tr>\n  <tr>\n    <td>documentation_url</td>\n\t\t<td>String</td>\n\t\t<td><a href=\"https://support.bigcommerce.com/articles/Public/Cornerstone-Theme-Manual\">Cornerstone Theme Manual</a>\n\t\t</td>\n\t\t<td>URL of theme developer’s documentation site. This key is required to have a value.)</td>\n  </tr>\n  <tr>\n    <td>author_name</td>\n    <td>String</td>\n    <td>\"eCommerce Themes, Inc.\"</td>\n    <td>Name of the developer or partner creating the theme.(<b>Note: For a successful theme upload to BigCommerce, this key is required to have a value.</b>)</td>\n  </tr>\n  <tr>\n    <td>author_email</td>\n    <td>String</td>\n    <td>\"support@example.com\"</td>\n    <td>Contact/support email address for the developer or partner creating the theme.\n(<b>Note: For a successful theme upload to BigCommerce, this key is required to have a value.</b>)</td>\n  </tr>\n  <tr>\n    <td>author_support_url</td>\n    <td>String</td>\n    <td>\"http://example.com/contactus\"</td>\n    <td>Contact form/support URL for the developer or partner creating the theme.\n(<b>Note: For a successful theme upload to BigCommerce, this key is required to have a value.</b>)</td>\n  </tr>    \n  <tr>\n    <td>composed_image</td>\n    <td>String</td>\n    <td>\"composed_image.png\"</td>\n    <td>File name for a composed/mosaic screenshot of all variations of the theme, to appear on the \"My Themes\" page of purchased themes. The file-name value is arbitrary, but it must match the name of a file located in the <code>theme‑name/meta/</code> subdirectory.The actual file’s resolution must be 600 x 760 pixels (horizontal x vertical).</td>\n  </tr>\n  <tr>\n    <td>features</td>\n    <td>Array</td>\n    <td> [\"fully_responsive\", \"mega_navigation\", \"multi_tiered_sidebar_menu\", \"masonry_design\",\"frontpage_slideshow\",\"quick_add_to_cart\",\"switchable_product_view\",\"product_comparison_table\",\"complex_search_filtering\", \"customizable_product_selector\", \"cart_suggested_products\", \"free_customer_support\", \"free_theme_upgrades\", \"high_res_product_images\", \"product_filtering\", \"advanced_quick_view\", \"product_showcase\", \"persistent_cart\", \"one_page_check_out\", \"customized_check_out\", \"product_videos\"]</td>\n    <td>Array of exact feature names supported in this theme. The \"Default/Examples\" column lists the complete namespace. At least one of the values listed there must be present.</td>\n\t<td>These values are used as metadata for Theme Marketplace searches.</td>\n     <td> The <code>\"customized_check_out\"</code> value has a second function: It must be present if you want to enable <a href=\"https://support.bigcommerce.com/articles/Public/Optimized-Single-Page-Checkout\">Optimized One-Page Checkout</a> for your theme.</td>\n  </tr>\n  <tr>\n    <td>css_compiler</td>\n    <td>String</td>\n    <td>\"scss\"</td>\n    <td>CSS preprocessor; defaults to SCSS.</td>\n  </tr>\n  <tr>\n    <td>autoprefixer_cascade</td>\n    <td>Boolean</td>\n    <td>true</td>\n    <td>Whether to enable the Autoprefixer CSS postprocessor, to add vendor prefixes to CSS rules.</td>\n  </tr>\n  <tr>\n    <td>autoprefixer_browsers</td>\n    <td>Array</td>\n    <td>[\"last 3 versions\"]</td>\n    <td>Which legacy browsers <a href=\"https://github.com/postcss/autoprefixer\">Autoprefixer</a> should support, specified in <a href=\"https://github.com/ai/browserslist\">Browserslist</a> query format.</td>\n  </tr>\n  \n  <tr>\n    <td>settings</td>\n    <td></td>\n    <td></td>\n    <td>Display-oriented key names, and values, that you can arbitrarily set for your theme. Handlebars accesses the combined settings as the context variable <code>{{theme_settings}}</code>.Variations also have their own<code>settings</code> sections. Values that you set at the variation level will override global values that you set here (for corresponding key names, and within the scope of that variation).If you want to create a custom variable to use in Handlebars, either add it here within this theme-level <code>settings</code> section, or add it down in a variation-level <code>\">settings</code> section. You would access your arbitrarily named custom variable in Handlebars as <code>{{theme_settings.variablename}}</code>.\n\n\t\t\tHere is an example of a custom variable in the default theme’s <code>config.json</code>:\n\n<code>\"settings\": { \"homepage_featured_products_count\": 6,\n}</code>\n\nHere is the corresponding front matter in <code>home.html</code> that calls this variable. (Note that this is pure YAML – the <code>{{...}}</code> used to reference <code>config.json</code> variables within pages’ front matter do not constitute a Handlebars statement:)\n\n<code>\n---\nproducts:\n  featured:\n      limit: {{theme_settings.homepage_featured_products_count}}\n---\n</code> </td>\n</tr>\n  <tr>\n    <td>homepage_new_products_count</td>\n    <td>Number</td>\n    <td>12</td>\n    <td>Number of products to include in home page’s New Products section.</td>\n  </tr>\n  <tr>\n    <td>homepage_section-name_count,homepage_section-name_column_count</td>\n    <td>Number</td>\n    <td>[Varies]</td>\n    <td>Number of products, or columns, to include in the specified home-page section.</td>\n  </tr>\n  <tr>\n    <td>productpage_section-name_count</td>\n    <td>Number</td>\n    <td>[Varies]</td>\n    <td>Number of products to include in the specified section of product-details pages.</td>\n  </tr>\n  <tr>\n    <td>categorypage_products_per_page, brandpage_products_per_page, searchpage_products_per_page</td>\n    <td>Number</td>\n    <td>12</td>\n    <td>Number of products to include on each specified page type.</td>\n  </tr>\n\t<tr>\n    <td>homepage_show_carousel</td>\n    <td>Boolean</td>\n    <td>true</td>\n    <td>Defines whether to display an image carousel on the home page.</td>\n  </tr>  \n\t<tr>\n    <td>show_product_quick_view</td>\n    <td>Boolean</td>\n    <td>true</td>\n    <td>Defines whether to offer customers product Quick View modal windows.</td>\n  </tr>  \n\t<tr>\n    <td>show_powered_by</td>\n    <td>Boolean</td>\n    <td>true</td>\n    <td>Defines whether to display a \"Powered by BigCommerce\" credit in the sitewide footer.</td>\n  </tr>  \n\t<tr>\n    <td>show_accept_amex,\n      show_accept_visa, etc.\n    </td>\n    <td>Boolean</td>\n    <td>false</td>\n    <td>Each of these keys displays or hides a payment-method icon in the sitewide footer. The icons respectively identify credit-card issuers, PayPal, etc. If these keys are defined in schema.json, merchants can use the Theme Editor GUI to toggle each payment icon's visibility.</td>\n  </tr>\n  <tr>\n    <td>product_list_display_mode</td>\n    <td>String</td>\n    <td>\"grid\"</td>\n    <td>Default display mode for product lists. A <code>\"grid\"</code> value specifies grid format. Other entries trigger list format.</td>\n  </tr>\n  <tr>\n    <td>logo-position</td>\n    <td>String</td>\n    <td>\"center\", \"left\", \"right\"</td>\n    <td>Sets (horizontal) display alignment for store logo throughout the theme.</td>\n  </tr>\n \n<!-- Begin images section/intro: -->\n  <tr>\n    <td>[images]</td>\n    <td>\n    The following keys' values define storewide dimensions for named sizes. The <code>{{getImage}}</code> Handlebars helper can use member keys’ values to dynamically resize any images, up to a maximum target size of 4096x4096 pixels.\n    \nKey names like <code>\"logo_size\"</code> and <code>\"thumb_size\"</code> are arbitrary.\n\nFor example, this Handlebars expression:\n\n\t\t\t<code>{{getImage product.image \"thumb_size\"}}</code> will output the path to a 100x100-pixel image (assuming the <code>\"thumb_size\"</code> key retains its default value of <code>\"100x100\"</code>).\n\nBy defining or redefining these named sizes' values, in the format outlined below, you can automatically replicate the new sizes throughout your theme.</td>\n  </tr>\n  <!-- :End images intro: -->\n  \n  <tr>\n    <td><span class=\"indent1\">logo_size</span></td>\n    <td>String</td>\n    <td>250x100</td>\n    <td>Key/value pair defining global (storewide) display dimensions for the store logo. The value is a string defining the width and height &ndash; in that order &ndash; in pixels.</td>\n  </tr>\n  \n  <tr>\n    <td>gallery_size</td>\n    <td>String</td>\n    <td>300x300</td>\n    <td>Key/value pair defining storewide display dimensions for blog images (also available for other uses).</td>\n  </tr>\n\n  <tr>\n    <td>productgallery_size</td>\n    <td>String</td>\n    <td>300x300</td>\n    <td>Key/value pair defining storewide display dimensions for product-gallery images.</td>\n  </tr>\n\n  <tr>\n    <td>product_size</td>\n    <td>String</td>\n    <td>500x659</td>\n    <td>Key/value pair defining storewide display dimensions for standard/medium-sized product images.</td>\n  </tr>\n  \n  <tr>\n    <td>productthumb_size</td>\n    <td>String</td>\n    <td>100x100</td>\n    <td>Key/value pair defining storewide display dimensions for product-image thumbnails on the product details page.</td>\n  </tr>\n\n  <tr>\n    <td>thumb_size</td>\n    <td>String</td>\n    <td>100x100</td>\n    <td>Key/value pair defining storewide display dimensions for swatches, and for brand and category thumbnails.</td>\n  </tr>\n  \n  <tr>\n    <td>zoom_size</td>\n    <td>String</td>\n    <td>1280x1280</td>\n    <td>Key/value pair defining storewide display dimensions for zoomable product images on the product details page.</td>\n  </tr>\n<!-- :End images section-->\n\n<!-- Begin image URLs section: -->    \n  <tr>\n    <td>product_list_display_mode</td>\n    <td>String</td>\n    <td>\"grid\"</td>\n    <td>Default display mode for product lists. A <code>\"grid\"</code> value specifies grid format. Other entries trigger list format.</td>\n  </tr>\n  <tr>\n    <td>default_image_brand</td>\n    <td>String</td>\n    <td>/assets/img/BrandDefault.gif</td>\n    <td>Relative path to a default image representing brands.</td>\n  </tr>\n  <tr>\n    <td> <span class=\"indent1\"> default_image_product</td>\n    <td>String</td>\n    <td>/assets/img/ProductDefault.gif</td>\n    <td>Relative path to a default image representing products.</td>\n  </tr>\n  <tr>\n    <td>default_image_gift_certificate</td>\n    <td>String</td>\n    <td>/assets/img/GiftCertificate.png</td>\n    <td>Relative path to a default image representing gift certificates.</td>\n  </tr>\n<!-- :End image URLs section -->    \n  \n<!-- Begin fonts section: -->\n  <tr>\n    <td>body-font</td>\n    <td>String</td>\n    <td>\"Google_Karla_400\"</td>\n    <td>Font-family keys, with corresponding values.\nKeys are named by display purpose, and keys' names should end in <code>-font</code>. But naming is otherwise arbitrary. So you can freely define additional font families for your theme.Values should follow the format:\n\t\t\t<code>\n\t\t\t\tProviderName_Font+FamilyName\n    _OptionalWeightNumber\n\t\t\t\t</code>\n\nAs in this example:\n      <code>Google_Open+Sans_700</code> which specifies <code>Google Fonts</code> as the Provider, <code>Open Sans</code> as the Font Family, and <code>800</code> as the (optional) Weight attribute.\n\n(<b>Note:</b> The Provider; also called \"Foundry\" - is currently limited to Google Fonts.)\nStencil’s <a href=\"/docs/custom-sass-functions#FontFamily\">custom Sass functions</a> can process these keys’ values. E.g., to <span class=\"inline-code\">stencilFontFamily</span>, you could pass the (arbitrary) key name <span class=\"inline-code\">\"body-font\"</span>, and the function would process the value. Note that Sass requires explicit typing of inputs and outputs – e.g., <span class=\"inline-code\">stencilNumber</span> defaults to pixels – so you must specify any other units. Thus, for a\n\n      <pre>\"font‑size\" = 3</pre>\n      <p></p>\n\n<!--      <span class=\"indent1\"><span class=\"inline-code\">\"font‑size\" = 3</span></span><br> -->\n\n...this statement:<br><p></p>\n\n    <pre>stencilNumber(\"font-size\",\"rem\")\n    * 3</pre><p></p>\n\n<!--    <span class=\"indent1\"><span class=\"inline-code\">stencilNumber(\"font-size\",\"rem\")</span></span><br>   \n    <span class=\"indent1\"><span class=\"inline-code\">* 3</span></span><br> -->\n\n...will output:<br><p></p>\n\n    <pre>9rem</pre>\n    <p></p>\n\n<!--    <span class=\"indent1\"><span class=\"inline-code\">9rem</span></span><br><br> -->\n\n      (<b>Note:</b> To enable merchants to customize your themes' fonts via <NOBR>Theme Editor</nobr>, we recommend that you rely on Google Fonts, with no more than 25 typefaces per theme.)</td>\n  </tr>\n  <tr>\n    <td>         <span class=\"indent1\">headings-font</span></td>\n    <td>String</td>\n    <td>\"Google_Montserrat_400\"</td>\n    <td>Arbitrary key name, and value, for a font family and (optional) weight that can be applied to headings.</td>\n  </tr>\n  <tr>\n    <td>         <span class=\"indent1\">logo-font</span></td>\n    <td>String</td>\n    <td>\"Google_Oswald_300\"</td>\n    <td>Arbitrary key name, and value, for a font family and (optional) weight for logo text.</td>\n  </tr>\n  \n  <tr>\n    <td>         <span class=\"indent1\"><NOBR>fontSize-root,</nobr></span><br> <span class=\"indent1\"><NOBR>fontSize-h1</nobr>..</span><NOBR>fontSize-h6,</nobr><br> <span class=\"indent1\">etc.</span> </td>\n    <td>Number</td>\n    <td>14</td>\n    <td>Font-size keys, with corresponding values.<br><br>\n      \nThese keys' values provide defaults for options selectable in the Theme Editor GUI. Also, Stencil’s <a href=\"#CustomSassFn\">custom Sass functions</a> can process these values.<br><br> \n      \n      Here again, these keys are named by display purpose, but arbitrarily. So you can freely define additional font sizes for your theme.</td>\n  </tr>\n  \n  \n<!--Begin colors section:-->  \n  <tr>\n    <td>\n      <span class=\"indent1\"><NOBR>color-textBase</nobr></span>\n    </td>\n    <td>String</td>\n    <td>\"#4f4f4f\"</td>\n    <td>Color definitions, with corresponding hex values. These keys' values provide defaults for options selectable in the Theme Editor GUI.<br><br> \n      \n      Also, Stencil’s <a href=\"#CustomSassFn\">custom Sass functions</a> can process these values. E.g., to <span class=\"inline-code\">stencilColor</span>, you could pass the key name <span class=\"inline-code\">\"color-textBase\"</span>, and the function would return the <span class=\"inline-code\">\"#4f4f4f\"</span> value defined here.<br><br>\n      \n      The keys are named by display purpose &ndash; defining consistent colors for various parts of the theme in different states. But the keys are also named arbitrarily. So you can freely name and define new color keys for your theme.<br><br> \n      \n      (<b>Note:</b> Only a subset of the default <span class=\"inline-code\">config.json</span> file’s color definitions are listed here.) </td>\n  </tr>\n\n  <tr>\n    <td>   <span class=\"indent1\"><NOBR>color-textBase--hover,</nobr></span> <span class=\"indent1\"><NOBR>color-textBase--active,</nobr></span><br> <span class=\"indent1\">..</span><br> <span class=\"indent1\"><NOBR>color-textLink--active,</nobr></span><br> <span class=\"indent1\"><NOBR>color-textHeading,</nobr></span><br> <span class=\"indent1\">etc.</span></td>\n    <td>String</td>\n    <td>[Varies]</td>\n    <td>\"</td>\n  </tr>\n\n  <tr>\n    <td>color-primary</td>\n    <td>String</td>\n    <td>\"#4f4f4f\"</td>\n    <td>\"</td>\n  </tr>\n  \n  <tr>\n    <td>color-primaryDark</td>\n    <td>String</td>\n    <td>\"#454545\"</td>\n    <td>\"</td>\n  </tr>\n  <tr>\n    <td>color-primaryDarker</td>\n    <td>String</td>\n    <td>\"#2d2d2d\"</td>\n    <td>\"</td>\n  </tr>\n  <tr>\n    <td>color-primaryLight</td>\n    <td>String</td>\n    <td>\"#a5a5a5\"</td>\n    <td>\"</td>\n  </tr>\n  <tr>\n    <td>color-secondary</td>\n    <td>String</td>\n    <td>\"#ffffff\"</td>\n    <td>\"</td>\n  </tr>\n  <tr>\n    <td>color-secondaryDark</td>\n    <td>String</td>\n    <td>\"#f2f2f2\"</td>\n    <td>\"</td>\n  </tr>\n  <tr>\n    <td>         <span class=\"indent1\">color-secondaryDarker</span></td>\n    <td>String</td>\n    <td>\"#f2f2f2\"</td>\n    <td>\"</td>\n  </tr>\n<!-- :End colors section -->\n\n<!-- Begin Optimized checkout subsection/intro: -->\n  <tr>\n    <td> <span class=\"indent1\"> <a name=\"config-uco\"></a> [Optimized Checkout]</td>\n    <td colspan=\"3\">\n    The following are examples of keys that define default style properties for the Optimized Checkout page. Each key/value pair here corresponds to a class in the <span class=\"inline-code\">&lt;theme‑name&gt;/assets/scss/optimized-checkout.scss</span> file.\n\t</td>\n  </tr>\n  <!-- :End Optimized Checkout intro. -->\n  \n  <tr>\n    <td><span class=\"indent1\">optimizedCheckout-header-backgroundColor</span></td>\n    <td>String</td>\n    <td>#f7f7f7</td>\n    <td>Key/value pair defining default background color for the Optimized Checkout page's header.</td>\n  </tr>\n  \n  <tr>\n    <td><span class=\"indent1\">optimizedCheckout-show-backgroundImage</span></td>\n    <td>Boolean</td>\n    <td>false</td>\n    <td>Key/value pair defining whether to display a background image on the Optimized Checkout page.</td>\n  </tr>\n\n  <tr>\n    <td><span class=\"indent1\">optimizedCheckout-backgroundImage</span></td>\n    <td>String</td>\n    <td> &ndash; </td>\n    <td>Key/value pair containing file name of background image for the Optimized Checkout page.</td>\n  </tr>\n\n  <tr>\n    <td><span class=\"indent1\">optimizedCheckout-backgroundImage-size</span></td>\n    <td>String</td>\n    <td>1000x400</td>\n    <td>Key/value pair defining display size for background image on the Optimized Checkout page.</td>\n  </tr>\n\n  <tr>\n    <td><span class=\"indent1\">optimizedCheckout-show-logo</span></td>\n    <td>enum</td>\n    <td>none</td>\n    <td>Key/value pair defining whether to show logo on the Optimized Checkout page.</td>\n  </tr>\n\n  <tr>\n    <td><span class=\"indent1\">optimizedCheckout-logo</span></td>\n    <td>String</td>\n    <td> &ndash; </td>\n    <td>Key/value pair containing file name of background image for the Optimized Checkout page.</td>\n  </tr>\n\n  <tr>\n    <td><span class=\"indent1\">[...]</span></td>\n    <td>[...]</td>\n    <td> [...] </td>\n    <td>[...]<br> \n      (Multiple similar key/value pairs. For a more-complete list of the classes available, see Optimized One-Page Checkout Customization)</td>\n  </tr>\n<!-- :end Optimized checkout subsection -->  \n\n<!-- Begin read-only subsection-->\n  <tr>\n    <td>read_only_files</td>\n    <td>String array</td>\n    <td> \"/assets/scss/components/citadel\",<br> \"/assets/scss/components/foundation\",<br> \"/assets/scss/components/vendor\",<br> \"/assets/scss/vendor\",<br> \"/assets/scss/settings/citadel\",<br> \"/assets/scss/settings/foundation\",<br> \"/assets/scss/settings/vendor\",<br> \"/assets/scss/settings/normalize\" </td>\n    <td>Files and paths specified in this array will be viewable in the <a href=\"/docs/what-is-theme-editor\">Theme Editor</a> GUI, but not editable. Add any theme files/paths that you want to make read-only for store administrators using that editor.</td>\n  </tr>\n<!-- :end read-only subsection -->\n  \n<!-- Begin resources: section -->\n  <tr>\n    <td>resources</td>\n    <td></td>\n    <td></td>\n    <td>Global resources, inherited by all pages located directly within your <code><theme‑name>/templates/pages/</code> subdirectory.\n\n(This inheritance spares you from having to define them in front matter on every page. Here, the resources are defined in JSON rather than YAML format.)\n\nYou are free to add more global resources here – for example: <code>\"brands\": true</code> to display a brands list; or\n\t\t\t<code>\"blog\": \"posts\": \"limit\": 3</code> to display the top 3 blog posts. For syntax, see <a href=\"/docs/front-matter-variables#Front-ref-global\">Front-Matter Global Attributes</a>.</td>\n  </tr>\n  <tr>\n    <td>cart</td>\n    <td>Boolean</td>\n    <td>true</td>\n    <td>Defines whether to retrieve/display cart data <!--to display a shopping-cart icon/link--> in pages' chrome.</td>\n  </tr>\n  <tr>\n    <td>shop_by_brand</td>\n    <td>Boolean</td>\n    <td>true</td>\n    <td>Defines whether to include a quick-navigation list of brands in the footer. Adding this optional filter defines how many brands to load:\n\t\t\t<code>limit: number</code></td>\n  </tr>\n    \n  <tr>\n    <td>variations</td>\n    <td>Object</td>\n    <td></td>\n    <td>Collection of variation objects. Each contained object defines one variation on this overall theme. (A theme must contain at least one variation, and may contain up to four.)</td>\n  </tr>\n  <tr>\n    <td>name</td>\n    <td>String</td>\n    <td>\"Light\", \"Bold\",\"Warm\" (etc.)</td>\n    <td>An arbitrary name for this variation. This name is used in the Themes Marketplace and Theme Editor.</td>\n  </tr>\n  <tr>\n    <td>id</td>\n    <td>String</td>\n    <td>\"light\", \"bold\", \"warm\" (etc.)</td>\n    <td>A string ID for this variation. Arbitrarily named, but must be unique to this variation.\nThe Stencil framework’s database uses this unique ID to identify and process updates to variations.<br><br> \n\nWhen you submit an updated version of your theme to BigCommerce, IDs and settings for previously submitted variations must match those in previous submissions of your theme. You may add, but not remove, variations and settings in such resubmissions. You may rename variations for clarity.\n</td>\n  </tr>\n  <tr>\n    <td>settings</td>\n    <td></td>\n    <td></td>\n    <td>Variation-level counterpart to this theme’s theme-level <code>\"settings\"</code> object.\n\nValues that you set here will override theme-wide values for corresponding key names,  within the scope of this variation.\n\nYou can also create custom variables here, whose scope will be limited to this variation. Syntax is the same as for theme-wide custom variables.</td>\n  </tr>\n  <tr>\n    <td>meta</td>\n    <td>Object</td>\n    <td></td>\n    <td>Variation-level counterpart to this theme’s top-leve \"meta\" collection.\nBigCommerce will similarly use this collection’s values when listing themes in Theme Marketplace and Theme Editor.</td>\n  </tr>\n  <tr>\n    <td>\"desktop_screenshot\"</td>\n    <td>String</td>\n    <td>\"desktop_screenshot.png\"</td>\n    <td>File name for a screenshot of this variation’s large-format layout.\nThe key name is fixed. The file-name value is arbitrary, but it must match the name of a file located in the <code>theme‑name/meta/</code> subdirectory. If you are updating a variation, be sure to match this value to the intended file name.) The screenshot’s required dimensions are 2048 x 2600 pixels.</td>\n  </tr>\n  <tr>\n    <td>\"mobile_screenshot\"</td>\n    <td>String</td>\n    <td>\"mobile_screenshot.png\",</td>\n    <td>File name for a screenshot of this variation’s mobile-format layout.\nThe key name is fixed. The file-name value is arbitrary, but it must match the name of a file located in the <code>&lt;theme‑name&gt;/meta/</code> subdirectory. (If you are updating a variation, be sure to match this value to the intended file name.) The screenshot’s required dimensions are 304 x 540 pixels.</td>\n  </tr>\n  <tr>\n    <td>\"description\"</td>\n    <td>String</td>\n    <td>\"This is the light style of the Stencil Theme\"</td>\n    <td>Arbitrary text description for this variation. This description will appear in Themes Marketplace and Theme Editor.</td>\n  </tr>\n  <tr>\n    <td>\"demo_url\"</td>\n    <td>String</td>\n    <td>\"https://stencil-light.mybigcommerce.com\"</td>\n    <td>URL of your demo store, as set up on bigcommerce.com.</td>\n  </tr>\n  <tr>\n    <td>\"optimized_for”</td>\n    <td>Array</td>\n    <td>[\"arts_crafts\", \"animals_pets\", \"automotive_industrial\", \"electronics_computers\", \"fashion_jewelry\", \"food_beverage\",\"gifts_specialty\", \"health_beauty\",\"home_garden\", \"books_entertainment\",\"sports_recreation\",\"toys_games\",\"multi_purpose\",\"chrome_firefox_safari_ie_10\",\"mobile_tablet_desktop\",\"sales_discounts\",\"wholesale\",\"single_product\", \"large_catalog\", \"mobile\",\"clothing\",\"cosmetics\", \"home_appliances\",\"home_furnishings\", \"movies\",\"music\",\"digital_downloads\",\"outdoor_sports\",\"hunting_fishing\",\"video_games\"]</td>\n    <td>Array of metadata for Theme Marketplace searches - exact names of storefront types compatible with this theme. The \"Default/Examples\" column lists the complete namespace. At least one of the values listed there must be present.\n\t</td>\n  </tr>\n  <tr>\n    <td>“industries\"</td>\n    <td>Array</td>\n    <td>[\"arts_crafts\",\"animals_pets\",\"automotive_industrial\",\"electronics_computers\",\"fashion_jewelry\",\"food_beverage\",\"gifts_specialty\",\"health_beauty\",\"home_garden\",\"books_entertainment\",\"sports_recreation\",\"toys_games\"]\n\t</td>\n    <td>Array of optional metadata for Theme Marketplace, where these values will be used to support faceted searches. You may submit up to four values from the complete namespace listed in the \"Default/Examples\" column.</td>\n  </tr>\n</table>"
                      header:
                        anchor: config_keys-and-example
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Requirements and Restrictions


                        Your theme's config.json file must meet the following
                        requirements:


                        * It must be named `config.json`, must reside in the
                        root of your `<theme-name>` top level subdirectory
                        (e.g.: `/cornerstone/config.json` or
                        `/stencil/config.json`), and must be valid JSON.

                        * The maximum allowable size for a theme's `config.json`
                        file is 64 KB. Exceeding this limit will trigger an
                        error upon uploading the theme to BigCommerce.

                        * Each key's value is restricted to 64 characters.
                        Exceeding this limit will similarly trigger an upload
                        error.

                        * Other than these size constraints, there is no limit
                        on the number of keys and values that you can place in a
                        theme's `config.json`.


                        _Carefully check your theme against all the requirements
                        listed here – including the required keys within the
                        `meta` object and `variations` array. While some
                        requirements are not enforced in local development, they
                        will be validated (and will trigger errors) when you
                        later upload your theme to BigCommerce._


                        ### Required Themewide Keys

                        The `config.json` file must contain at least the
                        following keys, with appropriate values (as outlined
                        above):


                        *name

                        * `version`

                        * `settings` (which must itself be a valid JSON object)

                        * `variations` (an array of at least one, and at most
                        four, variation objects)

                        * `meta` (an object; see specific requirements below)


                        ### Required `meta` Keys


                        The meta object must contain at least the following
                        keys, with appropriate values:


                        * `price`

                        * `author_name`

                        * `author_email`

                        * `author_support_url`

                        * `documentation_url`


                        For illustration, here is a commented excerpt:


                        ```

                        {
                          ...
                          "meta": {
                            "price": 15000, // in cents; non-negative integer, minimum 0
                            "author_name:" "eCommerce Themes, Inc.", // Must be a string, not null
                            "author_email": "support@example.com", // Must be a string, should be a valid email address, not null
                            "author_support_url": "http://example.com/contactus", //  Must be a string, should be a valid URL, not null
                            "documentation_url": "http://example.com/guide", // Must be a string, limit of 255 characters,
                                  not null
                            "composed_image": "path/to/composed.png", // Must be a string path to the composed-image file
                            "features": [ // Array of feature strings, all of which must be in the list enumerated here: 
                                  https://github.com/bigcommerce/theme-registry/blob/master/app/schemas/theme_config.json#L33
                              "fully_responsive" // Must include at least one feature, and no duplicate entries
                            ]
                          },
                          ...
                        }

                        ```


                        ### Required `variation` Keys


                        For each variation that you choose to include in your
                        theme (at least one is required), you must provide at
                        least the following keys and sub-element, with
                        appropriate values:


                        * `name`

                        * `id`

                        * `meta` (an object, containing at least:)

                        * `description`


                        For illustration, here is a redacted excerpt from
                        Cornerstone:


                        ```

                        "variations": [
                            {
                              "name": "Light",
                              "id": "light",
                              "meta": {
                                "desktop_screenshot": "desktop_light.png",
                                "mobile_screenshot": "mobile_light.png",
                                "description": "Ideal for a wide range of businesses and brands, this design is fully responsive, simple, and ready for you to add your branding, logo, and products. ....",
                            ...
                            }
                          ]
                        ```
                      header:
                        anchor: config_requirements-and-restrictions
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Video Demo


                        <iframe width="560" height="315"
                        src="https://www.youtube.com/embed/VZYZsDoEOpQ"
                        frameborder="0" allow="autoplay; encrypted-media"
                        allowfullscreen></iframe>
                      header:
                        anchor: config_video-demo
              - title: Preparing Thumbnail Images
                route:
                  path: /preparing-thumbnail-images
                data:
                  blocks:
                    - type: html
                      data: <h1>Preparing Thumbnail Images</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#preparing_where-and-how-merchants\">Where and How Merchants See Your Theme's Thumbnail Images</a></li>\n    <li><a href=\"#preparing_general-image\">General Image Requirements</a></li>\n    <li><a href=\"#preparing_themewide-composite\">Themewide Composite Image</a></li>\n    <li><a href=\"#preparing_variations\">Variations: Desktop/Mobile Screenshots</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >-
                        ## Where and How Merchants See Your Theme's Thumbnail
                        Images


                        A complete Stencil theme includes screenshots to show
                        off the theme on cards that appear in two locations
                        within the BigCommerce Control Panel:


                        * `Storefront` > `My Themes`: Each individual card
                        displays a _themewide composite image_, which is an
                        image that contains combination of screenshots of the
                        theme's multiple variations. 

                        `Storefront` > `Themes Marketplace`: Each card displays
                        one variation of your theme. The three variations of
                        Cornerstone (Light, Warm, and Bold) are displayed across
                        three 
                      header:
                        anchor: preparing_where-and-how-merchants
                    - type: tabs
                      data:
                        children:
                          - title: Desktop View of 'My Themes'
                            blocks:
                              - type: image
                                data: >-
                                  //s3.amazonaws.com/user-content.stoplight.io/6116/1539625143199
                                header:
                                  title: Storefront > My Themes
                                  subtitle: >-
                                    Each card contains a themewide composite
                                    image, showing all the variations of the
                                    theme in each. In this image, we see 3
                                    variations for the Cornerstone theme and 4
                                    for the Showroom theme.
                                config:
                                  centered: true
                                  fluid: true
                                  bordered: true
                                  maxWidth: '600'
                                  maxHeight: '900'
                          - title: Desktop View of Themes Marketplace
                            blocks:
                              - type: image
                                data: >-
                                  //s3.amazonaws.com/user-content.stoplight.io/6116/1539624737619
                                header:
                                  title: Storefront > Themes Marketplace
                          - title: Mobile View of Themes Marketplace
                            blocks:
                              - type: image
                                data: >-
                                  //s3.amazonaws.com/user-content.stoplight.io/6116/1539625004658
                                config:
                                  centered: true
                                  fluid: true
                                  bordered: true
                                  maxWidth: '500'
                                  maxHeight: '1000'
                      header:
                        title: >-
                          How your theme will appear in the Control Panel and
                          Theme Marketplace
                    - type: text
                      data: >-
                        ## General Image Requirements


                        Below are details about:

                        * how to size and save these images to stage them within
                        your theme's directory structure

                        * how to reference them in your config.json file.


                        All screenshots described below must meet the following
                        specifications in order for the `stencil bundle` command
                        to be able to process them:


                        * Saved to a supported image file type: .jpg/.jpeg,
                        .png, or .gif.

                        * Stored in your <theme‑name>/meta/ subdirectory.



                        Also note that all of these screenshots must be in
                        **portrait aspect ratio**, with specific resolutions
                        listed below.
                      header:
                        anchor: preparing_general-image
                    - type: text
                      data: "## Themewide Composite Image\n\nThe themewide composite image represents your theme in the Control Panel's `Storefront` > `My Themes` area, which shows merchants their currently available themes (including any custom uploaded themes). \n\nThis file will normally be a mosaic of screenshots from multiple variations within your theme. It must meet the following requirements, beyond the general specifications above:\n\n* Resolution of 600 x 760 pixels (horizontal x vertical).\n* File size smaller than 2 MB.\n* Arbitrary filename prefix, referenced in your config.json file as the \nmeta > composed_image key's value.\n\nHere is an example of a compliant file type and location:\n\n`<theme‑name>/meta/composed.png`\n\nHere is how you would reference this file within `config.json`:\n\n```\n{\n  [...]\n  \"meta\": {\n    [...]\n    \"composed_image\": \"composed.png\",\t\n    [...]\n}\n```"
                      header:
                        anchor: preparing_themewide-composite
                    - type: text
                      data: "## Variations: Desktop/Mobile Screenshots\n\nEach variation within your theme must be represented by two additional screenshots if you want that variation to appear in the control panel > Storefront > Themes Marketplace area, which shows merchants the themes that are available for download.\n\n### Desktop Screenshot\n\nThe first screenshot, showing your theme on a desktop viewport, must meet the following requirements beyond the general specifications above: \nResolution of 2048 x 2600 pixels (horizontal x vertical).\nFile size smaller than 5 MB.\nArbitrary filename prefix, referenced in your config.json file as the \n`<variation-name> > meta > desktop_screenshot` key's value.\n\t\n### Mobile Screenshot\n\nThe second screenshot, showing your theme on a mobile viewport, must meet the following requirements beyond the general specifications above: \n* Resolution of 304 x 540 pixels (horizontal x vertical).\n* File size smaller than 1 MB.\n* Arbitrary filename prefix, referenced in your config.json file as the \n`<variation-name> > meta > mobile_screenshot` key's value.\n\nHere is an example showing two files of compliant types and location:\n\n* `<theme‑name>/meta/desktop_bright.png`\n* `<theme‑name>/meta/mobile_bright.png`\t\n\nHere is how you would reference these files within `config.json`, for a variation named `Bright`:\n\n```\n [...]\n  \"variations\": [\n    {\n      \"name\": \"Bright\",\n      \"id\": \"bright\",\n      \"meta\": {\n        \"desktop_screenshot\": \"desktop_bright.png\",\n        \"mobile_screenshot\": \"mobile_bright.jpg\",\n    [...]\n    }\n  ]\n```\n"
                      header:
                        anchor: preparing_variations
              - title: Theme Editor Troubleshooting
                route:
                  path: /theme-editor-troubleshooting
                data:
                  blocks:
                    - type: html
                      data: <h1>Theme Editor Troubleshooting</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#theme-editor_empty\">Empty Drop-Down List in Theme Editor Panel</a></li>\n    <li><a href=\"#theme-editor_configured\">Configured Control Missing from Theme Editor Panel</a></li>\n    <li><a href=\"#theme-editor_theme-changes\">Theme Changes Not Saved from Theme Editor UI</a></li>\n\t</ul>\n</div>"
                    - type: callout
                      data:
                        title: Check the Terminal Window
                        body: >-
                          For any unexpected behavior that you encounter while
                          developing your Stencil theme, please also check the
                          terminal window where you started Stencil CLI. In some
                          cases, the terminal will provide a verbose error
                          message specifying where to look for problems. For
                          less-detailed error messages, we list diagnostic
                          suggestions in this documentation.
                    - type: text
                      data: >-
                        ## Empty Drop-Down List in Theme Editor Panel


                        * **Symptom:** A drop-down list's outline appears below
                        its configured label. However, the list appears to be
                        empty.

                        * **Likely Cause:** A default value specified in the
                        theme's config.json file is not enumerated in the
                        schema.json file.

                        * **Resolution:** Update schema.json to include the
                        config.json value.
                      header:
                        anchor: theme-editor_empty
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Configured Control Missing from Theme Editor Panel


                        * **Symptom:** A control that you have configured within
                        schema.json is completely absent from the Theme Editor
                        UI.

                        * **Likely Cause:** The specified "type" is one of:
                        text, text area, radio [button], or image.

                        (Theme Editor does not currently support these data
                        types.)

                        * **Resolution:** Display the user option via one of the
                        supported data types: color, font, select [drop-down
                        list], or checkbox.
                      header:
                        anchor: theme-editor_configured
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Theme Changes Not Saved from Theme Editor UI


                        * **Symptom:** Changes saved in a browser's Theme Editor
                        panel are not reflected in the storefront.

                        * **Likely Cause:** Check whether multiple users are
                        simultaneously using Theme Editor to customize the same
                        storefront.

                        * **Resolution:** We strongly recommend opening only one
                        instance of Theme Editor, at a time, per storefront.
                        BigCommerce currently provides no synchronization
                        mechanism for configuration changes from multiple Theme
                        Editor instances. So the storefront's `schema.json` will
                        record the last changes made by any instance – but
                        changes saved earlier by other instances might be lost.
                      header:
                        anchor: theme-editor_theme-changes
        - title: Front Matter
          route:
            path: /front-matter
          data:
            children:
              - title: Front Matter Overview
                route:
                  path: /front-matter-overview
                data:
                  blocks:
                    - type: html
                      data: <h1>Front Matter Overview</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#front-matter-overview_declaring-objects\">Declaring Objects</a></li>\n    <li><a href=\"#front-matter-overview_yaml-syntax\">YAML Syntax – Requirements</a></li>\n    <li><a href=\"#front-matter-overview_filtering-attributes\">Filtering Attributes</a></li>\n    <li><a href=\"#front-matter-overview_combining-front-matter\">Combining Front Matter with Handlebars Attributes</a></li>\n    <li><a href=\"#front-matter-overview_default-versus-custom\">Default versus Custom Attributes, per Page</a></li>\n    <li><a href=\"#front-matter-overview_declaring-multiple\">Declaring Multiple Attributes</a></li>\n\t</ul>\n</div>\n\n\n\n\n\n\n"
                    - type: text
                      data: "## Declaring Front-Matter Objects\n\nWhen you create a store page that requires specific attributes (such as 'New Products') to be displayed, you must first declare the object and attribute on the page in a front-matter block at the top of the page's HTML template file. The front matter block makes the attribute accessible on the page. Then, to display the attribute on the storefront page, you will reference the the object using Handlebars within the page's HTML.\nFor example, to display 'new products' on a storefront's home page, you first need to make new products accessible on the home page. To achieve this, include the following front matter block at the top of the [home.html](https://github.com/bigcommerce/cornerstone/blob/master/templates/pages/home.html) file to declare the products object with its new attribute. This allows a storefront's home page to access a store's \"New Products.\"\n\n```\n---\nproducts:\n    new:\n    \tlimit: {{theme_settings.homepage_new_products_count}}\n---\n```\n\n**Note:** A 'limit' is required for Product Objects to render on a storefront page. You can hard code the limit value or utilize handlebars.js to reference it from the theme's config.json file. In this case, the limit value is being referenced from the `settings` JSON object in the `config.json` file using handlebars.js. Information on required attributes is detailed in the Front Matter Attributes Reference. \n\nAfter including the front matter block at the top of the home.html file, the New Products attribute will be accessible in the home page's context. As previously stated, simply including the front matter block will not display the attribute on the page. In order to actually display the new products on the desired storefront page, you will refernce the attribute using Handlebars in the same file you have added the front matter block to.\nIn this example, we will include the following code in Cornerstone's [home.html](https://github.com/bigcommerce/cornerstone/blob/master/templates/pages/home.html) file to display New Products on our store's home page. \n\n\n```\n  {{#if products.new}}\n        {{> components/products/new products=products.new columns=theme_settings.homepage_new_products_column_count}}\n    {{/if}}\n```\n"
                      header:
                        anchor: front-matter-overview_declaring-objects
                    - type: text
                      data: >+
                        ## YAML Syntax – Requirements


                        Stencil front matter uses the conventions of [YAML]()
                        (short for the recursive "YAML Ain't Markup Language").
                        Here are the YAML conventions you must follow in front
                        matter:


                        Place the front-matter block at the top of your
                        template.

                        Fence the beginning and end of the front-matter block
                        with a row of three hyphens (---), as you see in the
                        examples here.

                        Show attribute > key relationship (or object > property
                        relationship) by indenting the children. In the example
                        above, products is the object,

                        Place a colon (:) directly after each attribute name,
                        and directly after each key name. (Colons separate
                        key:value pairs.)

                        Identifiers are case-sensitive.


                        ### Restrictions


                        You can use front matter to specify attributes on the
                        tops of pages in your

                        `<theme-name>/templates/pages/` subdirectory.


                        You **cannot** use front matter to accomplish this on
                        pages in the following subdirectories:

                        * `<theme-name>/templates/components/`

                        * `<theme-name>/templates/layout/`

                        * `<theme-name>/templates/pages/custom/` 


                        * Indent using only spaces, not tabs. (YAML forbids
                        tabs, to avoid inconsistent encoding of tabs across
                        platforms.) An indent of even one space indicates a
                        child.


                        * Front matter on a given page cannot exceed 64 KB.


                        * If a front-matter directive contains an invalid
                        option, Stencil CLI will silently ignore that option.

                      header:
                        anchor: front-matter-overview_yaml-syntax
                    - type: text
                      data: >
                        ## Filtering Attributes


                        Some attributes can accept indented keys, or key-value
                        pairs, to further define the attribute. For example,
                        limit is a key commonly used to restrict the number of
                        objects to return for an attribute.

                        To return products similar to the product that a
                        customer is currently viewing – with a limit of six –
                        you would declare front matter as follows:


                        ```

                        ---

                        products:
                            similar_by_views:
                                limit: 6
                        ---

                        ```


                        Most keys have a default value, as listed in the [Front
                        Matter Attributes]() Reference. Specifying the key
                        without a value will call that default value. The
                        default value for `similar_by_views:limit:` happens to
                        be `4`, so inserting `limit` with no integer will
                        display four products:


                        ```

                        ---

                        products:
                            similar_by_views:
                                limit:
                        ---

                        ```
                      header:
                        anchor: front-matter-overview_filtering-attributes
                    - type: callout
                      data:
                        body: >-
                          To keep your pages lightweight, specify only the
                          attributes you need per page. Also, use the limit key
                          (with appropriate values) for attributes that accept
                          it.
                        title: Filtering for Faster Page Loads
                    - type: text
                      data: >-
                        ## Combining Front Matter with Handlebars Attributes


                        The next example builds on front-matter object
                        invocation and filtering, by showing a corresponding
                        Handlebars statement in HTML. Here is how you would
                        declare the `products` object to return four new
                        products, and to then display each product’s name:


                        ```

                        ---

                        products:
                            new:
                                limit: 4
                        ---


                        <h1> This is the HTML for the new-products example </h1>

                        {{#each products.new}}
                            <p>{{ name }}</p>
                        {{/each}}

                        ```
                      header:
                        anchor: front-matter-overview_combining-front-matter
                    - type: callout
                      data:
                        body: >-
                          In the above HTML, the {{ name }} identifier calls an
                          attribute of Stencil’s common product card model,
                          which consolidates details about a given product. For
                          this and other objects that you can access through
                          HTML, please see our reference section on Handlebars
                          objects.
                        title: ' Reading the Handlebars'
                    - type: text
                      data: >-
                        ## Default versus Custom Attributes, per Page


                        To make templates readily useful, they automatically
                        include a page’s default attributes. For example, a
                        theme’s
                        [product.html](https://github.com/bigcommerce/cornerstone/blob/master/templates/pages/product.html)
                        page will automatically include a product attribute.


                        However, if you want to include additional attributes on
                        a page, you can declare those attributes in front matter
                        using the conventions shown above. [The Declaring
                        Objects](#front-matter-overview_declaring-objects)
                        example shows the only way to display a "new products"
                        storefront section, which requires front-matter
                        invocation.
                      header:
                        anchor: front-matter-overview_default-versus-custom
                    - type: text
                      data: >+
                        ## Declaring Multiple Attributes


                        Below is an example that assumes you want to include a
                        product’s reviews and also related products. To display
                        images for the related products, the HTML statement
                        `<img src="{{getImage image 'gallery'}}">` relies on
                        Stencil's `{{getImage}}` custom Handlebars helper:


                        ```

                        ---

                        product:
                           reviews:
                               limit: 9
                           related_products:
                               limit: 10
                        ---



                        <h2>{{ product.name }}</h2>

                        {{#each product.reviews.list}}
                            <p>{{text}}</p>
                        {{/each}}

                        <h3>Related Products</h3>

                        {{#each product.related_products}}
                          <img src="{{getImage image 'gallery'}}">
                          <p>{{ name }}</p>
                        {{/each}}

                        ```

                      header:
                        anchor: front-matter-overview_declaring-multiple
              - title: Front Matter Attributes
                route:
                  path: /front-matter-attributes-reference
                data:
                  blocks:
                    - type: html
                      data: <h1>Front Matter Attributes Reference</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#front-matter-attributes-reference_global\">Global Attributes</a></li>\n    <li><a href=\"#front-matter-attributes-reference_blog\">Blog Attributes</a></li>\n    <li><a href=\"#front-matter-attributes-reference_category\">Category Attributes</a></li>\n    <li><a href=\"#front-matter-attributes-reference_product\">Product Attributes</a></li>\n    <li><a href=\"#front-matter-attributes-reference_brand\">Brand Attributes</a></li>\n    <li><a href=\"#front-matter-attributes-reference_brand-list\">Brand List Attributes</a></li>\n    <li><a href=\"#front-matter-attributes-reference_cart\">Cart Attributes</a></li>\n    <li><a href=\"#front-matter-attributes-reference_search\">Search Attributes</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: "<h2> <a name=\"Front-ref-global\"></a>Global Attributes </h2>\n\nGlobal attributes are available on all pages. <br><br>\n\n<table>\n  <tr>\n    <td>Attribute</td>\n    <td>Option with Sample Assignment</td>\n    <td>Default Value</td>\n    <td>Details and Other \nAllowable Values/Results</td>\n  </tr>\n  <tr>\n    <td class=\"\">customer:</td>\n    <td class=\"\"></td>\n    <td class=\"\"></td>\n    <td class=\"\">Customer attributes are always included, and are available if the active shopper is logged in.</td>\n  </tr>\n\n  <tr>\n  \t<td class=\"\"></td>\n  \t<td class=\"\">addresses: true</td>\n    <td class=\"\">true – on address page<br><p></p>\n\nnull – on all other pages</td>\n    <td class=\"\">Boolean indicating whether to retrieve addresses for this customer.<br><p></p> \n\nNo filtering available. Default sorting is by address id, from lowest to highest.<br><p></p>\n\nnull or false: Do not retrieve addresses.\ntrue: Retrieve addresses.</td>\n  </tr>\n  \n  <tr>\n    <td class=\"\"></td>\n    <td class=\"\">returns: true</td>\n    <td class=\"\">true – on returns page<br><p></p>\n\nnull – on all other pages</td>\n    <td class=\"\">Boolean indicating whether to retrieve product-return requests for this customer.<br><p></p> \n      \n      No filtering available.<br><p></p>\n      \n      true: Retrieve requests.<br><p></p>\n      \n      null or false: <NOBR>Do not</nobr> retrieve requests.</td>\n  </tr>\n  \n  <tr>\n    <td class=\"\"></td>\n    <td class=\"\">wishlists: <br>\n        <span class=\"indent1\">limit: &lt;number&gt;</span></td>\n    <td class=\"\">null</td>\n    <td class=\"\">null: No wishlists displayed.\n      <br><p></p>\n      &lt;number&gt; limits the number of wishlists displayed.\n      <br><p></p>\n      If &lt;number&gt; is not defined, retrieves an unlimited number of wishlists.</td>\n  </tr>\n  \n  <tr>\n    <td class=\"\"></td>\n    <td class=\"\">orders: <br>\n        <span class=\"indent1\">limit: &lt;number&gt;</span></td>\n    <td class=\"\">null</td>\n    <td class=\"\">Contains all orders, complete or not.\n      <br><p></p>\n      null: no orders displayed.\n      <br><p></p>\n      &lt;number&gt; limits the number of orders displayed.\n      <br><p></p>\n      If &lt;number&gt; is not defined, displays 20 orders. (Default sorting is by order id, from lowest to highest.)</td>\n  </tr>\n\n  <tr>\n    <td class=\"\"></td>\n    <td class=\"\">recently_viewed_products:</td>\n    <td class=\"\">null</td>\n    <td class=\"\">Boolean indicating whether to display recently viewed products.<br><p></p>\n\nNo filtering available.</td>\n  </tr>\n\n  <tr>\n    <td class=\"\">products:</td>\n    <td class=\"\"></td>\n    <td class=\"\"></td>\n    <td class=\"\">(When filtering/limiting, products' default sorting is by order id, from lowest to highest.)</td>\n  </tr>\n  \n  <tr>\n    <td class=\"\"></td>\n    <td class=\"\">featured: <br>\n        <span class=\"indent1\">limit: &lt;number&gt;</span></td>\n    <td class=\"\">null</td>\n    <td class=\"\">null: No featured products displayed.<br><p></p>\n&lt;number&gt; limits the number of featured products displayed.\n      <br><p></p>\n      If &lt;number&gt; is not set, defaults to 4 products.</td>\n  </tr>\n  \n  <tr>\n    <td class=\"\"></td>\n    <td class=\"\">new:<br>\n      <span class=\"indent1\">limit: &lt;number&gt;</span></td>\n    <td class=\"\">\nnull</td>\n    <td class=\"\">null: No new products displayed.<br><p></p>\n&lt;number&gt; limits the number of new products displayed. Maximum allowable value is 25.\n      <br><p></p>\n      If &lt;number&gt; is not defined, defaults to 8 products.</td>\n  </tr>\n  \n  <tr>\n    <td class=\"\"></td>\n    <td class=\"\">top_sellers: <br>\n      <span class=\"indent1\">limit:  &lt;number&gt;</span></td>\n    <td class=\"\">null</td>\n    <td class=\"\">null: No top-selling products displayed.\n      <br><p></p>\n      &lt;number&gt; limits the number of top sellers displayed.\n      <br><p></p>\n      If &lt;number&gt; is not defined, defaults to all top sellers.</td>\n  </tr>\n  \n  <tr>\n    <td class=\"\">carousel: true</td>\n    <td class=\"\"></td>\n  <td class=\"\">null</td>\n    <td class=\"\">Boolean indicating whether to display a carousel on storefront.\n      <br><p></p>\n      No filtering available.\n      <br><p></p>\n      null or false: No carousel display.</td>\n  </tr>\n  \n  <tr>\n    <td class=\"\">blog:</td>\n    <td class=\"\"></td>\n    <td class=\"\"></td>\n    <td class=\"\">(Default sorting is by published_date, from most-recent to earliest.)</td>\n  </tr>\n  \n  <tr>\n    <td class=\"\"></td>\n    <td class=\"\">recent_posts:<br>\n      <span class=\"indent1\">limit: &lt;number&gt;</span>\n    </td>\n    <td class=\"\">20</td>\n    <td class=\"\">null: No recent blog posts displayed.\n      <br><p></p>      \n      &lt;number&gt; limits the number of recent blog posts displayed.\n      <br><p></p>      \n      If &lt;number&gt; is not defined, defaults to the maximum of 20 blog posts.</td>\n  </tr>\n  \n  <tr>\n    <td class=\"\"></td>\n    <td class=\"\">summary: &lt;number&gt;</td>\n    <td class=\"\">100</td>\n    <td class=\"\"><!-- null: No summary characters displayed.<br><p></p> -->      \n      &lt;number&gt; sets the number of characters to display in each blog-post summary.\n      <br><p></p>\n      If &lt;number&gt; is not defined, displays 100 characters.</td>\n  </tr>\n  \n  <!-- <tr>\n    <td class=\"\">brands:<br>\n        <span class=\"indent1\">&lt;number&gt;</span></td>\n    <td class=\"\">null</td>\n    <td class=\"\">null: Do not display a brand list.<br><p></p>\n&lt;number&gt; limits the number of brands to return.<br><p></p>\nIf &lt;number&gt; is not defined, returns all brands.</td>\n  </tr> -->\n  \n  <tr>\n    <td class=\"\">cart: true</td>\n    <td class=\"\"></td>\n    <td class=\"\">false</td>\n    <td class=\"\">Boolean indicating whether to retrieve cart data.<br><p></p>\ntrue: Return cart data.<br><p></p>\nfalse: Do not return cart data.</td>\n  </tr>\n  \n  <tr>\n    <td class=\"\">categories: true</td>\n    <td class=\"\"></td>\n    <td class=\"\">false</td>\n    <td class=\"\">Boolean indicating whether to retrieve the <a href=\"docs/global-resources#Categories\">category tree</a> during an AJAX request.\n      <br><p></p>\n      true: Retrieve the category tree.\n      <br><p></p>\n      false: Do not retrieve the category tree.</td>\n  </tr>\n  \n  <tr>\n    <td class=\"\"></td>\n    <td class=\"\">description: true</td>\n    <td class=\"\">\nfalse</td>\n    <td class=\"\">\nBoolean indicating whether to retrieve category descriptions dynamically from the database.\n      <br><p></p>\n      Set to true for themes that must display category descriptions when pages render. (This can slow page loads.)</td>\n  </tr>\n    \n  <tr>\n    <td class=\"\">shop_by_brand:</td>\n    <td class=\"\">limit: &lt;number&gt;</td>\n    <td class=\"\">null</td>\n    <td class=\"\">Typically used in a footer or sidebar.<br><p></p>\nnull: Do not display this brand list.<br><p></p>\n&lt;number&gt; limits the number of brands to return.<br><p></p>\nIf &lt;number&gt; is not defined, returns 10 brands, ordered by the number of products per brand.</td>\n  </tr>\n\n  <!-- <tr>\n    <td class=\"\">suggested_products:<br>\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; limit: &lt;number&gt;</td>\n    <td class=\"\">null</td>\n    <td class=\"\">null: Do not display suggested products.<br><p></p>\n&lt;number&gt; limits the number of suggested products to return.<br><p></p>\nIf &lt;number&gt; is not defined, returns 4 suggested products.</td>\n  </tr> -->\n</table>\n\n\n<h2> <a name=\"Front-ref-cat\"></a>Category Attributes</h2>\n\nCategory attributes are available in the context of a category.<br><br>\n\n<table>\n  <tr>\n    <td>Attribute</td>\n    <td>Option with Sample Assignment</td>\n    <td>Default Value</td>\n    <td>Details</td>\n  </tr>\n  <tr>\n    <td class=\"\">category:</td>\n    <td class=\"\"></td>\n    <td class=\"\"></td>\n    <td class=\"\"></td>\n  </tr>\n\n  <tr>\n    <td class=\"\"></td>\n    <td class=\"\">shop_by_price:</td>\n    <td class=\"\">\nfalse</td>\n    <td class=\"\">\nBoolean indicating whether to display Shop-by-Price controls.</td>\n  </tr>\n\n  <tr>\n    <td class=\"\"></td>\n    <td class=\"\">products:<br>\n        <span class=\"indent1\">limit: &lt;number&gt;</span></td>\n    <td class=\"\">\n16</td>\n    <td class=\"\">\nDefines the number of products displayed per page for this category. Range of possible values is 1&ndash;100 products.</td>\n  </tr>\n</table>\n\n\n<h2> <a name=\"Front-ref-blog\"></a>Blog Attributes</h2>\n\nBlog attributes are available in the context of a blog.<br><br>\n\n<table>\n  <tr>\n    <td>Attribute</td>\n    <td>Sub-Attribute</td>\n    <td>Option with Sample Assignment</td>\n    <td>Default Value</td>\n    <td>Details</td>\n  </tr>\n  \n  <tr>\n    <td class=\"\">blog:</td>\n    <td class=\"\"></td>\n    <td class=\"\"></td>\n    <td class=\"\"></td>\n    <td class=\"\"></td>\n  </tr>\n\n  <tr>\n    <td class=\"\"></td>\n    <td class=\"\">posts:</td>\n    <td class=\"\"></td>\n    <td class=\"\"></td>\n    <td class=\"\">(Default sorting is by published_date, from most-recent to earliest.)</td>\n  </tr>\n\n  <tr>\n    <td class=\"\"></td>\n    <td class=\"\"></td>\n    <td class=\"\">limit: &lt;number&gt;</td>\n    <td class=\"\">null</td>\n    <td class=\"\">null: No blog posts displayed.<br><p></p>\n      &lt;number&gt; limits the number of blog posts displayed.<br><p></p>\n      Maximum is 20 blog posts per page.\n    </td>\n  </tr>\n  \n  <tr>\n    <td class=\"\"></td>\n    <td class=\"\"></td>\n    <td class=\"\">pages: &lt;number&gt;</td>\n    <td class=\"\">5</td>\n    <td class=\"\">\nnull: No pagination.<br><p></p>\n      \n      &lt;number&gt; sets the number of pages to display in pagination links.<br><p></p>\n      \n      If &lt;number&gt; is not defined, defaults to 5 pages.\n    </td>\n  </tr>\n  \n  <tr>\n    <td class=\"\"></td>\n    <td class=\"\"></td>\n    <td class=\"\">summary: &lt;number&gt;</td>\n    <td class=\"\">250</td>\n    <td class=\"\"> <!-- null: No summary characters displayed.<br><p></p> -->  \n      &lt;number&gt; sets the number of characters to display in each blog-post summary.<br><p></p>\nIf &lt;number&gt; is not defined, displays 250 characters.</td>\n  </tr>\n</table>\n\n\n<h2> <a name=\"Front-ref-prod\"></a>Product Attributes</h2>\n\nProduct attributes are available in the context of a product.<br><br>\n\n<table>\n  <tr>\n    <td>Attribute</td>\n    <td>Option with Sample Assignment</td>\n    <td>Default Value</td>\n    <td>Details</td>\n  </tr>\n  <tr>\n    <td class=\"\">product:</td>\n    <td class=\"\"></td>\n    <td class=\"\"></td>\n    <td class=\"\">(When filtering/limiting, products' default sorting is by order id, from lowest to highest.)</td>\n  </tr>\n\n  <tr>\n    <td class=\"\"></td>\n    <td class=\"\">videos:<br>\n        <span class=\"indent1\">limit: &lt;number&gt;</span></td>\n    <td class=\"\">\n[unlimited]</td>\n    <td class=\"\">If product.videos is not defined, no videos are returned.<br><p></p>\n      \n      If product.videos is defined, the default behavior is to return all videos. <!-- Check & correct this. --> <br><p></p>\n      \n      If product.videos.limit is also defined, &lt;number&gt; sets the maximum number of videos returned.</td>\n  </tr>\n  \n  <tr>\n    <td class=\"\"></td>\n    <td class=\"\">images:<br>\n        <span class=\"indent1\">limit: &lt;number&gt;</span></td>\n    <td class=\"\">\n[unlimited]</td>\n    <td class=\"\">If product.images is not defined, no images are returned.<br><p></p>\n      \n      If product.images is defined, you must also define product.images.limit, which throttles the number of images returned. <br><p></p>\nThe maximum allowable value for this option's &lt;number&gt; parameter is 5 images.</td>\n  </tr>\n  \n  <tr>\n    <td class=\"\"></td>\n    <td class=\"\">reviews: true<br>\n        <span class=\"indent1\">limit: &lt;number&gt;</span></td>\n    <td class=\"\">[false]</td>\n    <td class=\"\">Boolean indicating whether to display product reviews.\n      <br><p></p>      \n      If product.reviews is present, and is not explicitly set to \"false\", reviews will appear.\n      <br><p></p>      \n      If &lt;number&gt; is not defined, defaults to 10 reviews.<br><p></p>\n      (When filtering/limiting reviews, default sorting is by review id, from lowest to highest.)</td>\n  </tr>\n  \n  <tr>\n    <td class=\"\"></td>\n    <td class=\"\">related_products:<br>\n        <span class=\"indent1\">limit: &lt;number&gt;</span></td>\n    <td class=\"\">\n[unlimited]</td>\n    <td class=\"\">Displays products that are related by name.<br><p></p>\n      \n      &lt;number&gt; limits the number of products displayed.<br><p></p>\n      \n      If &lt;limit&gt; is absent or undefined, the default behavior is to display all related products.<br><p></p> \n\nInserting “limit:” with no integer will display 0 products. </td>\n  </tr>\n  \n  <tr>\n    <td class=\"\"></td>\n    <td class=\"\">similar_by_views:<br>\n        <span class=\"indent1\">limit: &lt;number&gt;</span></td>\n    <td class=\"\">[unlimited]</td>\n    <td class=\"\">Displays products similar to those displayed in the current page context.<br><p></p>\n      \n      &lt;number&gt; limits the number of products displayed.<br><p></p>\n      \n      If &lt;limit&gt; is absent or undefined, default is to display 4 products.</td>\n  </tr>\n</table>\n\n\n<h2> <a name=\"Front-ref-brand\"></a>Brand Attributes</h2>\n\nBrand attributes are available in the context of a brand.<br><br>\n\n<table>\n  <tr>\n    <td>Attribute</td>\n    <td>Option with Sample Assignment</td>\n    <td>Default Value</td>\n    <td>Details</td>\n  </tr>\n  <tr>\n    <td class=\"\">brand:</td>\n    <td class=\"\"></td>\n    <td class=\"\"></td>\n    <td class=\"\"></td>\n  </tr>\n\n  <tr>\n    <td class=\"\"></td>\n    <td class=\"\">products: <br>\n      <span class=\"indent1\">limit: &lt;number&gt;</span></td>\n    <td class=\"\">\n50</td>\n    <td class=\"\">\nDefines the number of products displayed per page for this brand. Range of possible values is 1&ndash;50 products.</td>\n  </tr>\n</table>\n\n\n<h2> <a name=\"Front-ref-brandlist\"></a>Brand List Attributes</h2>\n\nThese attributes are available in the context of a list of brands.<br><br>\n\n<table>\n  <tr>\n    <td>Attribute</td>\n    <td>Option with Sample Assignment</td>\n    <td>Default Value</td>\n    <td>Details</td>\n  </tr>\n  <tr>\n    <td class=\"\">brands:</td>\n    <td class=\"\"></td>\n    <td class=\"\"></td>\n    <td class=\"\">(When retrieving a collection of brands, default sorting is by brand id, from lowest to highest.)</td>\n  </tr>\n\n  <tr>\n    <td class=\"\"></td>\n    <td class=\"\">limit: &lt;number&gt;</td>\n    <td class=\"\">50</td>\n    <td class=\"\">\nSets the number of brands displayed in the list. If &lt;limit&gt; is not defined, returns all brands, up to a maximum of 50.</td>\n  </tr>\n</table>\n\n\n<h2> <a name=\"Front-ref-cart\"></a>Cart Attributes</h2>\n\nCart attributes are available in the context of a shopper's cart.<br><br>\n\n<table>\n  <tr>\n    <td>Attribute</td>\n    <td>Sub-Attribute</td>\n    <td>Option with Sample Assignment</td>\n    <td>Default Value</td>\n    <td>Details</td>\n  </tr>\n  <tr>\n    <td class=\"\">cart</td>\n    <td class=\"\"></td>\n    <td class=\"\"></td>\n    <td class=\"\"></td>\n    <td class=\"\"></td>\n  </tr>\n  <tr>\n    <td class=\"\"></td>\n    <td class=\"\">suggestions:</td>\n    <td class=\"\"></td>\n    <td class=\"\"></td>\n    <td class=\"\">Suggested products to display to shopper, based on cart contents. <NOBR>(If enabled,</nobr> these suggestions appear only immediately after the shopper adds an item to the cart.)</td>\n  </tr>\n  <tr>\n    <td class=\"\"></td>\n    <td class=\"\"></td>\n    <td class=\"\">limit: &lt;number&gt;</td>\n    <td class=\"\">null</td>\n    <td class=\"\">null: Do not display suggested products.<br><p></p>\n&lt;number&gt; limits the number of suggested products to return.<br><p></p>\nIf &lt;number&gt; is not defined, returns 4 suggested products.</td>\n  </tr>\n</table>\n\n\n<h2> <a name=\"Front-ref-search\"></a>Search Attributes</h2>\n\nSearch attributes are available in the context of a search results page.<br><br>\n\n<table>\n  <tr>\n    <td>Attribute</td>\n    <td>Sub-Attribute</td>\n    <td>Option with Sample Assignment</td>\n    <td>Default Value</td>\n    <td>Details</td>\n  </tr>\n  <tr>\n    <td class=\"\">search</td>\n    <td class=\"\"></td>\n    <td class=\"\"></td>\n    <td class=\"\"></td>\n    <td class=\"\"></td>\n  </tr>\n  <tr>\n    <td class=\"\"></td>\n    <td class=\"\">product_results:</td>\n    <td class=\"\"></td>\n    <td class=\"\"></td>\n    <td class=\"\"></td>\n  </tr>\n\n  <tr>\n    <td class=\"\"></td>\n    <td class=\"\"></td>\n    <td class=\"\">limit: &lt;number&gt;</td>\n    <td class=\"\">16</td>\n    <td class=\"\">\nDefines the number of product search results displayed per page. Range of possible values is 1&ndash;100 products.</td>\n  </tr>\n</table>"
                config:
                  sidebar:
                    token: Reference
        - title: Template Files
          route:
            path: /template-files
          data:
            children:
              - title: Templates Directory
                route:
                  path: /templates-directory
                data:
                  children:
                    - title: Components Subdirectory
                      route:
                        path: /components-subdirectory
                      data:
                        blocks:
                          - type: html
                            data: <h1>Components Subdirectory</h1>
                          - type: html
                            data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#components_components-subdirectory\">Components Subdirectory</a></li>\n    <li><a href=\"#components_naming-requirements\">Naming Requirements</a></li>\n\t</ul>\n</div>"
                          - type: text
                            data: >-
                              ## Components Subdirectory


                              The `/templates/components/` subdirectory contains
                              Handlebars and HTML components (provided as
                              `.html` files) to create page structure. You can
                              reuse these code snippets and partials throughout
                              your theme.


                              You can take a look at the Cornerstone components
                              subdirectory and its contents in the [Github
                              repository
                              here](https://github.com/bigcommerce/cornerstone/tree/master/templates/components).


                              Subdirectories of `/templates/components/` group
                              together pages that serve a particular storefront
                              function. For example,
                              [here](https://github.com/bigcommerce/cornerstone/tree/master/templates/components/search)
                              are the `.html` files contained in the `/search/`
                              subdirectory.


                              Furthermore, the [`/common/`
                              subdirectory](https://github.com/bigcommerce/cornerstone/tree/master/templates/components/common)
                              contains forms and icons resources, plus a
                              collection of single-purpose files.
                            header:
                              anchor: components_components-subdirectory
                          - type: text
                            data: >-
                              ## Naming Requirements


                              **Important:** Four children of the
                              `/templates/components/` subdirectory each contain
                              a set of templates whose file names must remain
                              constant. However, you are free to move each set
                              of template files to other path locations – as
                              long as you keep each set together in one folder
                              and specify the new location. Those folders are
                              note below:


                              *
                              [common/forms](https://github.com/bigcommerce/cornerstone/tree/master/templates/components/common/forms)

                              *
                              [common/faceted-search/facets](https://github.com/bigcommerce/cornerstone/tree/master/templates/components/faceted-search/facets)

                              *
                              [common/products/customizations](https://github.com/bigcommerce/cornerstone/tree/master/templates/components/products/customizations)

                              *
                              [common/products/options](https://github.com/bigcommerce/cornerstone/tree/master/templates/components/products/options)
                            header:
                              anchor: components_naming-requirements
                          - type: callout
                            data:
                              body: >-
                                You can use front matter to specify resources
                                only on pages in the `/templates/pages/`
                                subdirectory, not on pages here in the
                                `/templates/components/` subdirectory.


                                Please bear in mind that if a front-matter
                                directive contains an invalid option, Stencil
                                CLI will silently ignore that option.
                              title: ' Front-Matter Restrictions'
                              type: warning
                    - title: Layout Subdirectory
                      route:
                        path: /layout-subdirectory
                      data:
                        blocks:
                          - type: html
                            data: <h1>Layout Subdirectory</h1>
                          - type: html
                            data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#layout_layout-subdirectory\">Layout Subdirectory</a></li>\n\t</ul>\n</div>"
                          - type: text
                            data: >-
                              ## Layout Subdirectory


                              The `/templates/layout/` subdirectory is where you
                              assemble Handlebars resources to define your
                              storefront site’s overall structure (header,
                              footer, etc.). You can implement multiple layouts
                              here for different use cases, making it easy to
                              switch between different look-and-feel variations
                              of the same theme.


                              As prototypes, we have provided a minimal
                              [base.html](https://github.com/bigcommerce/cornerstone/blob/master/templates/layout/base.html)
                              page in this subdirectory. To develop your theme,
                              you can copy and/or modify this prototype.


                              **Note:** _Be sure to set permission `755
                              (drwxr-xr-x)` on any new _subdirectories_ that you
                              add. Also, be sure to set permission `644
                              (rw-r--r--)` on any new _files_ that you add.
                              Without these permissions, running your theme
                              locally will fail with multiple error messages.
                              Bundling your theme will also fail, blocking its
                              upload to a store._
                            header:
                              anchor: layout_layout-subdirectory
                          - type: callout
                            data:
                              body: >-
                                You can use front matter to specify resources
                                only on pages in the `/templates/pages/`
                                subdirectory, but **not** on pages here in the
                                `/templates/layout/` subdirectory. If a
                                front-matter directive contains an invalid
                                option, Stencil CLI will silently ignore that
                                option.
                              title: Front Matter Restrictions
                              type: warning
                    - title: Pages Subdirectory
                      route:
                        path: /pages-subdirectory
                      data:
                        blocks:
                          - type: html
                            data: <h1>Pages Subdirectory</h1>
                          - type: html
                            data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#pages_pages-subdirectory\">Pages Subdirectory</a></li>\n    <li><a href=\"#pages_naming-requirements\">Naming Requirements</a></li>\n\t</ul>\n</div>"
                          - type: text
                            data: >-
                              ## Pages Subdirectory


                              The `/templates/pages/` subdirectory contains the
                              complete set of base template pages used to
                              construct a BigCommerce online store. These pages
                              call resources from the `/templates/components/`
                              and `/templates/layout/` subdirectories.


                              Children of [this
                              subdirectory](https://github.com/bigcommerce/cornerstone/tree/master/templates/pages)
                              group together pages that serve a particular
                              **storefront function**. For example, you can view
                              contents of the
                              [/errors/](https://github.com/bigcommerce/cornerstone/tree/master/templates/pages/errors)
                              and
                              [/gift-certificate/](https://github.com/bigcommerce/cornerstone/tree/master/templates/pages/gift-certificate)
                              subdirectories.


                              The subdirectory’s [.html
                              files](https://github.com/bigcommerce/cornerstone/tree/master/templates/pages)
                              are single-purpose pages.
                            header:
                              anchor: pages_pages-subdirectory
                          - type: text
                            data: >-
                              ## Naming Requirements


                              Do not change the names of the `/templates/pages/`
                              subdirectory or its contained files. These default
                              names are required for the storefront to compile
                              properly. You can, however, edit pages’
                              front‑matter and Handlebars resources to customize
                              the storefront theme’s look and function.
                            header:
                              anchor: pages_naming-requirements
                          - type: callout
                            data:
                              type: warning
                              body: >-
                                Pages in the `/templates/pages/` subdirectory
                                are the **only** place you can insert and modify

                                YAML front-matter attributes to customize the
                                rendered storefront.
                              title: ' Front-Matter Restriction'
                    - title: Using Disqus with Stencil
                      route:
                        path: /new-subpage
                      data:
                        blocks:
                          - type: html
                            data: <h1>Using Disqus with Stencil</h1>
                          - type: html
                            data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#using-disqus_disqus-overview\">Disqus Overview</a></li>\n    <li><a href=\"#using-disqus_stencil-blog\">Integrating Disqus with your Stencil blog</a></li>\n    <li><a href=\"#using-disqus_stencil-product-pages\">Integrating Disqus with your Stencil Product Pages</a></li>\n\t</ul>\n</div>"
                          - type: text
                            data: >-
                              ## Disqus Overview 


                              Stencil themes have the ability to integrate with
                              Disqus, a third party commenting system that
                              allows users to leave blog comments on blog posts
                              made with Stencil's Built-In Blog. Disqus can also
                              be used with on Stencil product pages to allow
                              comment and review threads on individual products.
                            header:
                              anchor: using-disqus_disqus-overview
                          - type: text
                            data: '---'
                          - type: text
                            data: >
                              ## Integrating Disqus with your Stencil blog


                              To use Disqus blog comments in Stencil, follow the
                              steps below:


                              1. Log in to your BigCommerce Control Panel

                              2. Navigate to Storefront Design > My Themes

                              3. Open Edit Theme Files for your theme

                              4. Navigate to Templates > Pages > blog-post.html

                              5. Paste your Disqus Universal Code before the
                              closing {{/partial}} tag

                              6. Save your files

                              7. Apply your theme
                            header:
                              anchor: using-disqus_stencil-blog
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Integrating Disqus with your Stencil Product
                              Pages


                              1. Log in to your BigCommerce Control Panel

                              2. Navigate to Storefront Design > My Themes

                              3. Open Edit Theme Files for your theme

                              4. Navigate to Templates > Pages > product.html

                              5. Paste your Disqus Universal Code before the
                              closing {{/partial}} tag

                              6. In the Disqus Universal Code that you have
                              posted, there is a function that reads like below:


                              ```
                               var disqus_config = function () {
                                      this.page.url = PAGE_URL;  // Replace PAGE_URL with your page's canonical URL variable
                                      this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable
                                  };
                              ```


                              Change the value of this.page.url to be
                              `product.url;`, and the value of
                              this.page.identifier to be `product.id`; so that
                              the function now reads like below:


                              ```

                              var disqus_config = function () {
                                      this.page.url = product.url;
                                      this.page.identifier = product.id;
                                  };
                              ```


                              7. Save your files

                              8. Apply your theme
                            header:
                              anchor: using-disqus_stencil-product-pages
                          - type: text
                            data: >-
                              ## Additional Resources

                              * [Enabling Disqus for Product Reviews
                              (Blueprint)](https://forum.bigcommerce.com/s/article/How-do-I-enable-Disqus-as-my-Comment-Service?_ga=2.224340315.1984523106.1539568940-967431010.1523308107#get-code)

                              * [Using Disqus for Blog
                              Comments](https://forum.bigcommerce.com/s/article/Using-Disqus-Comments?_ga=2.224340315.1984523106.1539568940-967431010.1523308107)
                      config:
                        sidebar:
                          token: tutorial
                  blocks: []
              - title: Custom Templates
                route:
                  path: /custom-templates
                data:
                  children:
                    - title: About Custom Templates
                      route:
                        path: /about-custom-templates
                      data:
                        blocks:
                          - type: html
                            data: <h1>About Custom Templates</h1>
                          - type: html
                            data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#custom-templates_about-custom\">About Custom Templates</a></li>\n\t\t<li><a href=\"#custom-templates_stencil-versus-blueprint\">Stencil versus Blueprint Themes</a></li>\n    <li><a href=\"#custom-templates_video-demo\">Video Demo</a></li>\n\t</ul>\n</div>"
                          - type: text
                            data: >
                              ## About Custom Templates


                              About Custom Templates

                              The Stencil framework allows theme developers and
                              merchants to assign custom layout templates to
                              storefront pages of the following types:


                              * Brand

                              * Category

                              * Product

                              * Page (meaning "Web Pages" – the BigCommerce
                              control panel's designation for static store
                              pages, which can include the store's home page)
                            header:
                              anchor: custom-templates_about-custom
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Stencil versus Blueprint Themes


                              If you are migrating from BigCommerce's legacy
                              Blueprint themes framework, please keep in mind
                              these differences in how Stencil handles custom
                              templates:


                              * The brand option is entirely new in Stencil. If
                              you are running on a Blueprint theme, you will not
                              be able to create a custom template for brand
                              pages.

                              * Unlike Blueprint, Stencil does not require that
                              custom templates' file names start with an
                              underscore (_).

                              * In the current Stencil release, you must create
                              and bundle custom templates using Stencil CLI
                              before you can upload the custom templates to
                              stores. However, once you have created and
                              uploaded templates, authorized store users can
                              assign them to storefront pages through the
                              control panel.
                            header:
                              anchor: custom-templates_stencil-versus-blueprint
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Video Demo


                              <iframe width="560" height="315"
                              src="https://www.youtube.com/embed/qgaDX7bhmd8"
                              frameborder="0" allow="autoplay; encrypted-media"
                              allowfullscreen></iframe>
                            header:
                              anchor: custom-templates_video-demo
                    - title: 'Authoring, Testing, & Uploading Custom Templates'
                      route:
                        path: /new-subpage-2
                      data:
                        blocks:
                          - type: html
                            data: >-
                              <h1>Authoring, Testing, and Uploading Custom
                              Templates</h1>
                          - type: html
                            data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#authoring-testing-uploading_authoring\">Authoring Templates</a></li>\n    <li><a href=\"#authoring-testing-uploading_local-mapping\">Local Mapping and Testing</a></li>\n\t\t<li><a href=\"#authoring-testing-uploading_theme-upload\">Theme Upload</a></li>\n\t\t<li><a href=\"#authoring-testing-uploading_troubleshooting\">Troubleshooting Template Authoring</a></li>\n\t</ul>\n</div>"
                          - type: text
                            data: >-
                              ## Authoring a Custom Template


                              As a the theme developer, you must first create
                              the `custom` subdirectory in the `templates/pages`
                              directory, and four required subdirectories inside
                              of it (brand, category, product, page), which will
                              result in the following directory paths:


                              * templates/pages/custom/brand 

                              * custom/category/custom/category

                              * custom/product/custom/product

                              * custom/page/custom/page


                              Next,  create the template HTML files, and then
                              place them in the appropriate
                              `<theme-name>/templates/pages/custom/`
                              subdirectories corresponding to the types listed
                              above. 
                            header:
                              anchor: authoring-testing-uploading_authoring
                          - type: callout
                            data:
                              type: warning
                              body: >-
                                Be sure to set permission `755 (drwxr-x-r-x)` on
                                any new subdirectories that you add.

                                Also, be sure to set permission `644 (rw-r–r–)`
                                on any new files that you add.


                                Without these permissions, running your theme
                                locally will fail with multiple error messages.

                                Bundling your theme will also fail, blocking its
                                upload to a store.
                              title: Subdirectory/File Permissions Required
                          - type: text
                            data: '---'
                          - type: text
                            data: "## Local Mapping and Testing\n\nTo test your custom templates locally, you must edit your `<theme-name>/.stencil` file to create mappings between each local template and a corresponding URL. Within the `.stencil` file, look for the following section:\n\n```\n\"customLayouts\": {\n    \"product\": {},\n    \"brand\": {},\n    \"category\": {},\n    \"page\": {}\n  }\n```\n\nIn this section, you would populate keys to create mappings. As a simple example, assume that you have a product custom template named alternate-`product.html`, and you want to see that template locally at the URL: http://localhost:3000/test-url/. In this case, you must populate the product key as follows:\n\n```\n    \"product\": {\n    \t\"alternate-product.html\":\"/test-url/\"\n    },\n```\n\n### Expanded Mapping Example\n\nHere is a more-complete example in which the `brand`, `page`, and `category` keys are also populated:\n\n```\n{\n  \"normalStoreUrl\": \"http://cornerstone-light-demo.mybigcommerce.com\",\n  \"port\": 3000,\n  \"username\": \"stencil\",\n  \"token\": \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n  \"customLayouts\": {\n    \"product\": {\n      \"custom-product.html\": \"/custom-product/\"\n    },\n    \"brand\": {\n      \"custom-brand.html\": \"/brands/custombrand/\"\n    },\n    \"page\": {\n      \"custom-page.html\": \"/custom-page/\"\n    },\n    \"category\": {\n      \"custom-category.html\": \"/custom-category/\"\n    }\n  }\n}\n```\n\n### Mapping Requirements and Options\n\nIn the .stencil mapping examples above:\n\n* Each mapped URL must be a URL for a brand, category, product, or static page that is _already configured in the store_. This means that you cannot insert a placeholder URL that is an arbitrary string of letters, such as /abcdefghijklmnop/.\n* Each URL’s trailing slash is _optional_.\n* The HTML files must reside in either the brand, category, product, or page subdirectories.\n* All brand URLs are nested under the /brands/ parent. Use URL encoding with brand URLs.\n* That parent for brand URLs is /brands/ (plural), while the corresponding subdirectory for HTML files is /brand/ (singular).\n* After editing your `.stencil` file, you must restart stencil to see your changes locally. Enter `stencil start` on the command line, appending any appropriate switches for your workflow (e.g.: `stencil start -e -n`).\n\n### Why These URL Requirements?\n\nWhen you create a local custom template page for products, you expect that page to have access to all Stencil product objects. However, the server cannot readily determine the page type of each local custom template. So we give it a hint: We instruct the server to look at the page type of the URL to which you have mapped the template.\n\nIn the above `.stencil` configuration example’s final entry, the server will look at the URL `/custom‑category/` within the store, deduce that the page type is `category`, and return a category context to Stencil CLI. This allows Stencil CLI to properly display the page in the browser when you visit http://localhost:3000/custom‑category/ locally, or when shoppers visit the corresponding public store page.\n\n### Mapping Multiple URLs\nBeyond the single URL mapped to each template in the above examples, you have the option of mapping an array of URLs to each template. This is shown in the following example for the product template:\n\n```\n  \"customLayouts\": {\n    \"product\": {\n      \"featured-product.html\": [\"/special-product-one\", \"/special-product-two\"],\n      \"clearance-product.html\": \"/clearance-product\"\n    },\n    \"brands\": {},\n    \"categories\": {},\n    \"page\": {}\n  }\n}\n```"
                            header:
                              anchor: authoring-testing-uploading_local-mapping
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Theme Upload


                              Finally, you must bundle and upload the theme to
                              BigCommerce. See the Bundling and Uploading a
                              Theme article for instructions on how to achieve
                              this.
                            header:
                              anchor: authoring-testing-uploading_theme-upload
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Troubleshooting Template Authoring


                              Here are solutions to some known problems in
                              locally authoring and testing custom templates:


                              ### Viewing Custom Brand Templates Locally


                              If you are having trouble viewing custom brand
                              templates locally, ensure that the URL used in
                              your .stencil file is of the form:
                              /brands/brandname. This is necessary because all
                              the brand pages are located under the /brands/ URL
                              path.

                              Also, bear in mind that currently, all brand URLs
                              are Unicode-encoded. So, for example, you should
                              replace a hyphen with: %252d.


                              ### Outdated Stencil CLI


                              If you have an old version of Stencil CLI
                              installed, it might lack support for custom
                              templates. You can easily update your CLI by
                              executing the following command:


                              `npm install -g bigcommerce/stencil-cli`
                            header:
                              anchor: authoring-testing-uploading_troubleshooting
                    - title: Assigning Templates to Pages
                      route:
                        path: /assigining-templates-to-pages
                      data:
                        blocks:
                          - type: html
                            data: <h1>Assigning Templates to Pages</h1>
                          - type: html
                            data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#assigning_merchant-performed\">Merchant Performed Actions</a></li>\n\t\t<li><a href=\"#assigning_assigning-a-web-page\">Assigning a Web Page Template</a></li>\n    <li><a href=\"#assigning_assigning-a-product\">Assigning a Product, Brand, or Category Template</a></li>\n    <li><a href=\"#assigning_troubleshooting\">Troubleshooting Template Assignments</a></li>\n\t</ul>\n</div>"
                          - type: text
                            data: >-
                              ## Merchant Performed Actions


                              Once the developer has uploaded a theme to
                              BigCommerce, the merchant (or other authorized
                              store user) can assign custom templates to
                              individual store pages in the BigCommerce Control
                              Panel. The steps are similar whether assigning
                              brands, categories, products, and static Web pages
                              – with slight differences. Below, we show examples
                              for assigning a Web Page and a Category. For
                              further details, please see the [Stencil Custom
                              Templates Knowledge Base
                              article](https://forum.bigcommerce.com/s/article/Stencil-Themes#custom-template).
                            header:
                              anchor: assigning_merchant-performed
                          - type: text
                            data: >-
                              ## Assigining a Web Page Template


                              Starting from the BigCommerce control panel's left
                              navigation pane:


                              1. Select `Storefront` > `Web Pages`.

                              2. From the resulting `View Web Pages` display,
                              select the existing Page 

                              3. Name to which you want to assign a custom
                              template. (Or select `Create a Web Page` to define
                              a new page.)

                              4. From the resulting `Edit a Web Page` display,
                              scroll down to the `Template Layout File`
                              drop-down list. Then select your desired custom
                              template from that list, as shown below.
                            header:
                              anchor: assigning_assigning-a-web-page
                          - type: image
                            data: >-
                              //s3.amazonaws.com/user-content.stoplight.io/6116/1539930165487
                            config:
                              centered: true
                              fluid: true
                              bordered: true
                              maxWidth: '600'
                              maxHeight: '400'
                          - type: callout
                            data:
                              body: >-
                                Some static page types do not allow you to
                                assign custom templates. You can recognize these
                                excluded pages because their `Edit a Web Page`
                                display will not include a `Template Layout
                                File` drop-down list.
                              title: Static Pages You Can't Assign
                              type: warning
                          - type: text
                            data: >
                              ## Assigning a Product, Brand, or Category
                              Template


                              Starting from the BigCommerce control panel's left
                              navigation pane:


                              1. Select `Products` > `View` (for a product page)
                              `Products` > `Product Categories` (for a category
                              page), or `Products` > `Brands` (for a brand
                              page).

                              2. Select the Product Name, Category Name, or
                              Brand Name to which you want to assign a custom
                              template. (Or select the `Add` or `Create` button
                              at the upper left to define a new product,
                              category, or band.)

                              3. For a product page (only), you must select the
                              `Other Details` tab to proceed to the next step.

                              4. Scroll to the `Template Layout File` drop-down
                              list, and select your desired custom template from
                              that list, as shown below for a Category
                              assignment.

                              5. Click the Save & Exit or Save & Keep Editing
                              button at the lower right.
                            header:
                              anchor: assigning_assigning-a-product
                          - type: image
                            data: >-
                              //s3.amazonaws.com/user-content.stoplight.io/6116/1539930552310
                            config:
                              fluid: true
                              centered: true
                              bordered: true
                              maxWidth: '500'
                              maxHeight: '200'
                          - type: text
                            data: >-
                              ## Troubleshooting Template Assignments


                              In case of problems a custom template in the
                              control panel: Check whether your theme's root
                              directory contains a file named `manifest.json`.

                              If you theme's root directory contains the file,
                              perofrm the following:

                              * delete the `manifest.json` file

                              * bundle the theme again with the `stencil bundle`
                              command

                              * upload the theme

                              * apply the theme


                              This should enable assigning the template in the
                              control panel.
                            header:
                              anchor: assigning_troubleshooting
              - title: Customize Stencil Checkout
                route:
                  path: /customiz-stencil-checkout
                data:
                  children:
                    - title: Enable & Restyle Optimized One-Page Checkout
                      route:
                        path: /optimized-one-page-checkout
                      data:
                        blocks:
                          - type: html
                            data: >-
                              <h1>Enable and Restyle Optimized One-Page
                              Checkout</h1>
                          - type: html
                            data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#optimized_enable\">Enable Optimized One Page Checkout</a></li>\n    <li><a href=\"#optimized_working\">Working with the Optimized Checkout SCSS File</a></li>\n    <li><a href=\"#optimized_configuring\">Configuring the Desktop Viewport</a></li>\n    <li><a href=\"#optimized_classes\">Classes Available for Customization</a></li>\n    <li><a href=\"#optimized_providing\">Providing User Options in Theme Editor</a></li>\n\t</ul>\n</div>"
                          - type: text
                            data: >
                              ## Enable Optimized One Page Checkout


                              In order to customize Stencil's Optimized One Page
                              Checkout, you must first opt into BigCommerce's
                              Optimized One-Page Checkout option if your store
                              is not already running on Optimized One Page
                              Checkout. To do so, use the following steps:


                              1. Update your Stencil CLI installation to the
                              most-recent version, as outlined here.


                              2. Enable `Optimized One-Page Checkout` in the
                              store's control panel, as shown below. For more
                              details about using Optimized One-Page Checkout,
                              see  the [Checkout
                              Settings](https://support.bigcommerce.com/articles/Public/Checkout-Settings?_ga=2.265225801.718421096.1540222570-967431010.1523308107)
                              support article.


                              3. Within your theme's `config.json` file > `meta`
                              section, make sure the `features` array includes
                              the value `customized_checkout`, as shown below:


                              ```
                                 "meta": {
                                   [...]
                                   "features": [
                                     [...]
                                     "customized_checkout"
                              ```


                              4. Within your theme's
                              `<theme-name>/templates/pages/` subdirectory,
                              paste in a clean, uncustomized copy of the
                              `checkout.html` and

                              `order-confirmation.html` files. You can find
                              default templates for each file on our
                              [Cornerstone Github Repository]:


                              *
                              [checkout.html](https://github.com/bigcommerce/cornerstone/blob/master/templates/pages/checkout.html)
                              file template

                              *
                              [order-confirmation.html](https://github.com/bigcommerce/cornerstone/blob/master/templates/pages/order-confirmation.html)
                              file template


                              **Note:** _For Optimized One-Page Checkout to work
                              properly, the `order-confirmation.html` template
                              **must** be present in your theme. If this
                              template is absent, shoppers will receive a server
                              error upon submitting their order.(The
                              corresponding template was named
                              `order-complete.html` in earlier versions of
                              Stencil themes. But that minimal template is
                              **not** a substitute for the required current
                              template.)_
                            header:
                              anchor: optimized_enable
                          - type: image
                            data: >-
                              //s3.amazonaws.com/user-content.stoplight.io/6116/1540227949000
                            header:
                              title: >-
                                Choosing Optimized One Page Checkout in the
                                Control Panel
                              subtitle: 'Step #2 in the above description'
                            config:
                              centered: true
                              fluid: true
                              bordered: true
                          - type: text
                            data: '---'
                          - type: text
                            data: >
                              ## Working with the Optimized Checkout SCSS File 


                              Cornerstone includes an SCSS file that styles the
                              Optimized Checkout page. In your local
                              installation, this file is located at
                              `<theme-name>/assets/scss/optimized-checkout.scss`.


                              You can access the most recent version of this
                              file in the Cornerstone Repo
                              [here](https://github.com/bigcommerce/cornerstone/blob/master/assets/scss/optimized-checkout.scss),
                              even if your theme is not based on Cornerstone.


                              To customize the checkout page, you are free to
                              change classes' _contents_. However, **do not nest
                              elements, nor change any class names**.
                              BigCommerce imposes these restrictions because
                              each class here maps to multiple Optimized
                              Checkout elements. Changing the structure or
                              naming would break updates available in future
                              Optimized Checkout enhancements.
                            header:
                              anchor: optimized_working
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Configuring the Desktop Viewport 


                              Within the `optimized-checkout.scss` file, to set
                              up Optimized Checkout's responsive features, you
                              should configure the following breakpoint to
                              define your preferred desktop viewport size:


                              ```
                                  // TODO:
                                  // Configure media query to be 'desktop' breakpoint size
                                  // -----------------------------------------------------------------------------
                                  @media (min-width: 801px) {
                                      text-align: stencilString("optimizedCheckout-logo-position");
                                  }
                              ```
                            header:
                              anchor: optimized_configuring
                          - type: text
                            data: '---'
                          - type: text
                            data: >
                              ## Classes Available for Customization 


                              Below are the classes provided in Cornerstone's
                              `optimized-checkout.scss` file, with the
                              corresponding page elements that they style.
                              _These class names and mappings are subject to
                              change, so please check the inline comments in the
                              `optimized-checkout.scss` file that you downloaded
                              with your current Cornerstone release._


                              | **Class** | **Styles This Optimized One-Page
                              Checkout Element:** |

                              |---|---|

                              | `.optimizedCheckout-header` | Page header. |

                              | `.optimizedCheckout-headingPrimary` | Top-level
                              headings. |

                              | `.optimizedCheckout-headingSecondary` | Certain
                              lower-level elements, such as descriptions of cart
                              items. |

                              | `.optimizedCheckout-overlay` | Shipping Method
                              box. |

                              | `.optimizedCheckout-contentPrimary` | Body text
                              in the desktop `Order Summary`/`Order
                              Confirmation` (cart contents); drop-down-list
                              items; and text that summarizes completed steps. |

                              | `.optimizedCheckout-contentSecondary` | Text
                              labels on check boxes, and lower-level text in the
                              desktop Order Summary. |

                              | `.optimizedCheckout-button--primary` |
                              `CONTINUE` button and final `PAY` button. |

                              | `.optimizedCheckout-button--secondary` | `Edit`
                              buttons.

                              | `.optimizedCheckout-orderSummary` | Colors in
                              the `Order Summary` mobile drawer/modal.

                              | `.optimizedCheckout-step` | Large step-number
                              indicators on the page's left side. |

                              | `.optimizedCheckout-form-label` | Styles form
                              fields like `Email Address` – the field's
                              text-label color. | 

                              | `.optimizedCheckout-form-input` | Styles form
                              fields like `Email Address` – the entry box's
                              background and border colors. |
                            header:
                              anchor: optimized_classes
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Providing User Options in Theme Editor


                              As with other aspects of your theme's styling, you
                              can determine which aspects of Optimized One-Page
                              Checkout users will be able to customize in Theme
                              Editor. 


                              In Stencil's Cornerstone base theme, each
                              class/property available in
                              `optimized-checkout.scss` has a corresponding
                              key/value pair in the `config.json` file. For
                              examples of these key/value pairs, see [this
                              section]().


                              For examples of Theme Editor graphical controls
                              exposed to users through elements included in
                              Cornerstone's `schema.json` file, please see [this
                              section]().
                            header:
                              anchor: optimized_providing
                    - title: Currency Conversion
                      route:
                        path: /currency-conversion
                      data:
                        blocks:
                          - type: html
                            data: <h1>Currency Conversion</h1>
                          - type: html
                            data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#currency_currency-conversion\">Currency-Conversion Options</a></li>\n\t</ul>\n</div>"
                          - type: text
                            data: >-
                              ## Currency-Conversion Options


                              You can enable the display of alternate currencies
                              on your Stencil theme's Optimized One-Page
                              Checkout and order confirmation pages.
                            header:
                              anchor: currency_currency-conversion
                          - type: callout
                            data:
                              body: >-
                                The options on this page require that you first
                                enable Optimized One-Page Checkout. Find
                                instructions on how to do this in Enable and
                                Restyle Optimized One-Page Checkout.


                                Note that regardless of the display options that
                                you set below, transactions will always be
                                processed in the store's single default
                                currency. To change that setting, see Changing
                                Your Default Currency.
                              title: Restrictions
                              type: warning
                          - type: text
                            data: >-
                              To allow shoppers to view prices in multiple
                              currencies, you will need to add the desired
                              currencies via the BigCommerce control panel.


                              Shoppers will then be able to use the `Currency`
                              drop-down list, throughout the storefront, to
                              switch displayed prices among the currencies you
                              have enabled.


                              At checkout, the shopper will still be billed in
                              the store's default currency. As shown below, the
                              checkout and cart templates will show an
                              annotation about this, while flagging any
                              converted total (in a shopper's selected alternate
                              currency) as an `Estimated Total`:
                          - type: image
                            data: >-
                              //s3.amazonaws.com/user-content.stoplight.io/6116/1540232528988
                            config:
                              maxWidth: '400'
                              maxHeight: '600'
                              centered: true
                              fluid: true
                              bordered: true
                    - title: Multi Language Checkout
                      route:
                        path: /multi-language-checkout
                      data:
                        blocks:
                          - type: html
                            data: <h1>Multi Language Checkout</h1>
                          - type: html
                            data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#multi_multi-lang\">Multi Language Setup</a></li>\n    <li><a href=\"#multi_browsing\">Browsing Hidden Translation Keys</a></li>\n    <li><a href=\"#multi_adding\">Adding Your Own Translation Values</a></li>\n    <li><a href=\"#multi_localized\">Localized Country and State Names</a></li>\n    <li><a href=\"#multi_stencils-overall\">Stencil's Overall Limits on Translation</a></li>\n\t</ul>\n</div>"
                          - type: text
                            data: >-
                              ## Multi-Language Setup 


                              In Stencil's default Cornerstone theme, both the
                              Optimized One-Page Checkout and the order
                              confirmation pages contain Handlebars abstracted
                              {{lang}} statements to facilitate automatic
                              translation into different locales' natural
                              languages.


                              In the default checkout page template (located at
                              `<theme-name>/templates/pages/checkout.html`), one
                              example that you can directly view is the page
                              header:


                              `<h1 class="is-srOnly">{{lang 'checkout.title'}}`


                              These `{{lang}}` statements, like the example
                              above, enable automatic rendering of their
                              parameters into languages that shoppers have
                              selected in their browser preferences.
                            header:
                              anchor: multi_multi-lang
                          - type: text
                            data: '---'
                          - type: text
                            data: >
                              ## Browsing Hidden Translation Keys


                              BigCommerce exposes only part of the checkout
                              page's structure through the local template
                              referenced above. For security purposes – and also
                              to offer all stores new checkout features
                              simultaneously – most checkout content is hidden.


                              This hidden content includes many more key/value
                              pairs that support translation. However, you can
                              see all the available keys – with their default
                              English-language values – in this [sample
                              `en.json`
                              file](https://developer.bigcommerce.com/assets/opt-checkout-en.json)
                            header:
                              anchor: multi_browsing
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Adding Your Own Translation Values


                              You can provide values for all of checkout's
                              supported translation keys – for all the languages
                              you want to support – even without direct access
                              to the hidden parts of the checkout template. Here
                              is how:


                              1. Download and unzip a local copy of the sample
                              file linked above.


                              2. Copy the file's entire contents to your
                              clipboard:


                              ```

                              {
                               "optimized_checkout": {
                                   "address": {
                                       "address_line_1_label": "Address Line 1",
                                       "address_line_1_required_error": "Address Line 1 is required",
                                       "address_line_2_label": "Address Line 2",
                                       "address_line_2_required_error": "Address Line 1 is required",
                                       "address_not_recognized_heading": "We did not recognize your address",
                                       "city_label": "City",
                                       [...]
                                       "order_without_support_number_text": "An email will be sent containing information about your purchase. If you have any questions about your purchase, email us at <a ng-href=\"mailto:{supportEmail}?Subject=Order {orderNumber}\" target=\"_top\">{supportEmail}</a>.",
                                       "thank_you_customer_heading": "Thank you {name}!",
                                       "thank_you_heading": "Thank you!",
                                       "order_status_update_facebook_messenger_heading": "Get instant updates of your order to Messenger"
                                   }
                               }
                              }

                              ```


                              3. Paste this whole optimized_checkout JSON block
                              into your theme's en.json file, and into an
                              xx.json file for each language into which you want
                              to translate your checkout page's text. (To see
                              requirements for naming and deploying these
                              translation files, please this documentation's
                              Internationalization section.)


                              4. Replace the keys' values with appropriate
                              phrases in each file's target language.
                            header:
                              anchor: multi_adding
                          - type: text
                            data: >-
                              ## Localized Country and State Names 


                              In the Optimized One-Page Checkout page's
                              `Shipping Address` and `Billing Address` fields,
                              BigCommerce currently provides automatic
                              translation of drop-down lists' displayed
                              `Country` and `State` names into 12 supported
                              languages. Here are the steps for enabling this
                              translation:


                              1. As for the translation options described above,
                              you must enable Optimized One-Page Checkout.


                              2. Within your `<theme-name>/lang/` subdirectory,
                              you must provide a `xx.json` file with the
                              appropriate two-letter prefix for one or more of
                              the `Supported Languages` in the Naming
                              Requirements table below. (The naming conventions
                              we follow are explained on this page.)


                              3. We recommend that you populate that file with
                              the checkout-specific keys/values covered above at
                              Adding Your Own Translation Values. This is not
                              strictly necessary to translate the drop-down
                              lists, but it is necessary to provide a consistent
                              translation of the surrounding Address sections.
                              You do not need to provide any keys/values for the
                              Country/State names, whose translations are
                              predefined within the BigCommerce platform.


                              4. As with the translation options described
                              above, the storefront will automatically display
                              the translated `Country/State` names to visitors
                              who have selected one of the supported languages
                              in their browser's locale preferences.


                              ### Country/State Translation – Naming
                              Requirements


                              BigCommerce Optimized One-Page Checkout will
                              currently translate displayed `Country/State`
                              names if your Stencil theme includes
                              `.../lang/xx.json` files named as shown below.


                              | Supported Language | Required Translation File
                              Name |

                              |------|------|

                              |  German | `de.json` |

                              | Spanish | `es.json` |

                              | French | `fr.json` |

                              | Hindi | `hi.json` |

                              | Italian | `it.json` |

                              | Japanese | `ja.json` |

                              | Korean | `ko.json` |

                              | Dutch | `nl.json` |

                              | Punjabi | `pa.json` |

                              | Tamil | `ta.json` |

                              | Chinese Simplified | `zh-TW.json` |

                              | Chinese Traditional | `zh.json` |
                            header:
                              anchor: multi_localized
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Stencil's Overall Limits on Translation


                              * Your theme's content will translate only to the
                              extent that you have created JSON files in your
                              `<theme-name>/lang/` subdirectory for each
                              language that you choose to support, and have
                              included key/value pairs for the parameters
                              (beyond `Country/State`) that you choose to
                              translate.


                              * Stencil's multi-language capabilities are
                              currently limited to these specific strings that
                              you specify within the theme. The Stencil
                              framework does not currently translate content
                              rendered from a store's database – for example,
                              products' names.


                              * Within these limitations, if you intend to do
                              business internationally, we recommend that you
                              specify appropriate alternate-language strings for
                              key parts of your storefront, product catalog, and
                              checkout. Doing so will make browsing, purchasing,
                              and payment easier for users in your target
                              market(s). For an overview of all localization
                              options, please see Localizing Stores.
                            header:
                              anchor: multi_stencils-overall
                    - title: Checkout/Confirmation Injection Options
                      route:
                        path: /checkout-confirmation-injection
                      data:
                        blocks:
                          - type: html
                            data: <h1>Checkout/Confirmation Injection Options</h1>
                          - type: html
                            data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#checkout_adding\">Adding Storewide Styles</a></li>\n    <li><a href=\"#checkout_applying-storewide-header\">Applying Storewide Header</a></li>\n    <li><a href=\"#checkout_applying-storewide-scripts\">Applying Storewide Scripts</a></li>\n    <li><a href=\"#checkout_adding-trust-seals\">Adding Trust Seals</a></li>\n    <li><a href=\"#checkout_app-injection\">Checkout App Injection</a></li>\n\t</ul>\n</div>\n  \n"
                          - type: text
                            data: >-
                              ## Adding Storewide Styles 


                              A prerequisite for the next two options is to add
                              themewide styles to your Checkout or Order
                              Confirmation page. To do so, add this statement:


                              `{{{stylesheet '/assets/css/theme.css'}}}`


                              ...before this statement, which is already present
                              at the head of each template:


                              `{{{ checkout.checkout_head }}}`
                            header:
                              anchor: checkout_adding
                          - type: text
                            data: >+
                              ## Applying Storewide Header 


                              You can replace each page's predefined header with
                              your storewide header. To do so, first add
                              themewide styles as described above. Next, replace
                              the following code block (if present):


                              ```

                              <header class="checkoutHeader
                              optimizedCheckout-header">
                                  <div class="checkoutHeader-content">
                                      <h1 class="is-srOnly">{{lang 'checkout.title'}}</h1>
                                      <h2 class="checkoutHeader-heading">
                                          <a class="checkoutHeader-link" href="{{urls.home}}">
                                              {{#if checkout.header_image}}
                                                  <img alt="{{settings.store_logo.title}}" class="checkoutHeader-logo" id="logoImage" src="{{ checkout.header_image }}"/>
                                              {{ else }}
                                                  <span class="header-logo-text">{{settings.store_logo.title}}</span>
                                              {{/if}}
                                          </a>
                                      </h2>
                                  </div>
                              </header>

                              ```


                              with this simple Handlebars statement:


                              `{{> components/common/header }}`


                              Ensure that you paste it before this **existing**
                              statement:


                              `{{{ checkout.checkout_head }}}`

                            header:
                              anchor: checkout_applying-storewide-header
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Applying Storewide Scripts 


                              You have the following options to add and
                              customize headers and footers, on either or both
                              templates:


                              * Adding your themewide header/footer.

                              * Adding themewide scripts (for analytics, etc.).

                              * Adding both.


                              If you are working on a theme that does not have
                              the scripts already enabled, here are the steps to
                              enable these options:


                              1. Add themewide styles, as described above.


                              2. Towards the top of the checkout template
                              (`checkout.html`), add this Handlebars statement
                              to enable header scripts:


                              `{{{ head.scripts }}}`


                              Add it between these existing statements, so it
                              will ultimately read as shown below.


                              ```

                              <script type="text/javascript">
                                  window.language = {{{langJson 'optimized_checkout'}}};
                              </script>


                              {{{head.scripts}}}


                              {{/partial}}


                              {{#partial "page"}}

                              ```


                              Additionally, at the bottom of the checkout
                              template (`checkout.html`), add this Handlebars
                              statement to enable footer scripts:


                              `{{{ footer.scripts }}}`


                              Add it between these existing statements, so it
                              will ultimately read as shown below.


                              ```
                                  {{{ checkout.checkout_content }}}

                                  {{{ footer.scripts }}}

                                  {{/partial}}
                              ```


                              3. Towards the top of the order confirmation
                              template (`order-confirmation.html`), add this
                              Handlebars statement to enable header scripts:


                              `{{{ head.scripts }}}`


                              Add it between these existing statements, so it
                              will ultimately read as shown below.


                              ```

                              <script type="text/javascript">
                                  window.language = {{{langJson 'optimized_checkout'}}};
                              </script>


                              {{{head.scripts}}}


                              {{/partial}}


                              {{#partial "page"}}

                              ```


                              Additionally, at the bottom of the order
                              confirmation template (`order-confirmation.html`),
                              insert this Handlebars statement:


                              `{{{ footer.scripts }}}`


                              Insert it between these existing statements, so it
                              will ultimately read as shown below.


                              ```

                              {{{ checkout.order_confirmation_content }}}


                              {{{ footer.scripts }}}


                              {{/partial}}

                              ```


                              4. In your store's BigCommerce control panel,
                              ensure that you have inserted any desired script
                              text in the `Storefront` > `Script Manager` field.
                            header:
                              anchor: checkout_applying-storewide-scripts
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Adding Trust Seals 


                              To add a trust seal to either template:


                              1. Generate a code snippet (seal script) from your
                              trust-seal provider. You can find instructions for
                              GeoTrust seals in [this BigCommerce KB
                              article](https://support.bigcommerce.com/articles/Public/Adding-a-GeoTrust-SSL-seal-to-your--footer?_ga=2.254356814.718421096.1540222570-967431010.1523308107).
                              (Instructions for other providers will vary.)


                              2. Copy and paste the seal script into your
                              checkout or order confirmation template, before or
                              after the `{{{ checkout.checkout_content }}}`
                              Handlebars statement.
                            header:
                              anchor: checkout_adding-trust-seals
                          - type: text
                            data: >
                              ## App Injection: Script Examples 


                              With BigCommerce's extensible software, there are
                              a variety of ways to add scripts to your store.
                              The steps above outline only one method of adding
                              header and footer scripts to your store, which is
                              by directly editing the theme files.


                              As mentioned in the App Injection Script Examples,
                              you can use BigCommerce's Script Manager and
                              Script API to inject scripts to your store. The
                              Script Manager user interface is available to
                              store owners and other users via granted
                              permission directly in the Control Panel, or
                              scripts can be programmatically injected into the
                              store by developers using the Scripts API. These
                              are the recommended methods as they allow seamless
                              and intuitive injection of scripts.


                              The following sections present examples of scripts
                              that inject popular apps into the checkout/order
                              confirmation sequence.


                              ### Olark Live Chat 


                              As an example of injecting an app from the
                              BigCommerce Apps Marketplace, you could enable the
                              Olark Live Chat app on either page by by using the
                              script manager or our new Scripts API:


                              ```

                              <!-- begin olark code -->

                              <script type="text/javascript" async>

                              ;(function(o,l,a,r,k,y){if(o.olark)return;

                              r="script";y=l.createElement(r);r=l.getElementsByTagName(r)[0];

                              y.async=1;y.src="//"+a;r.parentNode.insertBefore(y,r);

                              y=o.olark=function(){k.s.push(arguments);k.t.push(+new
                              Date)};

                              y.extend=function(i,j){y("extend",i,j)};

                              y.identify=function(i){y("identifyv",k.i=i)};

                              y.configure=function(i,j){y("configure",i,j);k.c[i]=j};

                              k=y._={s:[],t:[+new Date],c:{},l:a};

                              })(window,document,"static.olark.com/jsclient/loader.js");

                              /* Add configuration calls bellow this comment */

                              olark.identify('4080-493-10-1035');</script>

                              <!-- end olark code -->

                              ```


                              ### Bluecheck Age Verification


                              Similarly, you could enable the Bluecheck
                              age-verification app by using the script manager
                              or our new Scripts API:


                              ```

                              <!-- Bluecheck AV Start Here -->
                                 <script src="https://api.bluecheck.me/modal/latest/custom/bigcommerce.js"></script>
                                 <script src='//api.bluecheck.me/age-gate/v2/loader.js.php?domain_token=[user-token-value]'></script>
                                 <span style='display:none' id='bc_selected_shipping_info'>%%GLOBAL_ShippingAddress%%</span>
                                 <span style='display:none' id='bc_selected_billing_info'>%%GLOBAL_BillingAddress%%</span>
                                 <span style='display:none' id='bc_customer_acct_email'>%%GLOBAL_CurrentCustomerEmail%%</span>
                                 <span style='display:none' id='bc_customer_acct_id'>%%GLOBAL_CurrentCustomerID%%</span>
                                 <span style='display:none' id='bc_customer_acct_fname'>%%GLOBAL_CurrentCustomerFirstName%%</span>
                                 <span style='display:none' id='bc_customer_acct_lname'>%%GLOBAL_CurrentCustomerLastName%%</span>
                                 <!-- Bluecheck AV End Here -->
                              ```


                              ### Rebillia Recurring Billing


                              To add the Rebillia app, you could add the
                              following tags by using the script manager or our
                              new Scripts API:


                              ```

                              <div id='rebillia_overlay'></div>


                              <script
                              src="https://js.braintreegateway.com/v2/braintree.js"></script>


                              <script type="text/javascript"
                              src="https://js.stripe.com/v2/"></script>


                              <script type="text/javascript">

                              function customerJWT(a){var
                              b="r1sc6nvnnhed377cozp2bfwfa69cfz5",c=new
                              XMLHttpRequest;c.onreadystatechange=function(){if(4==c.readyState)if(200==c.status){var
                              b=new
                              XMLHttpRequest;b.open("GET","https://demo.rebillia.com/storefront/login/"+c.responseText,!0),b.withCredentials=!0,b.send()}else
                              if(404==c.status){var d=new
                              XMLHttpRequest;params="bc_email="+a,d.open("POST","https://demo.rebillia.com/storefront/login/guest",!0),d.setRequestHeader("Content-type","application/x-www-form-urlencoded"),d.withCredentials=!0,d.send(params)}else
                              console.log("Something went
                              wrong")},c.open("GET","/customer/current.jwt?app_client_id="+b,!0),c.send()}var
                              currentcustomeremail="%%GLOBAL_CurrentCustomerEmail%%",shopPath="%%GLOBAL_ShopPathSSL%%",domainName="https://demo.rebillia.com",domainURL="https://demo.rebillia.com/";$(document).ready(function(){$.getScript(domainName+"/js/embed-common.js");var
                              a=window.location.href.match(/[^\/]+$/);if(a&&a.length){var
                              b=a[0].split(".");"account"!=b[0]&&"checkout"!=b[0]&&"finishorder"!=b[0]||$.getScript(domainName+"/js/embed-"+b[0]+".js"),"account"==b[0]&&customerJWT()}});

                              </script>

                              ```


                              ### Conversion Tracking: Conversions on Demand 


                              Here is one final example of an app that you could
                              enable by using the script manager or our new
                              Scripts API. This example enables Conversions on
                              Demand:


                              ```

                              <script type='text/javascript'>// <![CDATA[
                                  var cod_page_guid = 'CHECKOUT';
                                  var COD_CONFIG = {'platform':'bigcommerce', 'stoken':'as2_bcmarket_org'};
                                      (function(){
                                          var divCOD = document.createElement('div');
                                          divCOD.id = 'codScripts';
                                          var bodytag = document.getElementsByTagName('body')[0];
                                          bodytag.appendChild(divCOD);
                                          var cod = document.createElement('script');
                                          cod.type = 'text/javascript';
                                          cod.src = 'https://www.conversionsondemand.com/codadmin2/framework/cod-scripts-loader.js';
                                          var s = document.getElementById('codScripts');
                                          s.parentNode.insertBefore(cod, s);
                                      })(COD_CONFIG);
                              // ]]></script>

                              ```


                              ### Google Analytics: Addrexx Address
                              Verification 


                              The Addrexx app is integrated to the Checkout or
                              Order Confirmation page via the BigCommerce
                              control panel's Google Analytics box, rather than
                              through injection directly into either Stencil
                              template file. Here is the corresponding script to
                              enter into the control panel:


                              ```

                              <!-- START  Addrexx -->

                              <script type="text/javascript">

                              wwPage = window.location.href;

                              if (wwPage.indexOf("billing_address") >= 0 ||
                              wwPage.indexOf("create_account") >= 0 ||
                              wwPage.indexOf("shipping_address") >= 0 ||
                              wwPage.indexOf("checkout") >= 0) {

                              function loadaddrexx() {
                                  var _cc_url = "xxredda.s3.amazonaws.com/bcmarket/loader.js";
                                  var _cc_s = document.createElement('script');
                                  _cc_s.type = 'text/javascript';
                                  _cc_s.src = (("http:" === document.location.protocol) ? "http:" : "https:") + "//" + _cc_url;
                                  document.getElementsByTagName("head")[0].appendChild(_cc_s);
                              };

                              loadaddrexx();

                              }

                              </script>

                              <!-- END  Addrexx -->

                              ```
                            header:
                              anchor: checkout_app-injection
                    - title: Checkout JS SDK
                      route:
                        path: /checkout-js-sdk
                      data:
                        children:
                          - title: Getting Started in Vanilla JS
                            route:
                              path: /getting-started-in-vanilla-js
                            config:
                              sidebar:
                                token: Tutorial
                            data:
                              blocks:
                                - type: html
                                  data: <h1>Getting Started in Vanilla JS</h1>
                                - type: html
                                  data: "<div class=\"otp\" id=\"no-index\">\n<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#getting-started_installing\">Installing the Checkout JS SDK</a></li>\n    <li><a href=\"#getting-started_creating\">Creating a <code>checkout.js</code> file</a></li>\n    <li><a href=\"#getting-started_mapping\">Mapping the <code>checkout.js</code> file to the checkout page type</a></li>\t\n    <li><a href=\"#getting-started_preparing\">Preparing the <code>checkout.html</code> template file</a></li>\t\n    <li><a href=\"#getting-started_logging\">Logging the Checkout Object</a></li>\t\n    <li><a href=\"#getting-started_next-steps\">Next Steps</a></li>\t\n</ul>\n</div>\n\n\n\n\n\n\n"
                                - type: text
                                  data: >
                                    The Checkout JS SDK is a JavaScript library
                                    of methods for performing actions related to
                                    checkout. It includes methods for logging in
                                    a customer, adding addresses to the checkout
                                    object, and surfacing the shipping and
                                    payment methods that a merchant has
                                    configured. It’s everything you need to
                                    build your own custom checkout page on
                                    BigCommerce.


                                    We have provided a [sample checkout
                                    app](https://github.com/bigcommerce/checkout-sdk-js-example)
                                    built in React; the React sample app is a
                                    great place to get started if you prefer to
                                    build within a framework. However, because
                                    the SDK is built in vanilla JS, it’s
                                    framework agnostic. To illustrate that
                                    point, this tutorial will walk through the
                                    first steps for building a custom checkout
                                    directly into the theme files using vanilla
                                    JS. At the end of the tutorial, you will
                                    have installed the Checkout SDK, created a
                                    new JavaScript module for your icustom
                                    checkout, and console logged the checkout
                                    object.


                                    Before we get started, ensure your theme is
                                    setup for local development using Stencil
                                    CLI. See [Installing
                                    Stencil](/stencil-docs/getting-started/installing-stencil)
                                    if you have not already done this.
                                - type: text
                                  data: >
                                    ## Installing the Checkout JS SDK


                                    1. Open your terminal and navigate to your
                                    theme’s directory.


                                    For example, `cd cornerstone`


                                    2. Run the following command: 


                                    `npm install --save
                                    @bigcommerce/checkout-sdk`
                                  header:
                                    anchor: getting-started_installing
                                - type: text
                                  data: "## Creating a `checkout.js` file\n\n1. In your text editor, open your theme and create a new file in the assets/js/theme directory.\n\n2. Save the file as checkout.js. You can name your checkout JavaScript file anything you like, but the subsequent steps of this tutorial will assume the filename checkout.js.\n\n3. Add the following to your `checkout.js` file:\n\n```\nimport PageManager from './page-manager';\nimport { createCheckoutService } from '@bigcommerce/checkout-sdk';\n\nconst service = createCheckoutService();\n\nexport default class Checkout extends PageManager {\n\tasync onReady() {\n\t\tconst state = await service.loadCheckout();\nconsole.log(state.data.getCheckout());\n\t}\n}\n```\n\nImporting and extending the PageManager abstract class sets the page context for the `checkout.js` module. We also `import { createCheckoutService }` from the Checkout SDK. \n\nThe async keyword ensures that `onReady()` returns a Promise; the await keyword waits until the Promise resolves to load the checkout. Async/await is supported in nearly all modern browsers, but if you need to support older browsers like IE, you will require the [Promise polyfill](https://github.com/stefanpenner/es6-promise).\n\n4. Save the file. "
                                  header:
                                    anchor: getting-started_creating
                                - type: text
                                  data: >-
                                    ## Mapping the `checkout.js` file to the
                                    checkout page type


                                    1. Open the `app.js` file in your text
                                    editor.


                                    2. Add the following to map your checkout.js
                                    file to the checkout page type:

                                    `checkout: () =>
                                    import('./theme/checkout'),`
                                  header:
                                    anchor: getting-started_mapping
                                - type: image
                                  data: >-
                                    //s3.amazonaws.com/user-content.stoplight.io/6116/1540242854920
                                  config:
                                    centered: true
                                    fluid: true
                                    bordered: true
                                - type: text
                                  data: 3. Save the file.
                                - type: text
                                  data: >+
                                    ## Preparing the `checkout.html` template
                                    file


                                    1. Open the `checkout.html` file in your
                                    text editor.

                                    2. Comment out the `{{{
                                    checkout.checkout_content }}}` statement:

                                    <!--{{{ checkout.checkout_content }}}-->


                                    3. On the next line, add the following:

                                    ```

                                    <script>window.__webpack_public_path__ =
                                    "{{cdn 'assets/dist/'}}";</script>

                                    <script src="{{cdn
                                    'assets/dist/theme-bundle.main.js'}}"></script>


                                    <script>
                                        window.stencilBootstrap("{{page_type}}", {{jsContext}}).load();
                                    </script>


                                    ```


                                    4. Save the file.

                                  header:
                                    anchor: getting-started_preparing
                                - type: text
                                  data: >
                                    ## Logging the Checkout Object


                                    1. Navigate to the storefront and open your
                                    browser console.

                                    2. Add an item to your cart and proceed to
                                    the checkout page. The checkout page will be
                                    blank below the header.

                                    3. Note the checkout object logged to the
                                    console. 
                                  header:
                                    anchor: getting-started_logging
                                - type: text
                                  data: >-
                                    ## Next Steps


                                    Build out your custom checkout page by
                                    entering your HTML into the `checkout.html`
                                    file and JavaScript into checkout.js. For
                                    detailed documentation on all of the
                                    Checkout SDK library methods visit the [SDK
                                    GitHub
                                    repository](https://github.com/bigcommerce/checkout-sdk-js).
                                  header:
                                    anchor: getting-started_next-steps
                          - title: React.js Custom Checkout
                            route:
                              path: /implement-a-custom-checkout
                            data:
                              blocks:
                                - type: html
                                  data: >-
                                    <h1>Implementing a Custom React.js Checkout
                                    to Cornerstone using the BigCommerce
                                    Checkout SDK</h1>
                                - type: html
                                  data: "<div class=\"otp\" id=\"no-index\">\n<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#implement_tutorial-overview\">Tutorial Overview</a></li>\n    <li><a href=\"#implement_steps\">Steps to Implement a Custom React Checkout</a></li>\n    <li><a href=\"#implement_additional\">Additional Resources</a></li>\t\n</ul>\n</div>\n"
                                - type: text
                                  data: >-
                                    ## Tutorial Overview


                                    This tutorial will take you through the
                                    steps to implement a custom checkout built
                                    with React to the Cornerstone Theme. The
                                    checkout will utilize BigCommerce's Checkout
                                    SDK. This tutorial assumes Cornerstone 2.4.0
                                    as a starting point.
                                  header:
                                    anchor: implement_tutorial-overview
                                - type: callout
                                  data:
                                    type: error
                                    body: >-
                                      Please note that the provided checkout
                                      example is a good starting and reference
                                      point, but is **NOT production ready**.
                                      You should **not** use this custom
                                      checkout in production as it stands.
                                    title: Checkout Example NOT production ready!
                                - type: text
                                  data: >-
                                    ## Steps to Implement a Custom React
                                    Checkout in Cornerstone


                                    ### Tutorial Prerequisites


                                    Before beginning this tutorial, you will
                                    need to have the Stencil CLI installed.


                                    If you do not yet have Stencil CLI
                                    installed, complete the steps in [Installing
                                    the Stencil
                                    CLI](stencil-docs/getting-started/installing-and-launching/installing-the-stencil-cli).


                                    ### Install Dependencies


                                    The React app used to demonstrate the
                                    Checkout SDK has a few additional
                                    dependencies.

                                    In your theme directory (e.g.
                                    /stencil/cornerstone), run the following
                                    command:


                                    `npm install --save react react-dom
                                    react-text-mask classnames accounting
                                    babel-preset-react css-loader node-sass
                                    sass-loader style-loader
                                    @bigcommerce/checkout-sdk`



                                    ### Update webpack.common.js


                                    The React app includes .jsx files which will
                                    not be resolved using the default webpack
                                    configuration in Cornerstone. Additionally,
                                    loaders must be registered for .jsx and
                                    .scss files.


                                    **Note:** _Cornerstone 2.0 and above uses
                                    Webpack 4 which does **not** use a
                                    `webpack.conf.js` file like earlier Webpack
                                    versions. Instead, we will modify
                                    `webpack.common.js`._


                                    #### Register .jsx and .scss loaders


                                    In webpack.common.js, add the following
                                    objects to the `rules` array:


                                    ```

                                    {
                                      test: /\.jsx$/,
                                      exclude: /node_modules/,
                                      use: {
                                          loader: "babel-loader",
                                          options: {
                                              presets: ['react'],
                                          },
                                      }
                                    },


                                    {
                                      test: /\.scss$/,
                                      use:  [
                                          'style-loader',
                                          {
                                              loader: 'css-loader',
                                              options: {
                                                  modules: true
                                              }
                                          },
                                          'sass-loader'
                                      ],
                                    },

                                    ```


                                    Next, in webpack.common.js, add the
                                    following property to the `resolve` object:



                                    `extensions: ['.js', '.jsx']`



                                    ### Add React Checkout Components to Theme


                                    1. Clone or download BigCommerce's [Checkout
                                    SDK JS
                                    Example](https://github.com/bigcommerce/checkout-sdk-js-example)
                                    **outside** of your theme directory


                                    `git clone
                                    git@github.com:bigcommerce/checkout-sdk-js-example.git`


                                    2. In your theme directory, navigate to
                                    `/assets/js/` and create a `checkout-app`
                                    directory (i.e. `/assets/js/checkout-app`)


                                    3. Copy the contents of
                                    `/checkout-sdk-js-example/src` into your new
                                    `/assets/js/checkout-app` directory 



                                    ### Import Dependencies


                                    Edit `/assets/js/app.js` and add the
                                    following lines toward the beginning with
                                    the other import statements:


                                    ```

                                    import React from 'react';

                                    import ReactDOM from 'react-dom';

                                    import Checkout from
                                    './checkout-app/Checkout/checkout';

                                    ```


                                    ### Define a Function to Initialize React


                                    Edit `/assets/js/app.js` and add the
                                    following lines to the end:


                                    ```

                                    window.initReact = function initReact() {
                                        ReactDOM.render(
                                            React.createElement(Checkout, null, null),
                                            document.getElementById('checkout-app')
                                        );
                                    };

                                    ```


                                    ### Customize the Checkout Template


                                    1. Edit `/templates/pages/checkout.html` and
                                    add the following lines between `{{{
                                    footer.scripts }}}` and `{{/partial}}`


                                    ```

                                    <script src="{{cdn
                                    'assets/dist/theme-bundle.main.js'}}"></script>
                                     
                                    <script type="text/javascript" defer>
                                        // Exported in app.js
                                        window.initReact();
                                    </script>

                                    ```


                                    2. In `/templates/pages/checkout.html`,
                                    replace `{{{ checkout.checkout_content }}}`
                                    with the following:


                                    ```<div id="checkout-app"></div>```


                                    ### Congratulations!


                                    You should now be able to view your example
                                    React checkout by running the `stencil
                                    start` command in your theme directory and
                                    navigating to your storefront at
                                    [http://localhost:3000](http://localhost:3000).


                                    You can make further customizations to the
                                    checkout by modifying the React components
                                    in `/assets/js/checkout-app`.
                                  header:
                                    anchor: implement_steps
                                - type: tabs
                                  data:
                                    children:
                                      - title: webpack.common.js
                                        blocks:
                                          - type: code
                                            data: >
                                              LodashPlugin =
                                              require('lodash-webpack-plugin'),

                                              path = require('path'),

                                              webpack = require('webpack');


                                              // Common configuration, with extensions
                                              in webpack.dev.js and webpack.prod.js.

                                              module.exports = {

                                              bail: true,

                                              context: __dirname,

                                              entry: {
                                                main: './assets/js/app.js',
                                              },

                                              module: {
                                                rules: [
                                                    {
                                                        test: /\.js$/,
                                                        include: /(assets\/js|assets\\js|stencil-utils)/,
                                                        use: {
                                                            loader: 'babel-loader',
                                                            options: {
                                                                plugins: [
                                                                    'dynamic-import-webpack', // Needed for dynamic imports.
                                                                    'lodash', // Automagically tree-shakes lodash.
                                                                    'transform-regenerator', // Transforms async and generator functions.
                                                                ],
                                                                presets: [
                                                                    ['env', {
                                                                        loose: true, // Enable "loose" transformations for any plugins in this preset that allow them.
                                                                        modules: false, // Don't transform modules; needed for tree-shaking.
                                                                        useBuiltIns: true, // Tree-shake babel-polyfill.
                                                                    }],
                                                                ],
                                                            },
                                                        },
                                                    },
                                                    {
                                                        test: /jquery-migrate/,
                                                        use: 'imports-loader?define=>false',
                                                    },
                                                    {
                                                        test: /\.jsx$/,
                                                        exclude: /node_modules/,
                                                        use: {
                                                            loader: "babel-loader",
                                                            options: {
                                                                presets: ['react'],
                                                            },
                                                        }
                                                    },
                                                    {
                                                        test: /\.scss$/,
                                                        use:  [
                                                            'style-loader',
                                                            {
                                                                loader: 'css-loader',
                                                                options: {
                                                                    modules: true
                                                                }
                                                            },
                                                            'sass-loader'
                                                        ]
                                                    }
                                                ],
                                              },

                                              output: {
                                                chunkFilename: 'theme-bundle.chunk.[name].js',
                                                filename: 'theme-bundle.[name].js',
                                                path: path.resolve(__dirname, 'assets/dist'),
                                              },

                                              plugins: [
                                                new CleanPlugin(['assets/dist'], {
                                                    verbose: false,
                                                    watch: false,
                                                }),
                                                new LodashPlugin, // Complements babel-plugin-lodash by shrinking its cherry-picked builds further.
                                                new webpack.ProvidePlugin({
                                                    $: 'jquery',
                                                    jQuery: 'jquery',
                                                    'window.jQuery': 'jquery',
                                                }),
                                              ],

                                              resolve: {
                                                alias: {
                                                    'jquery-migrate': path.resolve(__dirname, 'node_modules/jquery-migrate/dist/jquery-migrate.min.js'),
                                                    jstree: path.resolve(__dirname, 'node_modules/jstree/dist/jstree.min.js'),
                                                    lazysizes: path.resolve(__dirname, 'node_modules/lazysizes/lazysizes.min.js'),
                                                    pace: path.resolve(__dirname, 'node_modules/pace/pace.min.js'),
                                                    'slick-carousel': path.resolve(__dirname, 'node_modules/slick-carousel/slick/slick.min.js'),
                                                    'svg-injector': path.resolve(__dirname, 'node_modules/svg-injector/dist/svg-injector.min.js'),
                                                    sweetalert2: path.resolve(__dirname, 'node_modules/sweetalert2/dist/sweetalert2.min.js'),
                                                },
                                                extensions: ['.js', '.jsx'],
                                              },

                                              };
                                            header:
                                              title: webpack.common.js
                                      - title: app.js
                                        blocks: []
                                      - title: checkout.html
                                        blocks:
                                          - type: code
                                            data: >-
                                              {{#partial "head"}}
                                               
                                              {{{ checkout.checkout_head }}}

                                              {{{ stylesheet
                                              '/assets/css/optimized-checkout.css' }}}

                                              {{ getFontsCollection }}
                                               
                                              <script type="text/javascript">
                                                  window.language = {{{langJson 'optimized_checkout'}}};
                                              </script>
                                               
                                              {{{head.scripts}}}
                                               
                                              {{/partial}}
                                               
                                              {{#partial "page"}}

                                              <header class="checkoutHeader
                                              optimizedCheckout-header">
                                                  <div class="checkoutHeader-content">
                                                      <h1 class="is-srOnly">{{lang 'checkout.title'}}</h1>
                                                      <h2 class="checkoutHeader-heading">
                                                          <a class="checkoutHeader-link" href="{{urls.home}}">
                                                              {{#if checkout.header_image}}
                                                                  <img alt="{{settings.store_logo.title}}" class="checkoutHeader-logo" id="logoImage" src="{{ checkout.header_image }}"/>
                                                              {{ else }}
                                                                  <span class="header-logo-text">{{settings.store_logo.title}}</span>
                                                              {{/if}}
                                                          </a>
                                                      </h2>
                                                  </div>
                                              </header>
                                               
                                              <div id="checkout-app"></div>
                                               
                                              {{{ footer.scripts }}}

                                              <script src="{{cdn
                                              'assets/dist/theme-bundle.main.js'}}"></script>
                                               
                                              <script type="text/javascript" defer>
                                                  // Exported in app.js
                                                  window.initReact();
                                              </script>

                                              {{/partial}}
                                               
                                              {{> layout/empty}}
                                            header:
                                              title: checkout.html
                                  header:
                                    title: >-
                                      Examples of files after completing this
                                      tutorial
                                - type: text
                                  data: >-
                                    ## Additional Resources


                                    * [www.reactjs.org](www.reactjs.org)

                                    *
                                    [www.reactjs.org/tutorial/tutorial.html](www.reactjs.org/tutorial/tutorial.html)
                                    (Excellent tutorial on the basics of React)

                                    *
                                    [https://webpack.js.org/concepts/](https://webpack.js.org/concepts/)
                                  header:
                                    anchor: implement_additional"
                            config:
                              sidebar:
                                token: tutorial
        - title: Handlebars Syntax and Helpers
          route:
            path: /handlebars-syntax-and-helpers
          data:
            children:
              - title: Stencil Handlebars Helpers
                route:
                  path: /handlebars-helpers-reference
                data:
                  blocks:
                    - type: html
                      data: <h1>Handlebars Helpers Reference</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"handlebars-helpers-reference_a\">Array Helpers</a></li>\n    <li><a href=\"handlebars-helpers-reference_collection\">Collection Helpers</a></li>\n    <li><a href=\"handlebars-helpers-reference_comparison\">Comparison Helpers</a></li>\n    <li><a href=\"handlebars-helpers-reference_control-flow\">Control-Flow Helpers</a></li>\n    <li><a href=\"handlebars-helpers-reference_html\">HTML Helpers</a></li>\n    <li><a href=\"handlebars-helpers-reference_image\">Image Helpers</a></li>\n    <li><a href=\"handlebars-helpers-reference_inflection\">Inflection Helpers</a></li>\n    <li><a href=\"handlebars-helpers-reference_injection\">Injection Helpers</a></li>\n    <li><a href=\"handlebars-helpers-reference_markdown\">Markdown Helpers</a></li>\n    <li><a href=\"handlebars-helpers-reference_math\">Math Helpers</a></li>\n    <li><a href=\"handlebars-helpers-reference_number\">Number Helpers</a></li>\n    <li><a href=\"handlebars-helpers-reference_object\">Object Helpers</a></li>\n    <li><a href=\"handlebars-helpers-reference_operator\">Operator Helpers</a></li>\n    <li><a href=\"handlebars-helpers-reference_string\">String Helpers</a></li>\n    <li><a href=\"handlebars-helpers-reference_url\">URL Helpers</a></li>\n    <li><a href=\"handlebars-helpers-reference_misc\">Miscellaneous Helpers</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >
                        ## {{itemAt}}


                        _Block helper that returns the item at the specified
                        index._


                        #### Parameters


                        * `array` {Array}

                        * `idx` {Number}

                        * `returns` {any} `value`


                        #### {{itemAt}} Example


                        Given the array `['a', 'b', 'c']`:


                        ```

                        {{itemAt array 1}}

                        //=> 'b'


                        ```

                        ---


                        ## {{join}}


                        The `join` helper is custom to Stencil. It joins an
                        array of string items, with separators. It returns a
                        string. 


                        #### Parameters


                        - `values`: {Array}

                        - `separator`: {String}

                        - `limit=<number>`: An optional limit.


                        #### {{join}} Example


                        insert join example


                        ---


                        ### {{limit}}


                        The `limit` helper is custom to Stencil. It limits the
                        number of items returned from an array variable, and
                        returns a new array.


                        #### Parameters


                        - `data`: {Array}

                        - `limit`: {Number}


                        #### {{limit}} Example 


                        Assume that `{{cart.items}}` would return 10 items. You
                        could use this helper to limit that behavior to only the
                        first four items, by specifying: 


                        ```

                        {{limit cart.items 4}}

                        ```


                        ---


                        ### {{pluck}}


                        The `pluck` helper is custom to Stencil. For one or more
                        specified search key(s), it retrieves corresponding
                        values from some or all elements in a specified
                        collection. 


                        The `pluck` helper returns the retrieved values in a
                        comma-separated string. This helper's general form is:


                        ```

                        {{pluck ([limit] <collection> [<limit-value>])
                        '<search-key>'}}

                        ```


                        #### Parameters


                        - `limit`, `limit-value`: Optional parameters to limit
                        the number of results returned.

                        - `collection`: The collection to search.

                        - `search-key`: The string to search for.



                        #### {{pluck}} Example 1


                        Assume that the `categories` collection contains:


                        ```

                        categories: [
                          { "id": 1, "name": "Bakeware" },
                          { "id": 2, "name": "Cookware" },
                          { "id": 3, "name": "Cutlery" }
                        ]

                        ```


                        In this case, this Handlebars statement:


                        ```

                        {{pluck (limit categories 2) 'name'}}

                        ```


                        ...would return:


                        ```

                        "Bakeware,Cookware"

                        ```


                        #### {{pluck}} Example 2


                        If the `categories` themselves each contained an image
                        object, then you could use dot notation to access that
                        image object's children:


                        ```

                        categories: [
                          { "id": 1, "name": "Bakeware", "image": { "data": "http://...", "alt": "Bakeware image"} },
                          { "id": 2, "name": "Cookware" "image": { "data": "http://...", "alt": "Cookware image"} },
                          { "id": 3, "name": "Cutlery" "image": { "data": "http://...", "alt": "Cutlery image"} }
                        ]

                        ```


                        In this case, this Handlebars statement:


                        ```

                        {{pluck (limit categories 2) 'image.data'}}

                        ```


                        ...would return a comma-separated list of image URLs.


                        ---



                        ## <a name="array_std"></a> Standard Array Helpers


                        The following standard array helpers are supported on
                        the Stencil framework.


                        ### <a name="after"></a> {{after}}


                        Returns all of the items in an array after the specified
                        index. Opposite of [before](#before).


                        Given the array `['a', 'b', 'c']`:


                        #### Parameters


                        * `array` {Array}: Collection.

                        * `n` {Number}: Starting index (number of items to
                        exclude).

                        * `returns` {Array}: Array exluding `n` items.


                        #### Example


                        ```handlebars

                        {{after array 1}}

                        //=> '["c"]'

                        ```


                        ---


                        ## {{arrayify}}


                        Casts the given `value` to an array.


                        #### Parameters


                        * `value` {any}

                        * `returns` {Array}


                        #### {{arrayify}} Example


                        ```handlebars

                        {{arrayify "foo"}}

                        //=> '["foo"]'

                        ```

                        ---


                        ## <a name="before"></a> {{before}}


                        Returns all of the items in the collection before the
                        specified count. Opposite of [after](#after).


                        Given the array `['a', 'b', 'c']`:


                        #### Parameters


                        * `array` {Array}

                        * `n` {Number}

                        * `returns` {Array}: Array excluding items after the
                        given number.


                        #### {{before}} Example


                        ```handlebars

                        {{before array 2}}

                        //=> '["a", "b"]'

                        ```


                        ---


                        ## {{eachIndex}}


                        #### Parameters


                        * `array` {Array}

                        * `options` {Object}

                        * `returns` {String}


                        #### {{eachIndex}} Example


                        ```handlebars

                        {{#eachIndex collection}}
                          {{item}} is {{index}}
                        {{/eachIndex}}

                        ```


                        ---


                        ### {{filter}}


                        Block helper that filters the given array. Renders the
                        block for values that evaluate to `true`; otherwise,
                        returns the inverse block.


                        #### Parameters


                        * `array` {Array}

                        * `value` {any}

                        * `options` {Object}

                        * `returns` {String}


                        #### {{filter}} Example


                        ```handlebars

                        {{#filter array "foo"}}AAA{{else}}BBB{{/filter}}

                        //=> 'BBB

                        ```


                        ---


                        ## <a name="first"></a> {{first}}


                        Returns the first item, or first `n` items, of an array.


                        #### Parameters


                        * `array` {Array}

                        * `n` {Number}: Number of items to return, starting at
                        `0`.

                        * `returns` {Array}


                        #### {{first}} Example


                        Given the array `['a', 'b', 'c', 'd', 'e']`:


                        ```handlebars

                        {{first array 2}}

                        //=> '["a", "b"]'

                        ```


                        ---



                        ### {{forEach}}


                        Iterates over each item in an array, and exposes the
                        current item in the array as context to the inner block.
                        In addition to the current array item, the helper
                        exposes the following variables to the inner block:


                        * `index`

                        * `total`

                        * `isFirst`

                        * `isLast`


                        Also, `@index` is exposed as a private variable, and
                        additional private variables may be defined as hash
                        arguments.


                        #### Parameters


                        * `array` {Array}

                        * `returns` {String}


                        #### {{forEach}} Example


                        ```js

                        var accounts = [

                        {'name': 'John', 'email': 'john@example.com'},

                        {'name': 'Malcolm', 'email': 'malcolm@example.com'},

                        {'name': 'David', 'email': 'david@example.com'}

                        ];


                        // example usage

                        // {{#forEach accounts}}

                        //   <a href="mailto:{{ email }}" title="Send an email
                        to {{ name }}">

                        //     {{ name }}

                        //   </a>{{#unless isLast}}, {{/unless}}

                        // {{/forEach}}

                        ```


                        ---


                        ### {{inArray}}


                        Block helper that renders the block if an array has the
                        given `value`. Optionally, you can specify an inverse
                        block to render when the array does not have the given
                        value.


                        #### Parameters


                        * `array` {Array}

                        * `value` {any}

                        * `options` {Object}

                        * `returns` {String}


                        #### {{inArray}} Example


                        Given the array `['a', 'b', 'c']`:


                        ```handlebars

                        {{#inArray array "d"}}
                          foo
                        {{else}}
                          bar
                        {{/inArray}}

                        //=> 'bar'

                        ```


                        ---


                        ### {{isArray}}


                        Returns true if `value` is an es5 array.


                        #### Parameters


                        * `value` {any}: The value to test.

                        * `returns` {Boolean}


                        #### Example


                        ```handlebars

                        {{isArray "abc"}}

                        //=> 'false'

                        ```


                        ### <a name="last"></a> {{last}}


                        Returns the last item, or last `n` items, of an array.
                        Opposite of [first](#first).


                        #### Parameters


                        * `array` {Array}

                        * `n` {Number}: Number of items to return, starting with
                        the last item.

                        * `returns` {Array}


                        #### Example


                        Given the array `['a', 'b', 'c', 'd', 'e']`:


                        ```handlebars

                        {{last array 2}}

                        //=> '["d", "e"]'

                        ```


                        ### {{lengthEqual}}


                        Block helper that compares the length of the given array
                        to the number passed as the second argument. If the
                        array length is equal to the given `length`, the block
                        is returned. Otherwise, you have the option of returning
                        an inverse block.


                        #### Parameters


                        * `array` {Array}

                        * `length` {Number}

                        * `options` {Object}

                        * `returns` {String}


                        #### Example


                        Given the array `['a', 'b', 'c', 'd', 'e']`:


                        ```handlebars

                        {{#lengthEqual array 10}}AAA{{else}}BBB{{/lengthEqual}}

                        //=> 'BBB'

                        ```


                        ### {{map}}


                        Returns a new array, created by calling `function` on
                        each element of the given `array`.


                        #### Parameters


                        * `array` {Array}

                        * `fn` {Function}

                        * `returns` {String}


                        #### Example


                        Given an array `['a', 'b', 'c']`:


                        ```js

                        // register `double` as a helper

                        function double(str) {
                          return str + str;
                        }

                        // then used like this:

                        // {{map array double}}

                        //=> '["aa", "bb", "cc"]'

                        ```


                        ### {{some}}


                        Block helper that returns the block *if* the callback
                        returns true for some value in the given array.


                        #### Parameters


                        * `array` {Array}

                        * `cb` {Function}: Callback function.

                        * {Options}: Handlebars-provided options object.

                        * `returns` {Array}


                        #### Example


                        Given the array `[1, 'b', 3]`:


                        ```handlebars

                        {{#some array isString}}
                          Render me if the array has a string.
                        {{else}}
                          Render me if it doesn't.
                        {{/some}}

                        //=> 'Render me if the array has a string.'

                        ```


                        ### {{sort}}


                        Sorts the given `array`. If an array of objects is
                        passed, you may optionally pass (as the second argument)
                        a `key` to sort on. Alternatively, you may pass a
                        sorting function as the second argument.


                        #### Parameters


                        * `array` {Array}: The array to sort.

                        * `key` {String|Function}: The object key to sort by, or
                        a sorting function.


                        #### Example


                        Given an array `['b', 'a', 'c']`:



                        ```handlebars

                        {{sort array}}

                        //=> '["a", "b", "c"]'

                        ```


                        ### {{sortBy}}


                        Sorts an `array`. If an array of objects is passed, you
                        may optionally pass a `key` to sort on as the second
                        argument. You may alternatively pass a sorting function
                        as the second argument.


                        #### Parameters


                        * `array` {Array}: The array to sort.

                        * `props` {String|Function}: One or more properties to
                        sort by, or sorting functions to use.


                        #### {{sortBy}} Example


                        Given an array `[{a: 'zzz'}, {a: 'aaa'}]`:


                        ```handlebars

                        {{sortBy array "a"}}

                        //=> '[{"a":"aaa"}, {"a":"zzz"}]'

                        ```

                        ---


                        ### <a name="withAfter"></a> {{withAfter}}


                        Use the items in the array, _after_ the specified index,
                        as context inside a block. Opposite of
                        [withBefore](#withBefore).


                        #### Parameters


                        * `array` {Array}

                        * `idx` {Number}

                        * `options` {Object}

                        * `returns` {Array}


                        #### {{withAfter}} Example


                        Given the array `['a', 'b', 'c', 'd', 'e']`:


                        ```handlebars

                        {{#withAfter array 3}}
                          {{this}}
                        {{/withAfter}}

                        //=> "de"

                        ```


                        ### <a name="withBefore"></a> {{withBefore}}


                        Use the items in the array, _before_ the specified
                        index, as context inside a block. Opposite of
                        [withAfter](#withAfter).


                        #### Parameters


                        * `array` {Array}

                        * `idx` {Number}

                        * `options` {Object}

                        * `returns` {Array}


                        #### {{withBefore}} Example


                        Given the array `['a', 'b', 'c', 'd', 'e']`:


                        ```handlebars

                        {{#withBefore array 3}}
                          {{this}}
                        {{/withBefore}}

                        //=> 'ab'

                        ```


                        ### <a name="withFirst"></a> {{withFirst}}


                        Uses a collection's first item inside a Handlebars block
                        expression. Opposite of [withLast](#withLast).


                        #### Parameters


                        * `array` {Array}

                        * `idx` {Number}

                        * `options` {Object}

                        * `returns` {String}


                        #### {{withFirst}} Example


                        Given the array `['a', 'b', 'c']`:


                        ```handlebars

                        {{#withFirst array}}
                          {{this}}
                        {{/withFirst}}

                        //=> 'a'

                        ```
                  children: []
                config:
                  sidebar:
                    token: Reference
              - title: Handlebars Helpers
                route:
                  path: /handlebars-overview
                data:
                  blocks: []
                  children:
                    - title: Handlebars.js
                      route:
                        path: /new-subpage
                      config:
                        sidebar:
                          token: Overview
                      data:
                        blocks:
                          - type: html
                            data: <h1>Handlebars.js Overview</h1>
                          - type: html
                            data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#handlebars_\"></a>Handlebars.js</li>\n    <li><a href=\"#handlebars_\"></a>Template Logic</li>\n    <li><a href=\"#handlebars_\"></a>Custom Handlebars Helpers</li>\n    <li><a href=\"#handlebars_\"></a>Stencil Handlebars Resources</li>\n    <li><a href=\"#handlebars_\"></a>Rendering Special Characters</li>\n\t</ul>\n</div>"
                          - type: text
                            data: >-
                              ## Handlebars.js


                              Handlebars is a minimal templating language that
                              allows you to create dynamic and robust templates
                              for any BigCommerce storefront. A Handlebars
                              template looks just like a regular HTML page, with
                              the addition of Handlebars expressions for all
                              dynamic logic that you embed into the page.


                              A Handlebars expression begins with: ``{{`` and
                              ends with: ``}}``.


                              Here is a basic example that accesses the title
                              and body variables:


                              ```

                              <div class="entry">

                              <div class="entry">
                                <h1>{{ title }}</h1>
                                <div class="body">
                                  {{ body }}
                                </div>
                              </div>

                              ```


                              In production, Handlebars statements run on the
                              server side, generating HTML that the shopper's
                              browser receives.


                              For a thorough overview of how to use Handlebars
                              inside your templates, please review the
                              Handlebars documentation and tutorials located at
                              http://handlebarsjs.com/.
                          - type: text
                            data: >-
                              ## Template Logic


                              With Handlebars, it’s easy to embed logic right
                              into your templates. Handlebars has built-in
                              helpers for widely used logic and iterator
                              functions. You can find a list of all built-in
                              Handlebars helpers here.
                          - type: text
                            data: >-
                              ## Custom Handlebars Helpers


                              BigCommerce has extended the built-in Handlebars
                              helpers with certain custom Handlebars helpers.
                              For details, please proceed to this reference
                              section.
                          - type: text
                            data: >-
                              ## Stencil Handlebars Resources


                              For a comprehensive reference to the Stencil data
                              objects that you can manipulate via Handlebars
                              statements, please see the Stencil Object Model
                              Reference.
                          - type: text
                            data: >-
                              ## Rendering Special Characters


                              By default, Handlebars HTML-escapes values
                              returned by a Handlebars {{ expression }}. So,
                              where a Handlebars expression's referenced content
                              includes special characters, those characters will
                              render literally on the storefront as HTML
                              entities.

                              In the example above, assume that the HTML
                              referenced by {{ title }} contains an ampersand
                              and a "straight" apostrophe. You will see the
                              entities &amp; and &#039; displayed literally on
                              the storefront, instead of the intended characters
                              & and '. Similar display errors will be triggered
                              by apostrophes, quotation marks, primes, and other
                              extended characters.

                              The workaround is to place the Handlebars variable
                              in triple braces, like this: {{{ title }}}.
                              Handlebars documentation refers to this technique
                              as a "triple-stash."
                    - title: Array Helpers
                      route:
                        path: /array-helpers
                      data:
                        children:
                          - title: Custom Array Helpers
                            route:
                              path: /new-subpage-1
                            data:
                              children:
                                - title: '{{itemAt}}'
                                  route:
                                    path: /new-subpage
                                  data:
                                    children: []
                                  config:
                                    sidebar:
                                      token: ''
                                - title: '{{join}}'
                                  route:
                                    path: /new-subpage
                          - title: Standard Array Helpers
                            route:
                              path: /new-subpage-2
                            data:
                              children:
                                - title: New Subpage
                                  route:
                                    path: /new-subpage-3
                    - title: Collection Helpers
                      route:
                        path: /collection-helpers
                    - title: Comparison Helpers
                      route:
                        path: /new-subpage-2
                    - title: Control Flow Helpers
                      route:
                        path: /new-subpage-3
                    - title: Date Helpers
                      route:
                        path: /new-subpage-1
                    - title: HTML Helpers
                      route:
                        path: /new-subpage-4
                    - title: Image Helpers
                      route:
                        path: /new-subpage-5
                    - title: Inflection Helpers
                      route:
                        path: /new-subpage-6
                    - title: Injection Helpers
                      route:
                        path: /new-subpage-7
                    - title: Markdown Helpers
                      route:
                        path: /new-subpage-8
                    - title: Math Helpers
                      route:
                        path: /new-subpage-9
                    - title: Number Helpers
                      route:
                        path: /number-helpers
                      data:
                        children: []
                    - title: Object Helpers
                      route:
                        path: /object-helpers
                    - title: Operator Helpers
                      route:
                        path: /new-subpage-1
                    - title: String Helpers
                      route:
                        path: /new-subpage
                      data:
                        children: []
                    - title: URL Helpers
                      route:
                        path: /url-helpers
                      data:
                        children: []
                    - title: Miscellaneous Helpers
                      route:
                        path: /misc-helpers
                      data:
                        children: []
                config:
                  sidebar:
                    token: ''
        - title: 'Stencil Object Model '
          route:
            path: /stencil-object-model-reference
          data:
            children:
              - title: Stencil Objects
                route:
                  path: /stencil-objects
                data:
                  children:
                    - title: Global Objects & Properties
                      route:
                        path: /global-objects
                      data:
                        children:
                          - title: 'Global Objects & Properties '
                            route:
                              path: /global-objects-and-properties-overview
                            data:
                              blocks:
                                - type: html
                                  data: >-
                                    <h1>Global Objects and Properties
                                    Overview</h1>
                                - type: html
                                  data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#global_global-objects\"></a>Global Objects and Properties Overview</li>\n\t</ul>\n</div>"
                                - type: text
                                  data: >-
                                    ## Global Objects Overview 


                                    Global objects and properties are common
                                    components shared across the entire
                                    BigCommerce storefront. The
                                    objects/properties covered in this
                                    subsection are:


                                    *
                                    [Banner](/stencil-docs/stencil-object-model-reference/stencil-objects/global-objects/banner)

                                    *
                                    [Breadcrumbs](/stencil-docs/stencil-object-model-reference/stencil-objects/global-objects/breadcrumbs)

                                    *
                                    [Categories](/stencil-docs/stencil-object-model-reference/stencil-objects/global-objects/)

                                    * [Currency
                                    Selector](/stencil-docs/stencil-object-model-reference/stencil-objects/global-objects/breadcrumbs)

                                    * [Faceted
                                    Search](/stencil-docs/stencil-object-model-reference/stencil-objects/global-objects/faceted-search)

                                    * [Featured
                                    Products](/stencil-docs/stencil-object-model-reference/stencil-objects/global-objects/featured-products)

                                    *
                                    [Footer](/stencil-docs/stencil-object-model-reference/stencil-objects/global-objects/footer)

                                    *
                                    [Carousel](/stencil-docs/stencil-object-model-reference/stencil-objects/global-objects/carousel)

                                    * [HTML
                                    Head](/stencil-docs/stencil-object-model-reference/stencil-objects/global-objects/html-head)

                                    *
                                    [Is_Ajax](/stencil-docs/stencil-object-model-reference/stencil-objects/global-objects/is-ajax)

                                    *
                                    [Login](/stencil-docs/stencil-object-model-reference/stencil-objects/global-objects/login)

                                    * [New
                                    Products](/stencil-docs/stencil-object-model-reference/stencil-objects/global-objects/new-products)

                                    * [Page
                                    Content](/stencil-docs/stencil-object-model-reference/stencil-objects/global-objects/page-content)

                                    *
                                    [Pages](/stencil-docs/stencil-object-model-reference/stencil-objects/global-objects/pages)

                                    * [Page
                                    Type](/stencil-docs/stencil-object-model-reference/stencil-objects/global-objects/page-type)

                                    *
                                    [Pagination](/stencil-docs/stencil-object-model-reference/stencil-objects/global-objects/pagination)

                                    *
                                    [Search](/stencil-docs/stencil-object-model-reference/stencil-objects/global-objects/search)

                                    *
                                    [Settings](/stencil-docs/stencil-object-model-reference/stencil-objects/global-objects/settings)

                                    *
                                    [Sitemap](/stencil-docs/stencil-object-model-reference/stencil-objects/global-objects/sitemap)

                                    * [Social
                                    Links](/stencil-docs/stencil-object-model-reference/stencil-objects/global-objects/social-links)

                                    *
                                    [Template](/stencil-docs/stencil-object-model-reference/stencil-objects/global-objects/template)

                                    * [Top
                                    Sellers](/stencil-docs/stencil-object-model-reference/stencil-objects/global-objects/top-sellers)
                            config:
                              sidebar:
                                token: Overview
                          - title: Banner
                            route:
                              path: /banner
                            data:
                              blocks:
                                - type: html
                                  data: <h1>Banners</h1>
                                - type: text
                                  data: "<b>Description:</b> Elements of marketing banners at page’s top and/or bottom\n\n<b>Handlebars Expressions:</b> `{{banner}}`, `{{{banner}}}`\n\n<b>Object Properties:</b>\n\n<table>\n  <tr>\n    <th>Property</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n\t\t<td><b>banners</b></td>\n    <td>Blocks of static HTML content to define banners</td>\n  </tr>\n  <tr>\n\t\t<td><i>top</i></td>\n    <td>Array of HTML content/strings, for custom top-banner content; banners are populated from the BigCommerce control panel</td>\n  </tr>\n  <tr>\n\t\t<td><i>bottom</i></td>\n    <td>Array of HTML content/strings, for custom bottom-banner content; banners are populated from the BigCommerce control panel</td>\n  </tr>\n</table>"
                                - type: callout
                                  data:
                                    title: ' Handlebars Formatting Exception'
                                    type: warning
                                    body: >+
                                      Where a banner contains HTML, the banner
                                      helper must be placed in triple braces, as
                                      in this

                                      example: `{{{banner}}}`. (Double braces
                                      would escape the HTML.)

                            config:
                              sidebar:
                                token: global object
                          - title: Breadcrumbs
                            route:
                              path: /breadcrumbs
                            data:
                              blocks:
                                - type: html
                                  data: <h1>Breadcrumbs</h1>
                                - type: text
                                  data: >-
                                    <b>Description:</b> Defines a page's
                                    breadcrumbs – available on virtually all
                                    pages that have a breadcrumb trail


                                    <b>Handlebars Expression:</b>
                                    `{{breadcrumbs}}`


                                    <b>Object Properties:</b>


                                    <table>
                                      <tr>
                                        <th>Property</th>
                                        <th>Description</th>
                                      </tr>
                                      <tr>
                                        <td>name</td>
                                        <td>Displayed name of this breadcrumb element</td>
                                      </tr>
                                      <tr>
                                        <td>url</td>
                                        <td>URL of this breadcrumb element</td>
                                      </tr>
                                    </table>
                            config:
                              sidebar:
                                token: global object
                          - title: Categories
                            route:
                              path: /categories
                            data:
                              blocks:
                                - type: html
                                  data: <h1>Categories</h1>
                                - type: text
                                  data: "<b>Description:</b> A list of all product categories shown in the current page context; default sorting is by category id, from lowest to highest\n\n<b>Handlebars Expression:</b> `{{categories}}`\n\n<b>Object Properties:</b>\n\n<table>\n  <tr>\n    <th>Property</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>id</td>\n    <td>ID of the top-level category listed</td>\n  </tr>\n  <tr>\n    <td>name</td>\n    <td>Name of the top-level category</td>\n  </tr>\n  <tr>\n    <td>description</td>\n    <td>Description of the top-level category (optional - when requested in front matter)</td>\n  </tr>\n  <tr>\n    <td>url</td>\n    <td>URL to the category page</td>\n  </tr>\n  <tr>\n    <td>count</td>\n    <td>Number of products in this category</td>\n  </tr>\n  <tr>\n\t\t<td><b>children</b></td>\n\t\t<td>List of child categories for this top-level category (<i>children properties</i> below)</td>\n  </tr>\n  <tr>\n\t\t<td><i>id</i></td>\n    <td>ID of the child category</td>\n  </tr>\n  <tr>\n\t\t<td><i>name</i></td>\n    <td>Name of the child category</td>\n  </tr>\n    <tr>\n\t\t\t<td><i>description</i></td>\n    <td>Description of the child category (optional - when requested in front matter)</td>\n  </tr>\n  <tr>\n\t\t<td><i>url</i></td>\n    <td>URL of the child category</td>\n  </tr>\n  <tr>\n\t\t<td><i>count</i></td>\n    <td>Number of products in this child category</td>\n  </tr>\n</table>"
                            config:
                              sidebar:
                                token: global object
                          - title: Currency Selector
                            route:
                              path: /currency-selector
                            data:
                              blocks:
                                - type: html
                                  data: <h1>Currency Selector</h1>
                                - type: text
                                  data: "<b>Description:</b> A list of all supported currencies, and the currency that is actively in use in the storefront\n\n<b>Handlebars Expression:</b> `{{currency_selector}}`\n\n<b>Object Properties:</b>\n\n<table>\n  <tr>\n    <th>Property</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>active_currency_id</td>\n    <td>ID of the currency actively in use in the storefront</td>\n  </tr>\n  <tr>\n    <td>active_currency_flag</td>\n    <td>Country flag used to represent the active currency</td>\n  </tr>\n  <tr>\n    <td>active_currency_name</td>\n    <td>Name of the active currency</td>\n  </tr>\n  <tr>\n    <td>active_currency_code</td>\n    <td>Code for the active currency</td>\n  </tr>\n  <tr>\n\t\t<td><b>currencies</b></td>\n    <td>List of all the currencies supported for this storefront (each contains properties listed below)</td>\n  </tr>\n  <tr>\n\t\t<td><i>is_active</i></td>\n    <td>Boolean that indicates whether this currency is active for use in the storefront</td>\n  </tr>\n  <tr>\n\t\t<td><i>switch_url</i></td>\n    <td>The URL to invoke a switch to this currency</td>\n  </tr>\n  <tr>\n\t\t<td><i>id</i></td>\n    <td>ID of the currency</td>\n  </tr>\n  <tr>\n\t\t<td><i>name</i></td>\n    <td>Name of the currency</td>\n  </tr>\n  <tr>\n\t\t<td><i>flag</i></td>\n    <td>Country flag used to visually represent the currency</td>\n  </tr>\n</table>"
                            config:
                              sidebar:
                                token: global object
                          - title: Faceted Search
                            route:
                              path: /faceted-search
                            data:
                              blocks:
                                - type: html
                                  data: <h1>Faceted Search</h1>
                                - type: text
                                  data: "<b>Description:</b> Faceted-search object for searching globally, by category, or by brand\n\n<b>Handlebars Expression:</b> `{{faceted_search}}`\n\n<b>Object Properties:</b>\n\n<table>\n  <tr>\n    <th>Property</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>facets</td>\n    <td>List of all search facets available</td>\n  </tr>\n  <tr>\n\t\t<td><b>selected</b></td>\n\t\t<td>Container for the selected search facets (selected facets contain properties below</i>)</td>\n  </tr>\n  <tr>\n    <td><i>remove_all_url<i></td>\n    <td>URL to remove all selected search restrictions</td>\n  </tr>\n  <tr>\n    <td><i>items<i></td>\n    <td>Currently enabled search facets</td>\n  </tr>\n</table>"
                            config:
                              sidebar:
                                token: global object
                          - title: Featured Products
                            route:
                              path: /featured-products
                            data:
                              blocks:
                                - type: html
                                  data: <h1>Featured Products</h1>
                                - type: text
                                  data: >-
                                    <b>Description:</b> A list of all the
                                    featured products for the BigCommerce
                                    storefront


                                    <b>Handlebars Expression:</b>
                                    `{{products.featured}}`


                                    <b>Object Properties:</b> References the
                                    product card model.


                                    <b> Usage Example: </b>


                                    From Stencil's base Cornerstone theme, the
                                    example below displays the global
                                    `{{products.featured}}` object on the
                                    `<theme-name>/templates/pages/home.html`
                                    page template.


                                    First, to declare the object, the following
                                    front mattermust be placed at the top of
                                    this template. This particular declaration
                                    also limits the number of featured products
                                    to be displayed:


                                    ```

                                    ---

                                    products:
                                        [...]
                                        featured:
                                            limit: {{theme_settings.homepage_featured_products_count}}
                                    ---

                                    ```

                                    The `homepage_featured_products_count` limit
                                    is one of two relevant variables defined in
                                    Cornerstone's `config.json` file, here:


                                    ```
                                      "settings": {
                                        [...]
                                        "homepage_featured_products_count": 8,
                                        [...]
                                        "homepage_featured_products_column_count": 4,
                                        [...]    
                                    ```


                                    In the body of the `home.html` template, the
                                    following Handlebars conditional statement
                                    displays the featured-products object
                                    declared above:


                                    ```
                                        {{#if products.featured}}
                                            {{> components/products/featured products=products.featured columns=theme_settings.homepage_featured_products_column_count}}
                                        {{/if}}
                                    ```


                                    This statement formats the featured-products
                                    display according to the
                                    `homepage_featured_products_column_count`
                                    variable, also defined in the `config.json`
                                    excerpt above.
                            config:
                              sidebar:
                                token: global object
                          - title: Footer
                            route:
                              path: /footer
                            data:
                              blocks:
                                - type: html
                                  data: <h1>Footer</h1>
                                - type: text
                                  data: >-
                                    <b>Description:</b>The footer content for
                                    each storefront page


                                    <b>Handlebars Expression:</b> `{{footer}}`


                                    <b>Object Properties:</b>


                                    <table>
                                      <tr>
                                        <th>Property</th>
                                        <th>Description</th>
                                      </tr>
                                      <tr>
                                        <td>sitemap_url</td>
                                        <td>The URL to the sitemap, based on store’s SEO setting</td>
                                      </tr>
                                      <tr>
                                        <td>scripts</td>
                                        <td>Scripts to be loaded after the HTML has loaded; includes performance metrics</td>
                                      </tr>
                                    </table>
                            config:
                              sidebar:
                                token: global object
                          - title: Carousel
                            route:
                              path: /carousel
                            data:
                              blocks:
                                - type: html
                                  data: <h1>Carousel</h1>
                                - type: text
                                  data: "<b>Description:</b> A list of images, text, and style assets for a storefront’s image slide show\n\n<b>Handlebars Expression: </b> `{{carousel}}`\n\n<b>Object Properties:</b>\n\n<table>\n  <tr>\n    <th>Property</th>\n    <th>Description</th>\n  </tr>\n  \n  <tr>\n    <td>swap_frequency</td>\n    <td>Indicates how often (in seconds) the slides will change; the value must be between 1 and 90,000 seconds</td>\n  </tr>\n  \n  <tr>\n\t\t<td><b>slides</b></td>\n\t\t<td>Object containing properties for each slide in the slideshow (<i>each slide contains the below properties: image, alt_text, url, heading, heading_color, text, text_color, button_text, button_text_color</i>)</td>\n  </tr>\n  <tr>\n    <td><i>image</i></td>\n    <td>Path to the image file used on this slide</td>\n  </tr>\n  <tr>\n\t\t<td><i>alt_text</i></td>\n    <td>Alt text for the image</td>\n  </tr>\n  <tr>\n\t\t<td><i>url</i></td>\n    <td>URL to which the image will link</td>\n  </tr>\n  <tr>\n    <td>heading</td>\n    <td>Heading message defined by the merchant</td>\n  </tr>\n  <tr>\n\t\t<td><i>heading_color</i></td>\n    <td>Color of the heading text</td>\n  </tr>\n  <tr>\n\t\t<td><i>text</i></td>\n    <td>Subheading defined by the merchant</td>\n  </tr>\n  <tr>\n\t\t<td><i>text_color</i></td>\n    <td>Color of the subheading text</td>\n  </tr>\n  <tr>\n\t\t<td><i>button_text</i></td>\n    <td>Text displayed on a call-to-action button defined by the merchant</td>\n  </tr>\n  <tr>\n\t\t<td><i>button_text_color</i></td>\n    <td>Color of the button</td>\n  </tr>\n</table>"
                            config:
                              sidebar:
                                token: global object
                          - title: HTML Head
                            route:
                              path: /html-head
                            data:
                              blocks:
                                - type: text
                                  data: >-
                                    <b>Description:</b> Data to be included in
                                    the HTML `<head>` element<br>


                                    <b>Handlebars Expression:</b>`{{head}}`


                                    <b>Object Properties:</b>


                                    <table>
                                      <tr>
                                        <th>Property</th>
                                        <th>Description</th>
                                      </tr>
                                      <tr>
                                        <td>character_set</td>
                                        <td>The character set to specify</td>
                                      </tr>
                                      <tr>
                                        <td>meta_tags</td>
                                        <td>Meta tags to improve store SEO</td>
                                      </tr>
                                      <tr>
                                        <td>title</td>
                                        <td>Current page’s title</td>
                                      </tr>
                                      <tr>
                                        <td>stylesheets</td>
                                        <td>CSS files to be included</td>
                                      </tr>
                                      <tr>
                                        <td>scripts</td>
                                        <td>Scripts to be loaded in the &lt;head&gt; tag</td>
                                      </tr>
                                      <tr>
                                        <td>favicon</td>
                                        <td>The store’s favicon (Favorite icon)</td>
                                      </tr>
                                      <tr>
                                        <td>rsslinks</td>
                                        <td>RSS feeds to improve SEO</td>
                                      </tr>
                                    </table>
                            config:
                              sidebar:
                                token: global object
                          - title: Is_ajax
                            route:
                              path: /is-ajax
                            data:
                              blocks:
                                - type: html
                                  data: <h1>Is_Ajax</h1>
                                - type: text
                                  data: >-
                                    <b>Description:</b> Boolean; returns `true`
                                    if the current executing request is an Ajax
                                    request


                                    <b>Handlebars Expression:</b> `{{is_ajax}}`


                                    No properties available for this object.
                            config:
                              sidebar:
                                token: global object
                          - title: Login
                            route:
                              path: /login
                            data:
                              blocks:
                                - type: html
                                  data: <h1>Login</h1>
                                - type: text
                                  data: >-
                                    <b>Description: </b>Object to handle
                                    customer login details<br>


                                    <b>Handlebars Expression:</b>
                                    `{{forms.login}}`


                                    <b>Object Properties:</b>


                                    <table>
                                      <tr>
                                        <th>Property</th>
                                        <th>Description</th>
                                      </tr>
                                      <tr>
                                        <td>came_from_checkout</td>
                                        <td>Boolean indicating whether the customer submitted login information at checkout</td>
                                      </tr>
                                      <tr>
                                        <td>error</td>
                                        <td>BC-defined message to display when customer’s login fails</td>
                                      </tr>
                                    </table>
                            config:
                              sidebar:
                                token: global object
                          - title: 'New Products '
                            route:
                              path: /new-products
                            data:
                              blocks:
                                - type: html
                                  data: <h1>New Products</h1>
                                - type: text
                                  data: >-
                                    <b>Description:</b> A list of new products
                                    for the BigCommerce storefront


                                    <b>Handlebars
                                    Expression:</b>`{{products.new}}`


                                    <b>Object Properties:</b> References the
                                    product card model.


                                    <b> Usage Example:</b>


                                    To access the global `{{products.new}}`
                                    object on your page, you must first use
                                    front matter to declare the object at the
                                    top of your page template. For example, you
                                    would place this front-matter declaration at
                                    the top of your template file:


                                    ```

                                    ---

                                    products:
                                        new:
                                    ---

                                    ```
                            config:
                              sidebar:
                                token: global object
                          - title: 'Page Content '
                            route:
                              path: /page-content
                            data:
                              blocks:
                                - type: html
                                  data: <h1>Page Content</h1>
                                - type: text
                                  data: "<b>Description:</b> Defines elements of merchant’s store page\n\n<b>Handlebars Expression:</b> `{{page}}`\n\n<b>Object Properties:</b>\n\n<table>\n  <tr>\n    <th>Property</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>title</td>\n    <td>Page title, to be used as the HTML title tag</td>\n  </tr>\n  <tr>\n    <td>description</td>\n    <td>Description for the page, to be used as the HTML `meta > description` tag</td>\n  </tr>\n  <tr>\n    <td>content</td>\n    <td >HTML content of the page</td>\n  </tr>\n  <tr>\n\t\t<td><b>sub_pages</b> (each subpage will have the properties below: <i>title</i>, <i>url</i>)</td>\n    <td>Array of child pages</td>\n  </tr>\n  <tr>\n\t\t<td><i>title</i></td>\n    <td>Title of this child page</td>\n  </tr>\n  <tr>\n\t\t<td><i>url</i></td>\n    <td>URL of this child page</td>\n  </tr>\n</table>"
                            config:
                              sidebar:
                                token: global object
                          - title: Pages
                            route:
                              path: /pages
                            data:
                              blocks:
                                - type: html
                                  data: <h1>Pages</h1>
                                - type: text
                                  data: "<b>Description:</b> A list of all web content pages for the BigCommerce storefront<br>\n\n<b>Handlebars Expression:</b> `{{pages}}`\n\n<b>Object Properties:</b>\n\n<table>\n  <tr>\n    <th>Property</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>name</td>\n    <td>Name of the page</td>\n  </tr>\n  <tr>\n    <td>url</td>\n    <td>URL of the page</td>\n  </tr>\n  <tr>\n\t\t<td><b>children</b></td>\n\t\t<td>List of child pages for this page (each child page will have a <i>name</i> and <i>url</i>)</td>\n  </tr>\n  <tr>\n\t\t<td><i>name</i></td>\n    <td>Name of the child page</td>\n  </tr>\n  <tr>\n\t\t<td><i>url</i></td>\n    <td>URL of the child page</td>\n  </tr>\n</table>"
                            config:
                              sidebar:
                                token: global object
                          - title: Page Type Property
                            route:
                              path: /page-type-property
                            data:
                              blocks:
                                - type: html
                                  data: <h1>Page Type Property</h1>
                                - type: text
                                  data: >+
                                    <b>Description:</b> A string representing
                                    the type of page currently displayed. <br>


                                    <b>Handlebars Expression:</b>
                                    `{{page_type}}`


                                    <b>Values:</b> The four most-commonly-used
                                    values for `{{page_type}}` are:


                                    * default (for a home page)

                                    * product (for a product page)

                                    * category (for a category page)

                                    * page (for a Web [static] page)


                                    All possible values for `{{page_type}}` are:


                                    | account | shippingaddressform |
                                    account_new_return | 

                                    |---|---|---|

                                    | account_addressbook | account_downloaditem
                                    | account_inbox | 

                                    | editaccount | account_orderstatus |
                                    account_orders | 

                                    | invoice_print | account_order |
                                    account_recentitems | 

                                    | account_saved_return | account_returns |
                                    wishlists | 

                                    | add-wishlist | wishlist |
                                    createaccount_thanks | 

                                    | createaccount | forgotpassword | login | 

                                    | getnewpassword | blog | blog_post | 

                                    | brand | brands | cart | 

                                    | category | compare | 403 | 

                                    | 404 | error | giftcertificates_balance | 

                                    | giftcertificates | giftcertificates_redeem
                                    | default | 

                                    | page | page_contact_form | product | 

                                    | rss | search | sitemap | 

                                    | newsletter_subscribe | unsubscribe |
                                    hibernation | 

                                    | maintenance |

                            config:
                              sidebar:
                                token: global object
                          - title: Pagination
                            route:
                              path: /pagination
                            data:
                              blocks:
                                - type: html
                                  data: <h1>Pagination</h1>
                                - type: text
                                  data: "<b>Description:</b> Defines pagination of storefront pages\n\n<b>Handlebars Expression:</b> `{{pagination}}`\n\n<b>Object Properties:</b>\n\n<table>\n  <tr>\n    <th>Property</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>next</td>\n    <td>Link to next page, if any</td>\n  </tr>\n  <tr>\n    <td>previous</td>\n    <td>Link to previous page, if any</td>\n  </tr>\n  <tr>\n    <td>sort</td>\n    <td>Field to sort by</td>\n  </tr>\n  <tr>\n    <td>current</td>\n    <td>Number representing which page (in the current collection) the customer is viewing</td>\n  </tr>\n  <tr>\n    <td>total</td>\n    <td>Total number of results, across all pages</td>\n  </tr>\n  <tr>\n\t\t<td><b>links</b></td>\n    <td>Array of pages that surround the current page; displayed as a set of links, dynamically sized based on the current page number (each link in the array contains the below properties: <i>url, number</i>)</td>\n  </tr>\n  <tr>\n\t\t<td><i>url</i></td>\n    <td>URL to this page of results</td>\n  </tr>\n  <tr>\n\t\t<td><i>number</i></td>\n    <td>The page number of this link, based on an index starting at 1</td>\n  </tr>\n</table>"
                            config:
                              sidebar:
                                token: global object
                          - title: 'Search '
                            route:
                              path: /search
                            data:
                              blocks:
                                - type: html
                                  data: <h1>Search</h1>
                                - type: text
                                  data: "<b>Description:</b> Defines search parameters for the merchant’s site<br>\n\n<b>Handlebars Expression:</b> `{{forms.search}}`\n\n<b>Object Properties:</b>\n\n<table>\n  <tr>\n    <th>Property</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>query</td>\n    <td>Active search query, if available</td>\n  </tr>\n\n  <tr>\n    <td>section</td>\n    <td>Active search-results section: either content or product</td>\n  </tr>\n  \n  <tr>\n    <td>content_url</td>\n    <td>URL to the content section</td>\n  </tr>\n  \n  <tr>\n    <td>product_url</td>\n    <td>URL to the product section</td>\n  </tr>\n  \n  \n  <tr>\n    <td>name</td>\n    <td>Brand name</td>\n  </tr>\n  <tr>\n    <td>suggested_query</td>\n    <td>An alternative query – related to the current query – that can be offered to substitute for misspelled entries</td>\n  </tr>\n  <tr>\n    <td>has_suggestions</td>\n    <td>Boolean – true if there is at least one of brand results, category results, or a (non-null) suggested_query</td>\n  </tr>\n  <tr>\n    <td>brand_results</td>\n    <td>Array of brands that match the search query; default sorting is by brand id, from lowest to highest</td>\n  </tr>\n  <tr>\n    <td>url</td>\n    <td>URL of the brand</td>\n  </tr>\n  <tr>\n    <td>name</td>\n    <td>Displayed name for the brand</td>\n  </tr>\n  <tr>\n    <td>category_results</td>\n    <td>An array of category paths matching the search query; used to populate category suggestions</td>\n  </tr>\n  <tr>\n    <td>url</td>\n    <td>URL of the category</td>\n  </tr>\n  <tr>\n    <td>name</td>\n    <td>Displayed name for the category</td>\n  </tr>\n  <tr>\n    <td>values</td>\n    <td>Values of the submitted search form</td>\n  </tr>\n  <tr>\n    <td>brand</td>\n    <td>Any brand ID that customer has selected from drop-down list</td>\n  </tr>\n  <tr>\n    <td>price_from</td>\n    <td>Any minimum price the customer has specified</td>\n  </tr>\n  <tr>\n    <td>price_to</td>\n    <td>Any maximum price the customer has specified</td>\n  </tr>\n  <tr>\n    <td>featured_products</td>\n    <td>Whether customer has chosen to view featured products: null = no preference; 1 = only featured products; 2 = only non-featured products</td>\n  </tr>\n  <tr>\n    <td>free_shipping</td>\n    <td>Value indicating customer’s preference for free shipping within search results: null = no preference; 1 = free shipping only; 2 = paid shipping only</td>\n  </tr>\n  <tr>\n    <td>result_count</td>\n    <td>Combined number of returned results for product and content search</td>\n  </tr>\n  <tr>\n    <td>category_options</td>\n    <td>Array of options to present to customer as search-by-category fields</td>\n  </tr>\n  <tr>\n    <td>id</td>\n    <td>Category ID</td>\n  </tr>\n  <tr>\n    <td>name</td>\n    <td>Displayed name of the category</td>\n  </tr>\n  <tr>\n    <td>state</td>\n    <td>If category contains children, and customer selects a child category: Whether that category’s display will default to closed (collapsed) or opened (expanded)</td>\n  </tr>\n  <tr>\n    <td>children</td>\n    <td>Array of objects representing a child category; recursively replicates the structure of its parent</td>\n  </tr>\n  <tr>\n    <td>content_results</td>\n    <td>Search results across blog posts and storefront pages (not products or categories)</td>\n  </tr>\n  <tr>\n    <td>title</td>\n    <td>Title of the result (title embedded in blog post or page)</td>\n  </tr>\n  <tr>\n    <td>content</td>\n    <td>Summary of text from the blog post or page (first 200 characters)</td>\n  </tr>\n  <tr>\n    <td>url</td>\n    <td>URL to the result</td>\n  </tr>\n  <tr>\n    <td>type</td>\n    <td>Either post (for blog posts) or page (for storefront pages)</td>\n  </tr>\n  <tr>\n\t\t<td><b>product_results</b></td>\n    <td>Results of customer’s last search by product (each result contains the below properties)</td>\n  </tr>\n  <tr>\n\t\t<td><i>products</i></td>\n    <td>List of search results for a product; points to <a href=\"/stencil-docs/stencil-object-model-reference/stencil-objects/common-objects/common-product-card-model\">product card model</a></td>\n  </tr>\n  <tr>\n    <td><i>show_compare</i></td>\n    <td>Boolean corresponding to merchant’s control-panel selection whether or not to enable product comparisons </td>\n  </tr>\n  <tr>\n    <td><i>faceted_search_enabled</i></td>\n    <td>Boolean that defines whether product-filtering search is enabled for the store</td>\n  </tr>\n  <tr>\n    <td><i>facets</i></td>\n    <td>All available search filters</td>\n  </tr>\n  <tr>\n    <td><i>pagination</i></td>\n    <td>References pagination model</td>\n  </tr>\n  <tr>\n    <td><i>selected</i></td>\n    <td>Currently selected filters</td>\n  </tr>\n</table>\n"
                              children: []
                            config:
                              sidebar:
                                token: global object
                          - title: Settings
                            route:
                              path: /settings
                            data:
                              blocks:
                                - type: html
                                  data: <h1>Settings</h1>
                                - type: text
                                  data: "<b>Description:</b> Common settings shared across every BigCommerce storefront<br>\n\n<b>Handlebars Expression:</b> `{{settings}}`\n\n<b>Object Properties:</b>\n\n<table>\n  <tr>\n    <th>Property</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>account_creation_enabled</td>\n    <td>Site-wide boolean value that indicates whether to allow customers to create accounts</td>\n  </tr>\n  <tr>\n    <td>show_product_rating</td>\n    <td>Site-wide boolean value that indicates whether to display product ratings (in numeric or star format) to visitors</td>\n  </tr>\n  <tr>\n    <td>show_product_reviews</td>\n    <td>Site-wide boolean value that indicates whether to display full-text product reviews to visitors</td>\n  </tr>\n  <tr>\n    <td>show_newsletter_box</td>\n    <td>Site-wide boolean value that indicates whether to display a mailing-list invite to visitors</td>\n  </tr>\n  <tr>\n    <td> gift_certificates_enabled</td>\n    <td>Site-wide boolean value that indicates whether to enable the gift certificate system for this store</td>\n  </tr>\n  \n  <tr>\n    <td> blog_enabled</td>\n    <td>Site-wide boolean value that indicates whether the blog is visible for this store</td>\n  </tr>\n  \n  <tr>\n    <td>show_wishlist</td>\n    <td>Site-wide boolean value that indicates whether to allow customers to create wishlists</td>\n  </tr>\n  <tr>\n    <td>base_url</td>\n    <td>The normal shop URL</td>\n  </tr>\n  <tr>\n    <td>client_ip_address</td>\n    <td>IP address of the customer browsing the store</td>\n  </tr>\n  <tr>\n    <td>secure_base_url</td>\n    <td>The SSL-enabled, secure, shop URL</td>\n  </tr>\n  <tr>\n    <td>address</td>\n    <td>Store’s complete physical address, as entered by merchant in the Store Profile</td>\n  </tr>\n  <tr>\n    <td>store_name</td>\n    <td>Name of the BigCommerce store</td>\n  </tr>\n  \n  <tr>\n    <td>store_logo</td>\n    <td>The store’s logo</td>\n  </tr>\n  <tr>\n    <td>title</span></td>\n    <td>Title for the logo - the text configured in the control panel under <code>Storefront Design</code> > <code>Design Options</code> > <code>Logo</code></td>\n  </tr>\n  <tr>\n    <td>Image</span></td>\n    <td>Optional image file, as a Stencil image object</td>\n  </tr>\n\t\n  <tr>\n    <td>privacy_cookie</td>\n    <td>If enabled, a string containing merchant-customizable text for (European Union&ndash;required) cookie-setting notification; if disabled, a boolean with a value of <code>false</code></td>\n  </tr>\n\t\n  <tr>\n    <td>urls</td>\n    <td>Global URLs that the template can access – for example, the template could link to the cart page using <code>{{urls.cart}}</code></td>\n  </tr>\n  <tr>\n    <td>home</span></td>\n    <td>Store’s home page</td>\n  </tr>\n  <tr>\n    <td>account</td>\n    <td>Collection of (customer and storefront) account-related URLs:</td>\n  </tr>\n  <tr>\n    <td>index</td>\n    <td>Account index page</td>\n  </tr>\n  <tr>\n    <td>orders</td>\n    <td>Collection of orders-related URLs:</td>\n  </tr>\n  <tr>\n    <td>all</td>\n    <td>List of all orders</td>\n  </tr>\n  <tr>\n    <td>save_new_return</td>\n    <td>URL to submit a New Return form</td>\n  </tr>\n  <tr>\n    <td>update_action</td>\n    <td>URL to submit an Edit Account form</td>\n  </tr>\n  <tr>\n    <td>returns</td>\n    <td>List of returns</td>\n  </tr>\n  <tr>\n    <td>addresses</td>\n    <td>List of addresses; default sorting is by address id, from lowest to highest</td>\n  </tr>\n  <tr>\n    <td>inbox</td>\n    <td>List of messages in customer’s inbox</td>\n  </tr>\n  <tr>\n    <td>send_message</td>\n    <td>URL to submit a message to the merchant</td>\n  </tr>\n  <tr>\n    <td>add_address</td>\n    <td>Link to Add Address form</td>\n  </tr>\n  <tr>\n    <td>wishlists</td>\n    <td>Collection of wishlist-related URLs:</td>\n  </tr>\n  <tr>\n    <td>add</td>\n    <td>URL to the Add Wishlist form</td>\n  </tr>\n  <tr>\n    <td>edit</td>\n    <td>URL to the Edit Wishlist form</td>\n  </tr>\n  <tr>\n    <td>delete</td>\n    <td>URL to delete a wishlist</td>\n  </tr>\n  <tr>\n    <td>all</td>\n    <td>URL to view all wishlists</td>\n  </tr>\n  <tr>\n    <td>details</td>\n    <td>URL to the Edit Account form</td>\n  </tr>\n  <tr>\n    <td>recent_items</td>\n    <td>URL to a list of recently viewed items</td>\n  </tr>\n  <tr>\n    <td>brands</td>\n    <td>URL to view all brands; default sorting is by brand id, from lowest to highest</td>\n  </tr>\n  <tr>\n\t</table>\n\t<table>\n\t<td><b>gift_certificate</b></td>\n\t<td>Collection of gift-certificate–related URLs (<i>purchase, redeem, and balance</i>)</td>\n  </tr>\n  <tr>\n\t<td><i>purchase</i></td>\n\t<td><i>URL to a form for purchasing a gift certificate</i></td>\n  </tr>\n  <tr>\n\t<td><i>redeem</i></td>\n\t<td><i>URL to view redemption information</i></td>\n  </tr>\n  <tr>\n\t<td><i>balance</i></td>\n    <td>URL to check the balance of a gift certificate</td>\n  </tr>\n\t</table>\n\t<table>\n  <tr>\n    <td>auth</td>\n    <td>Collection of authorization-related URLs:</td>\n  </tr>\n  <tr>\n    <td>login</td>\n    <td>URL to the login form</td>\n  </tr>\n  <tr>\n    <td>check_login</td>\n    <td>URL to which to submit the login form</td>\n  </tr>\n  <tr>\n    <td>create_account</td>\n    <td>URL to the Create Account form page</td>\n  </tr>\n  <tr>\n    <td>save_new_account</td>\n    <td>URL to which to submit the Create Account form</td>\n  </tr>\n  <tr>\n    <td>forgot_password</td>\n    <td>URL to the Forgot Password form</td>\n  </tr>\n  <tr>\n    <td>send_password_email</td>\n    <td>Submission URL for the Forgot Password form</td>\n  </tr>\n  <tr>\n    <td>save_new_password</td>\n    <td>Submission URL for saving a new password</td>\n  </tr>\n  <tr>\n    <td>logout</td>\n    <td>URL for customer to log out of their account</td>\n  </tr>\n  <tr>\n    <td>product</td>\n    <td>Collection of product-related URLs</td>\n  </tr>\n  <tr>\n    <td>post_review</td>\n    <td>URL to submit a Write Review form </td>\n  </tr>\n  <tr>\n    <td>cart</td>\n    <td>URL to the cart page</td>\n  </tr>\n  <tr>\n    <td>checkout</td>\n    <td>Collection of checkout related URLs</td>\n  </tr>\n  <tr>\n    <td>single_address</td>\n    <td>URL for the customer to check out with a single shipping address</td>\n  </tr>\n  <tr>\n    <td>multiple_address</td>\n    <td>URL for the customer to check out with multiple shipping addresses </td>\n  </tr>\n  <tr>\n    <td>rss</td>\n    <td>Collection of RSS-related URLs:</td>\n  </tr>\n  <tr>\n    <td>products</td>\n    <td>Collection of product-feed–related URLs:</td>\n  </tr>\n  <tr>\n    <td>new</td>\n    <td>RSS feed of new products</td>\n  </tr>\n  <tr>\n    <td>new_atom</td>\n    <td>RSS feed of new products, in Atom format</td>\n  </tr>\n  <tr>\n    <td>popular</td>\n    <td>RSS feed of popular products</td>\n  </tr>\n  <tr>\n    <td>popular_atom</td>\n    <td>RSS feed of popular products, in Atom format</td>\n  </tr>\n  <tr>\n    <td>featured</td>\n    <td>RSS feed of featured products</td>\n  </tr>\n  <tr>\n    <td>featured_atom</td>\n    <td>RSS feed of featured products, in Atom format</td>\n  </tr>\n  <tr>\n    <td>search</td>\n    <td>RSS feed of products matching the active search query</td>\n  </tr>\n  <tr>\n    <td>search_atom</td>\n    <td>RSS feed of products matching the active search query, in Atom format</td>\n  </tr>\n  <tr>\n    <td><span class=\"indent2\"> blog</td>\n    <td>RSS feed of recent blog posts</td>\n  </tr>\n  <tr>\n    <td>blog_atom</td>\n    <td>RSS feed of recent blog posts, in Atom format</td>\n  </tr>\n  <tr>\n    <td>contact_us_submit</td>\n    <td>URL to submit the Contact Us form</td>\n  </tr>\n  <tr>\n    <td>search</td>\n    <td>URL to submit a search request</td>\n  </tr>\n  <tr>\n    <td>compare</td>\n    <td>A string String containing the URL to the products comparison page</td>\n  </tr>\n  <tr>\n    <td>sitemap</td>\n    <td>URL to the sitemap</td>\n  </tr>\n  <tr>\n    <td>subscribe</td>\n    <td>Collection of subscription-related URLs</td>\n  </tr>\n  <tr>\n    <td>action</td>\n    <td>URL to which the the newsletter subscription will be submitted</td>\n  </tr>\n  <tr>\n    <td>money</td>\n    <td>List of child items that define the store’s default currency formatting</td>\n  </tr>\n  <tr>\n    <td>currency_token</td>\n    <td>Symbol for the currency</td>\n  </tr>\n  <tr>\n    <td>currency_location</td>\n    <td>Whether currency symbol appears at left or right of the quantity</td>\n  </tr>\n  <tr>\n    <td>decimal_token</td>\n    <td>Symbol for decimal separator</td>\n  </tr>\n  <tr>\n    <td>decimal_places</td>\n    <td>Number of decimal places to display</td>\n  </tr>\n  <tr>\n    <td>thousands_token</td>\n    <td>Symbol for thousands separator</td>\n  </tr>\n  <tr>\n    <td>returns_enabled</td>\n    <td>Boolean that indicates whether the control-panel setting for the returns system is enabled</td>\n  </tr>\n  <tr>\n    <td>tax_label</td>\n    <td>Defines the Tax Label (VAT, Sales Tax, etc.) that a merchant can set in the control panel’s Settings > Tax page for display to customers</td>\n  </tr>\n  \n  <tr>\n    <td>add_this</td>\n    <td>Object that defines links for the AddThis social sharing component</td>\n  </tr>  \n  <tr>\n    <td>buttons</td>\n    <td>Array of buttons to display for AddThis social sharing</td>\n  </tr>\n  <tr>\n    <td>service</td>\n    <td>String containing the name of this button's social-media service (<code>facebook</code>, <code>email</code>, <code>print</code>, <code>twitter</code>, <code>linkedin</code>, <code>google</code>, etc.)</td>\n  </tr>\n  <tr>\n    <td>annotation</td>\n    <td>String containing HTML attributes associated with this button</td>\n  </tr>\n    \n  <tr>\n    <td>maintenance</td>\n    <td>Object that manages information about the store when in maintenance (offline) mode</td>\n  </tr>  \n  <tr>\n    <td>header</td>\n    <td>If store is in maintenance mode, string containing header text for the \"Down for Maintenance\" window displayed to visitors; otherwise, <code>null</code></td>\n  </tr>\n  <tr>\n    <td>message</td>\n    <td>If store is in maintenance mode, string containing merchant-customizable body text (and optionally, HTML) for the \"Down for Maintenance\" window displayed to visitors; otherwise, <code>null</code></td>\n  </tr>\n  <tr>\n    <td>notice</td>\n    <td>If store is in maintenance mode, one of three strings identifying the store's status, and generating a corresponding text notice to merchants about how to proceed: <code>AdminPrelaunchNotice</code> for preview stores, <code>AdminMaintenanceNotice</code> for active stores taken down for maintenance, or <code>AdminHibernationModeNotice</code> for deactivated stores; otherwise, <code>null</code>\n  </tr>\n    \n  <tr>\n    <td>phone_number</td>\n    <td>The contact phone number for the store</td>\n  </tr>  \n\n  <tr>\n    <td>rss_item_limit</td>\n    <td>An integer that sets a limit on the number of RSS items to display</td>\n  </tr>\n\n  <tr>\n    <td>password_requirements</td>\n    <td>Collection of properties representing BigCommerce requirements for customer-account passwords:</td>\n  </tr>\n  <tr>\n    <td>alpha</td>\n    <td>Regular expression representing required/acceptable alphabetic characters</td>\n  </tr>\n  <tr>\n    <td>numeric</td>\n    <td>Regular expression representing required/acceptable numeric characters</td>\n  </tr>\n  <tr>\n    <td>minlength</td>\n    <td>Integer representing minimum acceptable password length</td>\n  </tr>\n  <tr>\n    <td>error</td>\n    <td>String that passes a standard error message for noncompliant passwords</td>\n  </tr>\n  \n  <tr>\n    <td>measurements</td>\n    <td>Collection of units-of-measure definitions, to be used when displaying product details:</td>\n  </tr>\n  <tr>\n    <td>length</span></td>\n    <td>Units of measure for product length</td>\n  </tr>\n  <tr>\n    <td>weight</span></td>\n    <td>Units of measure for product weight</td>\n  </tr>\n\n  <tr>\n    <td>[Time and date settings]</td>\n    <td>[The four settings below are configured in the control panel under <NOBR><span class=\"inline-code\">Store Setup> <code>Store Settings</code> > <code>Language & Date</code> > <code>Date Settings</code>. Date formats follow <a href=\"http://us3.php.net/manual/en/function.date.php\">php conventions.</a></td>\n  </tr>\n\n  <tr>\n    <td>store_time_zone</td>\n\t\t<td>Store's time zone, as selected in the control panel's <code>Your Timezone</code> drop-down list</td>\n  </tr>\n\n  <tr>\n    <td>store_dst_correction</td>\n    <td>Whether or not this time zone observes Daylight Saving Time (boolean), as set by the control panel's <code>Enable DST Correction</code> check box</td>\n  </tr>\n\n  <tr>\n    <td>display_date_format</td>\n    <td>Brief display format/pattern for dates, as configured in the control panel's <code>Display Date Format</code> field</td>\n  </tr>\n\n  <tr>\n    <td>extended_display_date_format</td>\n    <td>Extended display format/pattern for dates, as configured in the control panel's <code>Extended Display Date Format</code> field</td>\n  </tr>   \n</table>"
                              children: []
                            config:
                              sidebar:
                                token: global object
                          - title: Sitemap
                            route:
                              path: /sitemap
                            data:
                              children: []
                              blocks:
                                - type: html
                                  data: <h1>Sitemap</h1>
                                - type: text
                                  data: "<b>Description:</b>A list of all sitemap properties for this BigCommerce storefront: pages, categories, and brands.<br>\n\n<b>Handlebars Expression:</b> `{{sitemap}}`\n\n<b>Object Properties:</b>\n\n<table>\n  <tr>\n    <td>Property</td>\n    <td>Description</td>\n  </tr>\n  <tr>\n    <td>subsection_url</td>\n    <td>URL to subsection content (pages, categories, brands) of the sitemap</td>\n  </tr>\n  <tr>\n    <td>label</td>\n    <td>Subsection title (pages, categories, brands)</td>\n  </tr>\n  <tr>\n\t\t<td><b>body</b></td>\n    <td>List of all sitemap subsections (url, label, children)</td>\n  </tr>\n  <tr>\n\t\t<td><i>url</i></td>\n\t\t<td><i>URL to the page, category, or brand</i></td>\n  </tr>\n  <tr>\n\t\t<td><i>label</i></td>\n    <td>Label of the page, category, or brand</td>\n  </tr>\n  <tr>\n\t\t<td><i>children</i></td>\n    <td>Nested list of children within pages or categories; will be null for brands</td>\n  </tr>\n  <tr>\n\t\t<td><i>url</i></td>\n    <td>URL to the child page or category</td>\n  </tr>\n  <tr>\n\t\t<td><i>label</i></td>\n    <td>Label for the child page or category</td>\n  </tr>\n</table>"
                            config:
                              sidebar:
                                token: global object
                          - title: Social Links
                            route:
                              path: /social-links
                            data:
                              children: []
                              blocks:
                                - type: html
                                  data: <h1>Social Links</h1>
                                - type: text
                                  data: >-
                                    <b>Description:</b> Array of all
                                    social-media site links for the
                                    storefront<br>


                                    <b>Handlebars Expression:</b>
                                    `{{social_media}}`


                                    <b>Object Properties:</b><br><br>


                                    <table>
                                      <tr>
                                        <th>Property</th>
                                        <th>Description</th>
                                      </tr>
                                      <tr>
                                        <td>name</td>
                                        <td>Internal name of this social-media platform (e.g., "googleplus")</td>
                                      </tr>
                                      <tr>
                                        <td>url</td>
                                        <td>URL to point to, set by merchant in control panel (https://www.facebook.com/BigCommerce, etc.)</td>
                                      </tr>
                                      <tr>
                                        <td>position</td>
                                        <td>Display sort order for this platform within the social-media list</td>
                                      </tr>
                                      <tr>
                                        <td>display_name</td>
                                        <td>Displayed/formatted name of this social-media platform (e.g., “Google+”) </td>
                                      </tr>
                                    </table>
                            config:
                              sidebar:
                                token: global object
                          - title: Template Property
                            route:
                              path: /template-property
                            data:
                              blocks:
                                - type: html
                                  data: <h1>Template Property</h1>
                                - type: text
                                  data: >-
                                    <b>Description:</b> A string containing the
                                    name of the root template currently being
                                    rendered in the page context. <br>


                                    <b>Handlebars Expression:</b> `{{template}}`


                                    <b>Values:</b> Values will reflect each
                                    theme's specific directory structure.
                                    Possible values include:
                            config:
                              sidebar:
                                token: global object
                          - title: Top Sellers
                            route:
                              path: /top-sellers
                            data:
                              children: []
                              blocks:
                                - type: html
                                  data: <h1>Top Sellers</h1>
                                - type: text
                                  data: >-
                                    <b>Description:</b> Object to display a
                                    sidebar of top-selling products<br>


                                    <b>Handlebars Expression:</b>
                                    `{{products.top_sellers}}`


                                    <b>Object Properties:</b> References the
                                    product card model</a>.


                                    <b> Usage Example: </b> <br>


                                    To access the
                                    global`{{products.top_sellers}}` object on
                                    your page, you must first use front matter
                                    to declare the object at the top of your
                                    page template. For example, you would place
                                    this front-matter declaration at the top of
                                    your template file:


                                    ```

                                    ---

                                    products:
                                        top_sellers:
                                    ---

                                    ```
                            config:
                              sidebar:
                                token: global object
                    - title: Common Objects
                      route:
                        path: /common-objects
                      data:
                        children:
                          - title: Common Objects
                            route:
                              path: /new-subpage
                            data:
                              blocks:
                                - type: html
                                  data: <h1>Common Objects Overview</h1>
                                - type: html
                                  data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#common_common-objects\"></a>Common Objects Overview</li>\n\t</ul>\n</div>"
                                - type: text
                                  data: >
                                    Certain Stencil objects can be accessed
                                    through multiple other Stencil objects. For
                                    example, the image object is exposed through
                                    the Category, Product, Product Options, and
                                    other objects. Its structure is consistent
                                    for all objects/properties that access it. 


                                    This consistent behavior is true for each of
                                    the common objects documented in the
                                    following subsection: 

                                     * [Catalog Price](/stencil-docs/stencil-object-model-reference/stencil-objects/common-objects/catalog-price)
                                     * [Price](/stencil-docs/stencil-object-model-reference/stencil-objects/common-objects/price)
                                     * [Price Range](/stencil-docs/stencil-object-model-reference/stencil-objects/common-objects/price-range)
                                     * [Stencil Image](/stencil-docs/stencil-object-model-reference/stencil-objects/common-objects/stencil-image)
                                     * [Common Product Card Model](/stencil-docs/stencil-object-model-reference/stencil-objects/common-objects/common-product-card-model)
                            config:
                              sidebar:
                                token: Overview
                          - title: 'Catalog Price '
                            route:
                              path: /catalog-price
                            data:
                              blocks:
                                - type: text
                                  data: >-
                                    <b>Description:</b> Exposes catalog price-
                                    and currency-related properties in both raw
                                    numeric, and formatted string,
                                    formats.<br><p></p>


                                    <b>Object Properties:</b> <br><br>


                                    <table>
                                      <tr>
                                        <td><b>Property<b></td>
                                        <td><b>Description<b></td>
                                      </tr>
                                      
                                      <tr>
                                        <td class=""> <A NAME="with_tax"></a> with_tax</td>
                                        <td class="">Price including tax</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1"> formatted</span></td>
                                        <td class="">String representation of the above price, including currency formatting</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1"> value</span></td>
                                        <td class="">Raw numeric value of the above price</td>
                                      </tr>
                                      <tr>
                                        <td class=""> <A NAME="without_tax"></a> without_tax</td>
                                        <td class="">Price excluding tax</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1"> formatted</span></td>
                                        <td class="">String representation of the above price, including currency formatting</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1"> value</span></td>
                                        <td class="">Raw numeric value of the above price</td>
                                      </tr>
                                      
                                      <tr>
                                        <td class="">non_sale_price_with_tax</td>
                                        <td class="">Non-sale price, including tax (can be displayed alongside standard <a href="#with_tax">with_tax</a> during sale events)</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1"> formatted</span></td>
                                        <td class="">String representation of the above price, including currency formatting</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1"> value</span></td>
                                        <td class="">Raw numeric value of the above price</td>
                                      </tr>
                                      <tr>
                                        <td class="">non_sale_price_without_tax</td>
                                        <td class="">Non-sale price, excluding tax (can be displayed alongside standard <a href="#without_tax">without_tax</a> during sale events)</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1"> formatted</span></td>
                                        <td class="">String representation of the above price, including currency formatting</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1"> value</span></td>
                                        <td class="">Raw numeric value of the above price</td>
                                      </tr>
                                     
                                      <tr>
                                        <td class="">rrp_with_tax</td>
                                        <td class="">List (i.e., manufacturer’s suggested retail) price, including tax</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1"> formatted</span></td>
                                        <td class="">String representation of the above price, including currency formatting</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1"> value</span></td>
                                        <td class="">Raw numeric value of the above price</td>
                                      </tr>
                                      <tr>
                                        <td class="">rrp_without_tax</td>
                                        <td class="">List (i.e., suggested retail) price, excluding tax</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1"> formatted</span></td>
                                        <td class="">String representation of the above price, including currency formatting</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1"> value</span></td>
                                        <td class="">Raw numeric value of the above price</td>
                                      </tr>
                                      <tr>
                                        <td class="">saved</td>
                                        <td class="">Amount customer saved, compared to list price </td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1"> formatted</span></td>
                                        <td class="">String representation of the above price, including currency formatting</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1"> value</span></td>
                                        <td class="">Raw numeric value of the above price</td>
                                      </tr>
                                      <tr>
                                        <td class="">tax_label</td>
                                        <td class="">Tax label (VAT, sales tax, etc.) displayed to customers</td>
                                      </tr>
                                      
                                      <tr>
                                        <td class="">price_range</td>
                                        <td class=""><a href="https://stencil.bigcommerce.com/docs/price-range-object">See Price Range Object</a> </td>
                                      </tr>
                                          
                                        <tr>
                                        <td class="">map_price</td>
                                        <td class="">Minimum advertised price</td>
                                      </tr>
                                          
                                      <tr>
                                        <td>formatted</td>
                                        <td>String representation of the above price, including currency formatting</td>
                                      </tr>
                                      <tr>
                                        <td>value</td>
                                        <td>Raw numeric value of the above price</td>
                                      </tr>
                                         
                                    </table>


                                    <b>Available through:</b> 


                                    <b>Object/Property:</b> `{{product.price}}`
                            config:
                              sidebar:
                                token: Common object
                          - title: 'Price '
                            route:
                              path: /price
                            data:
                              blocks:
                                - type: text
                                  data: >-
                                    <b>Description:</b> Exposes price- and
                                    currency-related properties in both raw
                                    numeric, and formatted string, formats.
                                    <br><p></p>


                                    <b>Object Properties:</b> <br><br>


                                    <table>
                                      <tr>
                                        <th>Property</th>
                                        <th>Description</th>
                                      </tr>
                                      <tr>
                                        <td class="">formatted</td>
                                        <td class="">String representation of the price, including currency formatting</td>
                                      </tr>
                                      <tr>
                                        <td class="">value</td>
                                        <td class="">Raw numeric value of the price</td>
                                      </tr>
                                    </table>


                                    <b>Available through:</b> <br><p></p>


                                    <b>Common Object:</b> <a
                                    href="/docs/common-product-card-model">Common
                                    Product Card Model</a> <br><p></p>


                                    <b>Object:</b> `{{category.shop_by_price}}`
                            config:
                              sidebar:
                                token: Common Object
                          - title: 'Price Range '
                            route:
                              path: /price-range
                            data:
                              blocks:
                                - type: text
                                  data: >-
                                    <b>Description: </b>For products with
                                    several variants with different prices, a
                                    price range is available which exposes the
                                    minimum and maximum variant
                                    price.<br><p></p>


                                    <b>Object Properties:</b> <br><br>


                                    <table>
                                      <tr>
                                        <td>Property</td>
                                        <td>Description</td>
                                      </tr>
                                      
                                      <tr>
                                        <td class=""> <A NAME="with_tax"></a> min</td>
                                        <td class="">The minimum variant price for the product, in the form of a <a href="https://stencil.bigcommerce.com/docs/catalog-price-common-object">Catalog Price Common Object</a></td>
                                      </tr>
                                      <tr>
                                        <td class=""> <A NAME="without_tax"></a> max</td>
                                        <td class="">The maximum variant price for the product, in the form of a <a href="https://stencil.bigcommerce.com/docs/catalog-price-common-object">Catalog Price Common Object</a>
                                    </td>
                                      </tr>
                                    </table>


                                    <b>Available through:</b> <br><p></p>


                                    <b>Object/Property:</b> <span
                                    class="inline-code"><a
                                    href="/docs/product-resources#price">
                                    {{product.price}} </a> </span> <br><br>
                            config:
                              sidebar:
                                token: Common Object
                          - title: Stencil Image
                            route:
                              path: /stencil-image
                            data:
                              blocks:
                                - type: text
                                  data: >-
                                    <b>Description:</b> Exposes a URL and an
                                    "alt" string for images used in the Stencil
                                    framework <br><p></p>


                                    <b>Object Properties:</b><br><br>


                                    <table>
                                      <tr>
                                        <td>Property</td>
                                        <td>Description</td>
                                      </tr>
                                      <tr>
                                        <td>data</td>
                                        <td>Internal URL to product or category image</td>
                                      </tr>
                                      <tr>
                                        <td>alt</td>
                                        <td>Corresponding text to display for missing images, accessible screen readers, etc.</td>
                                      </tr>
                                    </table>


                                    <b>Available through:</b> <br><p></p>


                                    <b>Stencil Handlebars Helper:</b>
                                    `{{getImage}}`


                                    <b>Common Object:</b> <a
                                    href="/docs/common-product-card-model">Common
                                    Product Card Model</a> <br><p></p>


                                    <b>Object/Property:</b> `{{category.image}}`


                                    <b>Arrays/Elements:</b>
                                    `{{product.options.image}}`,
                                    `{{product.images}}`,
                                    `{{downloads.items.images}}`,
                                    `{{downloads.items.thumbnail}}`,
                                    `{{category.subcategories.image}}`,
                                    `{{order.items.image}}`,
                                    `{{customer.orders.image}}`,
                                    `{{brands.image}}`,
                                    `{{order.items.shipping_rows.image}}` 


                                    <b> Usage Example: </b> 


                                    `{{getImage image "thumbnail"}}`
                            config:
                              sidebar:
                                token: ' Common Object'
                          - title: Common Product Card Model
                            route:
                              path: /common-product-card-model
                            data:
                              blocks:
                                - type: text
                                  data: >-
                                    <b>Description:</b> A model for a product’s
                                    basic, primary properties. Typically used
                                    for list components that show multiple
                                    products, each in its own "card" or panel.


                                    <b>Object Properties:</b>


                                    <table>
                                      <tr>
                                        <th>Property</th>
                                        <th>Description</th>
                                      </tr>
                                      <tr>
                                        <td>id</td>
                                        <td class="">ID of the product </td>
                                      </tr>
                                      <tr>
                                        <td class="">sku</td>
                                        <td class="">The product's SKU (stock keeping unit)/product code, as a string; if the SKU field is not populated, then null
                                     </td>
                                      </tr>
                                      <tr>
                                        <td class="">name</td>
                                        <td class="">Name of the product</td>
                                      </tr>
                                      <tr>
                                        <td class="">url</td>
                                        <td class="">URL to product detail page for the product</td>
                                      </tr>
                                      <tr>
                                        <td class="">availability</td>
                                        <td class="">Typical shipping time for the product; used to populate "Usually ships within…" fields</td>
                                      </tr>
                                      <tr>
                                        <td class="">rating</td>
                                        <td class="">Product’s rating</td>
                                      </tr>
                                      <tr>
                                        <td class="">ratings</td>
                                        <td class="">Number of reviews on which the rating is based</td>
                                      </tr>
                                      <tr>
                                        <td class="">brand</td>
                                        <td class="">Brand properties for the product</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1"> name</span></td>
                                        <td class="">Product’s brand name</td>
                                      </tr>
                                      <tr>
                                        <td class="">add_to_cart_url</td>
                                        <td class="">URL that adds this product to customer’s cart</td>
                                      </tr>
                                      <tr>
                                        <td class="">price</td>
                                        <td class="">References the <a href="/docs/catalog-price-common-object">catalog price object</a>, to access price properties in both raw-numeric and formatted/string formats</td>
                                      </tr>
                                      <tr>
                                        <td class="">summary</td>
                                        <td class="">Summary description of the product</td>
                                      </tr>
                                      <tr>
                                        <td class="">image</td>
                                        <td class="">Default image for the product, in <a href="/docs/stencil-image-common-object">Stencil image format</a> <!-- <a href="/docs/handlebars-image-helpers">Stencil image format</a> --> </td>
                                      </tr>
                                      <tr>
                                        <td class="">images</td>
                                        <td class="">Array of a product's images, in <a href="/docs/stencil-image-common-object">Stencil image format</a>; currently limited to 5 images </td>
                                      </tr>
                                      <tr>
                                        <td class="">date_added</td>
                                        <td class="">Date the product was added to this BigCommerce storefront</td>
                                      </tr>
                                      <tr>
                                        <td class="">pre_order</td>
                                        <td class="">Product’s availability for pre-order</td>
                                      </tr>
                                      <tr>
                                        <td class="">release_date</td>
                                        <td class="">Release date, if the product is set to pre-order status</td>
                                      </tr>
                                      <tr>
                                        <td class="">show_cart_action</td>
                                        <td class="">Boolean that indicates whether the product is available for purchase</td>
                                      </tr>
                                      <tr>
                                        <td class="">has_options</td>
                                        <td class="">Boolean that indicates whether customer is required to specify options when ordering the product</td>
                                      </tr>
                                      
                                      <tr>
                                        <td class="">stock_level</td>
                                        <td class="">If inventory tracking is turned on: The number of items available for sale (0 or more). If inventory tracking is turned off: A "null" string. </td>
                                      </tr>
                                         
                                      <tr>
                                        <td class="">low_ stock_level</td>
                                        <td class="">If inventory tracking is turned on: Sets a threshold low-stock level. You can use conditional logic to display a "limited availability" badge if the <span class="inline-code">stock_level</span> property's value falls below this threshold. If inventory tracking is turned off: A "null" string. </td>
                                      </tr>
                                       
                                      <tr>
                                        <td class="">qty_in_cart</td>
                                        <td class="">Quantity of this item in the customer’s cart</td>
                                      </tr>
                                      <tr>
                                        <td class="">out_of_stock_message</td>
                                        <td class="">Text to display when the product is out of stock</td>
                                      </tr>
                                      
                                      <tr>
                                        <td class="">custom_fields</td>
                                        <td class="">Array of <a href="https://support.bigcommerce.com/articles/Public/Custom-Fields">custom fields</a> for this product; custom fields can be used for purposes like: alternate brand name, merchandising title for the product, product type, "gift idea" indicator, etc.
                                    </td>
                                      </tr>

                                      <tr>
                                        <td class=""><span class="indent1"> id </span></td>
                                        <td class="">Unique (integer) identifier for this custom field</td>
                                      </tr>

                                      <tr>
                                        <td class=""><span class="indent1"> name </span></td>
                                        <td class="">Name of this custom field</td>
                                      </tr>

                                      <tr>
                                        <td class=""><span class="indent1"> value </span></td>
                                        <td class="">Value for this custom field</td>
                                      </tr>
                                        
                                    </table>


                                    <b>Available through:</b> <br><p></p>


                                    <b>Object:</b> <span class="inline-code">
                                    {{comparisons}} </span> <br><p></p>


                                    <b>Arrays/Elements:</b> <span
                                    class="inline-code">{{product.related_products}},
                                    {{product.similar_by_views}},
                                    {{category.products}},
                                    {{cart.suggested_products}},
                                    {{customer.recently_viewed_products}}
                                    </span><br><p></p>


                                    <!-- :"Common Product Card Model" moved from
                                    "Product Objects" page -->
                            config:
                              sidebar:
                                token: ' Common Object'
                    - title: Other Objects/Properties
                      route:
                        path: /new-subpage
                      data:
                        children:
                          - title: 'Other Objects & Properties '
                            route:
                              path: /other-objects-and-properties-overview
                            data:
                              blocks:
                                - type: html
                                  data: >-
                                    <h1>Other Objects and Properties
                                    Overview</h1>
                                - type: html
                                  data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#other-objects_other-objects-and-props\">Other Objects and Properties Overview</a></li>\n\t</ul>\n</div>"
                                - type: text
                                  data: >-
                                    ## Other Objects & Properties Overview


                                    This section covers the following objects.
                                    Note that in this section, each of the
                                    following reference pages contains multiple
                                    objects. For example, the Product Objects
                                    reference page contains all objects related
                                    to products not already covered, such as :



                                    Product Objects

                                    Category Objects

                                    Brand Objects

                                    Cart Objects

                                    Customer Objects

                                    Blog Objects

                                    Forms Objects

                                    </ul>
                            config:
                              sidebar:
                                token: Overview
                          - title: Product
                            route:
                              path: /product-objects
                            data:
                              blocks:
                                - type: text
                                  data: >-
                                    Product objects map to the products defined
                                    by the merchant for their BigCommerce
                                    storefront:


                                    <ul>
                                     <li><a href="#Product">Product</a></li>
                                     <li><a href="#RelProd">Related Products</a></li>
                                     <li><a href="#Stencil-ProdRevu-ref">Product Reviews</a></li>
                                     <li><a href="#SimByView">Similar Products by Customer Views</a></li>  
                                     <li><a href="#Videos">Product Videos</a></li>
                                     <li><a href="#Compare">Compare</a></li>
                                     <li><a href="#DownItem">Download Item</a></li>
                                     <li><a href="#ProdOtherDetails">Product Other Details</a></li>
                                    </ul>
                                - type: callout
                                  data:
                                    body: >-
                                      Also see Common Objects > Common Product
                                      Card Model, which documents the product
                                      object returned in collections.
                                    title: Other Product Objects
                            config:
                              sidebar:
                                token: objects
                          - title: Category
                            route:
                              path: /category-objects
                            data:
                              blocks:
                                - type: text
                                  data: "<a name=\"Stencil-Category-ref\"></a>Category objects map to the storefront's product categories, defined by the merchant:<br>\n\n<ul>\n  <li><a href=\"#Category\">Category</a></li>\n <li><a href=\"#CatProd\">Category Products</a></li>\n <li><a href=\"#ShopByPrice\">Category Shop by Price</a></li>\n</ul>\n\n<h2> <A NAME=\"Category\"></a>Category</h2> \n\n<b>Description:</b> The category object for the page calling the object. When retrieving a collection of categories, default sorting is by category <span class=\"inline-code\">id</span>, from lowest to highest. (Called on the default <NOBR><span class=\"inline-code\">&lt;theme-name&gt;/templates/pages/category.html</span></nobr> template, and on several partials in the <NOBR><span class=\"inline-code\">&lt;theme-name&gt;/templates/components/</span></nobr> subdirectory: <NOBR><span class=\"inline-code\">category/shop-by-price.html</span></nobr>, <NOBR><span class=\"inline-code\">category/sidebar.html</span></nobr>, and <NOBR><span class=\"inline-code\">amp/category/subcategories.html</span></nobr>.) <br>\n\n<b>Handlebars Expression:</b> `{{category}}`\n\n<b>Object Properties:</b><br><br>\n\n<table>\n  <tr>\n    <td>Property</td>\n    <td>Description</td>\n  </tr>\n  <tr>\n    <td class=\"\">id</td>\n    <td class=\"\">Unique ID for the category </td>\n  </tr>\n  <tr>\n    <td class=\"\">name</td>\n    <td class=\"\">Merchant-defined category name</td>\n  </tr>\n  <tr>\n    <td class=\"\">url</td>\n    <td class=\"\">URL for the category-specific page</td>\n  </tr>\n  <tr>\n    <td class=\"\">description</td>\n    <td class=\"\">Merchant-defined description of the category</td>\n  </tr>\n  <tr>\n    <td class=\"\">image</td>\n    <td class=\"\">Image representing this category, in <a href=\"/docs/stencil-image-common-object\">Stencil image format</a></td>\n  </tr>\n  \n  <tr>\n    <td class=\"\">subcategories <!-- Possible change to `children`--></td>\n    <td class=\"\">List of any child categories</td>\n  </tr>\n<!-- New for MERC-268: -->  \n  <tr>\n    <td class=\"\"><span class=\"indent1\">id</span></td>\n    <td class=\"\">Unique ID for the subcategory </td>\n  </tr>\n<!-- :New for MERC-268 -->\n  <tr>\n    <td class=\"\"><span class=\"indent1\">name</span></td>\n    <td class=\"\">Name of the subcategory</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\">url</span></td>\n    <td class=\"\">URL to the subcategory</td>\n  </tr>\n\n<!-- New for MERC-268: -->  \n  <tr>\n    <td class=\"\"><span class=\"indent1\">description</span></td>\n    <td class=\"\">Merchant-defined description of the subcategory </td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\">image</span></td>\n    <td class=\"\">Image representing this subcategory, in <a href=\"/docs/stencil-image-common-object\">Stencil image format</a></td>\n  </tr> \n<!-- :New for MERC-268 -->  \n\n<!-- New for MERC-320: -->  \n  <tr>\n    <td class=\"\"><span class=\"indent1\">product_count</span></td>\n    <td class=\"\">Number of products in the subcategory. (Counts at the current level only &ndash; not recursive to deeper levels.)</td>\n  </tr>\n<!-- :New for MERC-320 -->  \n  \n  <tr>\n  \t<td class=\"\">detail_messages</td>\n    <td class=\"\">Message displayed when a product is out of stock, and inventory settings are configured to redirect to a category: \"Sorry, the product you tried to view is currently out of stock, here are some similar products we have available.\" (This phrasing is set by the BigCommerce App.)</td>\n  </tr>\n  <tr>\n    <td class=\"\">show_compare</td>\n    <td class=\"\">Boolean that defines whether to show controls for product comparison</td>\n  </tr>\n  <tr>\n    <td class=\"\">show_add_to_cart</td>\n    <td class=\"\">Boolean that defines whether to show an Add to Cart button for this category</td>\n  </tr>\n  <tr>\n    <td class=\"\">total_products</td>\n    <td class=\"\">Count of the number of products in the category</td>\n  </tr>\n  <tr>\n    <td class=\"\">faceted_search_enabled</td>\n    <td class=\"\">Boolean that defines whether product-filtering search is enabled for the store</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\">facets</span></td>\n    <td class=\"\">Available search facets</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\">pagination</span></td>\n    <td class=\"\">References the pagination model</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\">selected</span></td>\n    <td class=\"\">Selected search facets</td>\n  </tr>\n</table>\n\n\n<h2> <A NAME=\"CatProd\"></a>Category Products</h2>\n\n<b>Description:</b> A list of products associated with this category. (Called on the default <NOBR><span class=\"inline-code\">&lt;theme-name&gt;/templates/pages/category.html</span></nobr> template, and on the <NOBR><span class=\"inline-code\">&lt;theme-name&gt;/templates/components/category/product-listing.html</span></nobr> partial.) <br>\n\n<b>Handlebars Expression:</b> `{{category.products}}`\n\n<b>Object Properties:</b> References the product card model.\n\n\n<h2> <A NAME=\"ShopByPrice\"></a>Category Shop by Price</h2>\n\n<b>Description:</b> A list of price ranges, to enable customers to set price limits within a product category. <NOBR>(Called on the default</nobr> <NOBR><span class=\"inline-code\">&lt;theme-name&gt;/templates/components/category/shop-by-price.html</span></nobr> and <NOBR><span class=\"inline-code\">&lt;theme-name&gt;/templates/components/category/sidebar.html</span></nobr> partials.) <br>\n\n<b>Handlebars Expression:</b> `{{category.shop_by_price}}`\n\n<b>Object Properties:</b><br><br>\n\n<table>\n  <tr>\n    <td>Property</td>\n    <td>Description</td>\n  </tr>\n  <tr>\n    <td class=\"\">url</td>\n    <td class=\"\">URL of price-filtered product results for this category</td>\n  </tr>\n  <tr>\n    <td class=\"\">low</td>\n    <td class=\"\"><a href=\"/docs/price-common-object\">Price object</a> that defines the minimum price boundary </td>\n  </tr>\n  <tr>\n    <td class=\"\">high</td>\n    <td class=\"\"><a href=\"/docs/price-common-object\">Price object</a> that defines the maximum price boundary</td>\n  </tr>\n  <tr>\n    <td class=\"\">selected</td>\n    <td class=\"\"><a href=\"/docs/price-common-object\">Price object</a> that defines the currently selected price range</td>\n  </tr>\n</table>"
                            config:
                              sidebar:
                                token: objects
                          - title: Brand
                            route:
                              path: /brand-objects
                            data:
                              blocks:
                                - type: text
                                  data: >-
                                    <a name="Stencil-Brand-ref"></a>Brand
                                    objects map to the product brands sold by
                                    the merchant:<br>


                                    <ul>
                                     <li><a href="#BrandList">Brand List</a></li>
                                     <li><a href="#Brand">Brand</a></li>
                                     <li><a href="#ShopByBrand">Shop by Brand</a></li>
                                    </ul>



                                    ## <div id="BrandList"></div>Brand List


                                    <b>Description:</b> A list of brands with
                                    their basic data. Default sorting is by
                                    brand id, from lowest to highest. (Called on
                                    the default
                                    <NOBR>`<theme-name>/templates/pages/brands.html`
                                    template.)


                                    <b>Handlebars Expression:</b> `{{brands}}`


                                    <b>Object Properties:</b>


                                    <table>
                                      <tr>
                                        <th>Property</th>
                                        <th>Description</th>
                                      </tr>
                                      <tr>
                                        <td>url</td>
                                        <td>URL to this brand’s products listing</td>
                                      </tr>
                                      <tr>
                                        <td>name</td>
                                        <td>Name of the brand</td>
                                      </tr>
                                      <tr>
                                        <td>id</td>
                                        <td>Internal identifier for the brand </td>
                                      </tr>
                                      <tr>
                                        <td>image</td>
                                        <td>Stencil image object (if any) for the brand</td>
                                      </tr>
                                    </table>



                                    ## <div id="Brand"></a>Brand


                                    <b>Description:</b> The brand object for the
                                    page calling the object. (Called on the
                                    default
                                    `<theme-name>/templates/pages/brand.html`
                                    template.)


                                    <b>Handlebars Expression:</b> `{{brand}}`


                                    <b>Object Properties:</b>


                                    <table>
                                      <tr>
                                        <th>Property</th>
                                        <th>Description</th>
                                      </tr>
                                      <tr>
                                        <td>show_compare</td>
                                        <td>Boolean corresponding to merchant’s control panel selection whether or not to enable product comparisons</td>
                                      </tr>
                                      <tr>
                                        <td>url</td>
                                        <td>URL of the brand page</td>
                                      </tr>
                                      <tr>
                                        <td>name</td>
                                        <td>Name of the brand </td>
                                      </tr>
                                      <tr>
                                        <td>pagination</td>
                                        <td>References the pagination model</td>
                                      </tr>
                                      <tr>
                                        <td>image</td>
                                        <td>Image used to visually represent the brand (i.e., logo)</td>
                                      </tr>
                                      <tr>
                                        <td>faceted_search_enabled</td>
                                        <td>Boolean that defines whether product-filtering search is enabled for the store</td>
                                      </tr>
                                      <tr>
                                        <td>facets</td>
                                        <td>A list of all possible search filters for this brand</td>
                                      </tr>
                                      <tr>
                                        <td>products</td>
                                        <td>An array of product card models</a></td>
                                      </tr>
                                      <tr>
                                        <td>selected</td>
                                        <td>An array of selected facets</td>
                                      </tr>
                                    </table>



                                    ## <div id="ShopByBrand"></div>Shop by Brand


                                    <b>Description:</b> Objects to enable
                                    customers to shop by brand. Returns top 10
                                    brands, by product count. (Called on the
                                    default
                                    `<theme-name>/templates/components/brand/sidebar.html`
                                    and
                                    `<theme-name>/templates/components/common/footer.html`
                                    partials.)


                                    <b>Handlebars Expression:</b>
                                    `{{shop_by_brand}}`


                                    <b>Object Properties:</b>


                                    <table>
                                      <tr>
                                        <th>Property</th>
                                        <th>Description</th>
                                      </tr>
                                      <tr>
                                        <td>links</td>
                                        <td>Array of links to individual brands</td>
                                      </tr>
                                      <tr>
                                        <td>id</td>
                                        <td>ID for this brand</td>
                                      </tr>
                                      <tr>
                                        <td>url</td>
                                        <td>URL for this brand</td>
                                      </tr>
                                      <tr>
                                        <td>name</td>
                                        <td>Name of this brand</td>
                                      </tr>
                                      <tr>
                                        <td>count</td>
                                        <td>Number of products matching this brand</td>
                                      </tr>
                                    </table>
                            config:
                              sidebar:
                                token: Objects
                          - title: Cart
                            route:
                              path: /cart-objects
                            data:
                              blocks:
                                - type: text
                                  data: >-
                                    ## <div id="Cart_Status"></a>Cart Status
                                    Message</h2>


                                    <b>Description:</b> A list of relevant
                                    messages for the cart in the current session


                                    <b>Handlebars Expression:</b>
                                    `{{cart.status_messages}}`


                                    <b>Object Properties:</b>


                                    <table>
                                      <tr>
                                        <th>Property</th>
                                        <th>Description</th>
                                      </tr>
                                      <tr>
                                        <td>message</td>
                                        <td>System-generated messages for the cart</td>
                                      </tr>
                                      <tr>
                                        <td>type</td>
                                        <td>Type of message: error, info, or success</td>
                                      </tr>
                                    </table>



                                    ## <div id="Suggested"></div>Suggested
                                    Products


                                    <b>Description:</b> A list of suggested
                                    products, based on cart contents; displays
                                    only if enabled by the `cart.suggestions`
                                    front-matter attribute, and only immediately
                                    after a product is added to the cart


                                    <b>Handlebars Expression:</b>
                                    `{{cart.suggested_products}}`


                                    <b>Object Properties:</b> References
                                    standard product card model.
                            config:
                              sidebar:
                                token: Objects
                          - title: Customer
                            route:
                              path: /customer-objects
                            data:
                              blocks:
                                - type: text
                                  data: >-
                                    ## <div id="Customer"></div>Customer


                                    <b>Description:</b> Customer-specific
                                    properties for a storefront customer object.
                                    When filtering/limiting, customers' default
                                    sorting is by customer id, from lowest to
                                    highest. (Called on several partials in the
                                    `<theme-name>/templates/components/`
                                    subdirectory: 

                                    `page/contact-us-form.html`,

                                    `common/subscription-form.html`,

                                    `account/address-list.html`,

                                    `account/messages-form.html`, and

                                    `account/wishlist-list.html`.)


                                    <b>Handlebars Expression:</b> `{{customer}}`


                                    <b>Object Properties:</b>


                                    <table>
                                      <tr>
                                        <th>Property</th>
                                        <th>Description</th>
                                      </tr>
                                      <tr>
                                        <td>id</td>
                                        <td>Customer’s ID</td>
                                      </tr>
                                      <tr>
                                        <td>name</td>
                                        <td>Customer’s name</td>
                                      </tr>
                                      <tr>
                                        <td>email</td>
                                        <td>Customer’s email address</td>
                                      </tr>
                                      <tr>
                                        <td>phone</td>
                                        <td>Customer’s phone number</td>
                                      </tr>

                                      <tr>
                                        <td>store_credit</td>
                                        <td>Customer’s store credit</td>
                                      </tr>

                                      <tr>
                                        <td>customer_group_id</td>
                                        <td>ID of this customer's group</td>
                                      </tr>

                                      <tr>
                                        <td>customer_group_name</td>
                                        <td>Name of this customer's group</td>
                                      </tr>  
                                      
                                      <tr>
                                        <td>num_new_messages</td>
                                        <td>Number of unread messages for this customer</td>
                                      </tr>
                                      <tr>
                                        <td>num_wishlists</td>
                                        <td>Number of wishlists for this customer</td>
                                      </tr>
                                      <tr>
                                        <td>shipping_address</td>
                                        <td>Shipping address used for the order</td>
                                      </tr>
                                      <tr>
                                        <td>id</span></td>
                                        <td>Unique, system-generated ID</td>
                                      </tr>
                                      <tr>
                                        <td>first_name</span></td>
                                        <td>Customer’s shipping (first) name</td>
                                      </tr>
                                      <tr>
                                        <td>last_name</td>
                                        <td>Customer’s shipping (last) name</td>
                                      </tr>
                                      <tr>
                                        <td>company</td>
                                        <td>Customer's shipping company name</td>
                                      </tr>
                                      <tr>
                                        <td>address1</td>
                                        <td>Customer's shipping address, first line</td>
                                      </tr>
                                      <tr>
                                        <td>address2</td>
                                        <td>Customer's shipping address, second line</td>
                                      </tr>
                                      <tr>
                                        <td>city</td>
                                        <td>Customer's shipping city</td>
                                      </tr>
                                      <tr>
                                        <td>state</td>
                                        <td>Customer's shipping state</td>
                                      </tr>
                                      <tr>
                                        <td>zip</td>
                                        <td>Customer's shipping zip</td>
                                      </tr>
                                      <tr>
                                        <td>country</td>
                                        <td>Customer's shipping country</td>
                                      </tr>
                                      <tr>
                                        <td>phone</td>
                                        <td>Customer's shipping phone number</td>
                                      </tr>
                                      <tr>
                                        <td>state_id</td>
                                        <td>ID for customer's shipping state/province/region
                                    </td>
                                      </tr>
                                      <tr>
                                        <td>country_id</td>
                                        <td>ID for customer's shipping country</td>
                                      </tr>
                                      <tr>
                                        <td>destination</td>
                                        <td>Type of delivery destination: residential or business/commercial</td>
                                      </tr>
                                      <tr>
                                        <td>last_used</td>
                                        <td>Timestamp when this address was last used as a shipping address</td>
                                      </tr>
                                      <tr>
                                        <td>form_session_id</td>
                                        <td>Used for custom shipping forms</td>
                                      </tr>
                                    </table>



                                    ## <div id="OrderDet"></div>Order Details


                                    <b>Description:</b> The order properties for
                                    a specific order, usable on the order
                                    details page. (Called on the default
                                    `<theme-name>/templates/pages/account/orders/details.html`
                                    and
                                    `<theme-name&gt;/templates/pages/account/orders/invoice.html`
                                    templates, and on the
                                    `<theme-name&gt;/templates/components/account/order-contents.html`
                                    partial.)


                                    <b>Handlebars Expression:</b> `{{order}}`


                                    <b>Object Properties:</b>


                                    <table>
                                      <tr>
                                        <td>Property</td>
                                        <td>Description</td>
                                      </tr>
                                      <tr>
                                        <td>date</td>
                                        <td>Date of the order</td>
                                      </tr>
                                      <tr>
                                        <td>id</td>
                                        <td>Unique, system-generated ID</td>
                                      </tr>
                                      <tr>
                                        <td>total</td>
                                        <td>Price object that defines the order’s total value</td>
                                      </tr>
                                      <tr>
                                        <td>status</td>
                                        <td>Order status code</td>
                                      </tr>
                                      <tr>
                                        <td>status_text</td>
                                        <td>Status text associated with the status code for the order</td>
                                      </tr>
                                      <tr>
                                        <td>returns_enabled</td>
                                        <td>Boolean that indicates whether merchant allows products from the order to be returned</td>
                                      </tr>
                                      <tr>
                                        <td>reorder_url</td>
                                        <td>URL to place reorders for items in this order</td>
                                      </tr>
                                      <tr>
                                        <td>invoice_url</td>
                                        <td>URL to display an invoice for this order</td>
                                      </tr>
                                      <tr>
                                        <td>is_complete</td>
                                        <td>Boolean indicating that the order has been completed</td>
                                      </tr>
                                      <tr>
                                        <td>comments</td>
                                        <td>Customer’s message about the order</td>
                                      </tr>
                                      <tr>
                                        <td>is_digital</td>
                                        <td>Boolean indicating whether the order will be delivered digitally</td>
                                      </tr>
                                      <tr>
                                        <td>items</td>
                                        <td>List of items for the order</td>
                                      </tr>
                                      <tr>
                                        <td>order_product_id</span></td>
                                        <td>Product ID</td>
                                      </tr>
                                      <tr>
                                        <td>name</span></td>
                                        <td>Product Name</td>
                                      </tr>
                                      <tr>
                                        <td>quantity</span></td>
                                        <td>Quantity Ordered</td>
                                      </tr>
                                      <tr>
                                        <td>refunded</span></td>
                                        <td>Price object that defines the value of this product that has been refunded</td>
                                      </tr>
                                      <tr>
                                        <td>event_date</td>
                                        <td>A chosen event date for the product</td>
                                      </tr>
                                      <tr>
                                        <td>price</td>
                                        <td>Price object that defines the product’s price</td>
                                      </tr>
                                      <tr>
                                        <td>shipping_rows</td>
                                        <td>Array of shipping addresses, for each item in the order</td>
                                      </tr>
                                      <tr>
                                        <td>address</td>
                                        <td>Street address to ship to</td>
                                      </tr>
                                      <tr>
                                        <td>city</td>
                                        <td>City to ship to</td>
                                      </tr>
                                      <tr>
                                        <td>state</td>
                                        <td>State to ship to</td>
                                      </tr>
                                      <tr>
                                        <td>zip</td>
                                        <td>Postal/ZIP code to ship to</td>
                                      </tr>
                                      <tr>
                                        <td>country</td>
                                        <td>Country to ship to</td>
                                      </tr>
                                      <tr>
                                        <td>gift_wrapping_name</td>
                                        <td>Name of the gift-wrapping option used</td>
                                      </tr>
                                      <tr>
                                        <td>type</td>
                                        <td>Type of purchase; value is one of: physical, digital, giftcertificate</td>
                                      </tr>
                                      <tr>
                                        <td>download_url</td>
                                        <td>URL at which customer can download digital item</td>
                                      </tr>
                                      <tr>
                                        <td>image</td>
                                        <td>The image of the order’s first product, in Stencil image format </td>
                                      </tr>
                                      <tr>
                                        <td>show_reorder
                                    </td>
                                        <td>Boolean indicating whether the customer should see a button for reordering items on the Account Order Details page</td>
                                      </tr>
                                      <tr>
                                        <td>reorder_message</td>
                                        <td>An error message to be displayed when the customer attempts to reorder items that can’t be reordered</td>
                                      </tr>
                                      <tr>
                                        <td>options</td>
                                        <td>A list of options selected when this product was purchased</td>
                                      </tr>
                                      <tr>
                                        <td>name</td>
                                        <td>Display name for the option ("Small", “Medium”, etc.)</td>
                                      </tr>
                                      <tr>
                                        <td>value</td>
                                        <td>Value that customer selected for the option</td>
                                      </tr>
                                      <tr>
                                        <td>billing_address</td>
                                        <td>Billing address used for the order</td>
                                      </tr>
                                      <tr>
                                        <td>full_name</td>
                                        <td>Customer's billing name</td>
                                      </tr>
                                      <tr>
                                        <td>company</td>
                                        <td>Customer's billing company name</td>
                                      </tr>
                                      <tr>
                                        <td>address_lines</td>
                                        <td>Customer's billing address</td>
                                      </tr>
                                      <tr>
                                        <td>city</td>
                                        <td>Customer's billing city</td>
                                      </tr>
                                      <tr>
                                        <td>state</td>
                                        <td>Customer's billing state</td>
                                      </tr>
                                      <tr>
                                        <td>country</td>
                                        <td>Customer billing country</td>
                                      </tr>
                                      <tr>
                                        <td>zip</td>
                                        <td>Customer billing ZIP</td>
                                      </tr>
                                      <tr>
                                        <td>phone</td>
                                        <td>Customer billing phone number</td>
                                      </tr>
                                      <tr>
                                        <td>shipping_address_count</td>
                                        <td>Number of shipping addresses the customer has specified for this order</td>
                                      </tr>
                                      <tr>
                                        <td>shipping_address</td>
                                        <td>Shipping address used for the order</td>
                                      </tr>
                                      <tr>
                                        <td>full_name</td>
                                        <td>Customer's shipping name</td>
                                      </tr>
                                      <tr>
                                        <td>company</td>
                                        <td>Customer's shipping company name</td>
                                      </tr>
                                      <tr>
                                        <td>address_lines</td>
                                        <td>Customer's shipping address</td>
                                      </tr>
                                      <tr>
                                        <td>city</td>
                                        <td>Customer's shipping city</td>
                                      </tr>
                                      <tr>
                                        <td>state</td>
                                        <td>Customer's shipping state</td>
                                      </tr>
                                      <tr>
                                        <td>country</td>
                                        <td>Customer's shipping country</td>
                                      </tr>
                                      <tr>
                                        <td>zip</td>
                                        <td>Customer's shipping zip</td>
                                      </tr>
                                      <tr>
                                        <td>phone</td>
                                        <td>Customer's shipping phone number</td>
                                      </tr>
                                      <tr>
                                        <td>payment_method</td>
                                        <td>Customer’s payment method for this order (payment gateway)</td>
                                      </tr>
                                      <tr>
                                        <td>card_number_last_four</td>
                                        <td>Last four digits of customer’s credit card</td>
                                      </tr>
                                      <tr>
                                        <td>total_rows</td>
                                        <td>A list of “total” rows containing total pricing information</td>
                                      </tr>
                                      <tr>
                                        <td>label</td>
                                        <td>The label of the total row (Subtotal, Tax, Grand Total, etc.)</td>
                                      </tr>
                                    </table>



                                    ## <div id="Recent"></div> Recent Items


                                    <b>Description:</b> Items the customer has
                                    recently viewed. (Called on the default
                                    `<theme-name>/templates/pages/account/recent-items.html`
                                    template.)


                                    <b>Handlebars Expression:</b> <span
                                    class="inline-code">{{customer.recently_viewed_products}}</span>


                                    <b>Object Properties:</b> References the
                                    standard product card model.



                                    ## <div id="Wishlists"></div> Customer
                                    Wishlists


                                    <b>Description:</b> Array of product
                                    wishlists, specific to this store, for the
                                    customer. (Called on the default
                                    `<theme-name>/templates/components/account/wishlist-list.html`
                                    partial.)


                                    <b>Handlebars Expression:</b>
                                    `{{customer.wishlists}}` 


                                    <b>Object Properties:</b>


                                    <table>
                                      <tr>
                                        <td>Property</td>
                                        <td>Description</td>
                                      </tr>
                                      <tr>
                                        <td>id</td>
                                        <td>Unique system ID of the wishlist</td>
                                      </tr>
                                      <tr>
                                        <td>num_items</td>
                                        <td>Number of items in the wishlist</td>
                                      </tr>
                                      <tr>
                                        <td>name</td>
                                        <td>Customer-defined name of the wishlist</td>
                                      </tr>
                                      <tr>
                                        <td>is_public</td>
                                        <td>Boolean value indicating whether the wishlist is publicly available </td>
                                      </tr>
                                      <tr>
                                        <td>is_editable</td>
                                        <td>Boolean indicating whether the "Remove Item" button, and account navigation controls, are displayed (i.e., whether the customer viewing the wishlist is this wishlist’s owner)</td>
                                      </tr>
                                      <tr>
                                        <td>token</td>
                                        <td>Unique public token for the wishlist</td>
                                      </tr>
                                      <tr>
                                        <td>view_url</td>
                                        <td>URL to view the wishlist</td>
                                      </tr>
                                      <tr>
                                        <td>edit_url</td>
                                        <td>URL to edit the wishlist</td>
                                      </tr>
                                      <tr>
                                        <td>delete_url</td>
                                        <td>URL to delete the wishlist</td>
                                      </tr>
                                      <tr>
                                        <td>share_url</td>
                                        <td>URL to share the wishlist</td>
                                      </tr>
                                    </table>



                                    ## <div id="WishDet"></div>Wishlist Details


                                    <b>Description:</b> Wishlist information for
                                    a specific wishlist. (Called on the default
                                    `<theme-name>/templates/pages/account/wishlist-details.html`
                                    template and
                                    `<theme-name>/templates/components/account/wishlist-item-list.html`partial.)


                                    <b>Handlebars Expression:</b> `{{wishlist}}`


                                    <b>Object Properties:</b>


                                    <table>
                                      <tr>
                                        <td>Property</td>
                                        <td>Description</td>
                                      </tr>
                                      <tr>
                                        <td>id</td>
                                        <td>Unique system ID for the wishlist</td>
                                      </tr>
                                      <tr>
                                        <td>name</td>
                                        <td>Customer-defined name of the wishlist</td>
                                      </tr>
                                      <tr>
                                        <td>is_public</td>
                                        <td>Boolean value indicating whether the wishlist is publicly available </td>
                                      </tr>
                                      <tr>
                                        <td>token</td>
                                        <td>Unique public token for the wishlist</td>
                                      </tr>
                                      <tr>
                                        <td>share_url</td>
                                        <td>URL used to share the wishlist</td>
                                      </tr>
                                      <tr>
                                        <td>items</td>
                                        <td>List of items in the wishlist; extends the product card model, adding the extra properties below:</td>
                                      </tr>
                                      <tr>
                                        <td>id</td>
                                        <td>Unique system ID for this wishlist item</td>
                                      </tr>
                                      <tr>
                                        <td>product_id</td>
                                        <td>Product ID for the item</td>
                                      </tr>
                                      <tr>
                                        <td>remove_url</td>
                                        <td>URL to remove the product from the wishlist</td>
                                      </tr>
                                    </table>



                                    ## <div id="Shipments"></div> Account Order
                                    Shipments


                                    <b>Description:</b> Objects to manage
                                    shipments associated with a specific order
                                    details for the current customer. (Called on
                                    the default <NOBR><span
                                    class="inline-code">&lt;theme-name&gt;/templates/pages/account/orders/details.html</span></nobr>
                                    template.) <br>


                                    <b>Handlebars Expression:</b>
                                    `{{shipments}}`


                                    <b>Object Properties:</b>


                                    <table>
                                      <tr>
                                        <td>Property</td>
                                        <td>Description</td>
                                      </tr>
                                      <tr>
                                        <td>date_shipped</td>
                                        <td>Shipping date for this shipment</td>
                                      </tr>
                                      <tr>
                                        <td>shipping_provider</td>
                                        <td>Carrier for this shipment</td>
                                      </tr>
                                      <tr>
                                        <td>shipping_method</td>
                                        <td>Shipping method for this shipment</td>
                                      </tr>
                                      <tr>
                                        <td>show_shipping_method</td>
                                        <td>Boolean indicating whether to display the shipping method to the customer</td>
                                      </tr>
                                      <tr>
                                        <td>shipping_track</td>
                                        <td>Tracking information for this shipment</td>
                                      </tr>
                                      <tr>
                                        <td>url</td>
                                        <td>Tracking URL for this shipment</td>
                                      </tr>
                                      <tr>
                                        <td>number</td>
                                        <td>Tracking number for this shipment</td>
                                      </tr>
                                    </table>



                                    ## <div du="Orders"></div>Account Orders


                                    <b>Description:</b> Objects to manage
                                    completed orders for the current customer.
                                    By default, orders sort by order id, from
                                    lowest to highest. (Called on the default
                                    `<theme-name>/templates/pages/account/orders/all.html`and
                                    `<theme-name&gt;/templates/pages/account/orders/completed.html` 
                                    templates, and on the
                                    `<theme-name>/templates/components/account/orders-list.html`
                                    partial.)


                                    <b>Handlebars
                                    Expression:</b>`{{customer.orders}}`


                                    <b>Object Properties:</b>


                                    <table>
                                      <tr>
                                        <td>Property</td>
                                        <td>Description</td>
                                      </tr>
                                      <tr>
                                        <td>pagination</td>
                                        <td>References pagination model</td>
                                      </tr>
                                      <tr>
                                        <td>date</td>
                                        <td>Date this order was placed</td>
                                      </tr>
                                      <tr>
                                        <td>last_update_date</td>
                                        <td>Date this order was last updated</td>
                                      </tr>
                                      <tr>
                                        <td>id</td>
                                        <td>ID for this order</td>
                                      </tr>
                                      <tr>
                                        <td>total</td>
                                        <td>Total value of this order</td>
                                      </tr>
                                      <tr>
                                        <td>status</td>
                                        <td>Status of this order ("Completed" or other)</td>
                                      </tr>
                                      <tr>
                                        <td>return_url</td>
                                        <td>URL for returning items in this order</td>
                                      </tr>
                                      <tr>
                                        <td>reorder_url</td>
                                        <td>URL for reordering items in this order</td>
                                      </tr>
                                      <tr>
                                        <td>details_url</td>
                                        <td>URL for details about this order</td>
                                      </tr>
                                      <tr>
                                        <td>payment_instructions</td>
                                        <td>Text field defined by merchant as to payment instructions for manual gateways such as “Bank Deposit”</td>
                                      </tr>
                                      <tr>
                                        <td>image</td>
                                        <td>Image of the order’s first product, in Stencil image format</td>
                                      </tr>
                                      <tr>
                                        <td>items</td>
                                        <td>Array of products in this order</td>
                                      </tr>
                                      <tr>
                                        <td>name</td>
                                        <td>Name of this product</td>
                                      </tr>
                                      <tr>
                                        <td>quantity</td>
                                        <td>Quantity of this product ordered</td>
                                      </tr>
                                      <tr>
                                        <td>refunded</td>
                                        <td>Price object that defines the amount of this product that has been refunded</td>
                                      </tr>
                                      <tr>
                                        <td>expected_release_date</td>
                                        <td>Expected ship date if the product is set to pre-order status</td>
                                      </tr>
                                      <tr>
                                        <td>type</span></td>
                                        <td>Type of purchase; value is one of: physical, digital, giftcertificate</td>
                                      </tr>
                                      <tr>
                                        <td>download_url</td>
                                        <td>URL for customer to download a digital product</td>
                                      </tr>
                                      <tr>
                                        <td>image</td>
                                        <td>The image for this ordered product</td>
                                      </tr>
                                      <tr>
                                        <td>options</td>
                                        <td>Array of additional product details (size, color, etc.), as name/value pairs</td>
                                      </tr>
                                      <tr>
                                        <td>name</td>
                                        <td>Displayed name for this category of information</td>
                                      </tr>
                                      <tr>
                                        <td>value</td>
                                        <td>Displayed value for this product’s entry</td>
                                      </tr>
                                    </table>



                                    ## <div id="Returns"></div>Account Returns


                                    <b>Description:</b> Objects to manage
                                    returns for the current customer. (Called on
                                    the default
                                    `<theme-name>/templates/pages/account/returns.html`
                                    template.) <br>


                                    <b>Handlebars Expression:</b>
                                    `{{customer.returns}}`


                                    <b>Object Properties:</b>


                                    <table>
                                      <tr>
                                        <td>Property</td>
                                        <td>Description</td>
                                      </tr>
                                      <tr>
                                        <td>date_requested</td>
                                        <td>Date on which the customer requested this return</td>
                                      </tr>
                                      <tr>
                                        <td>id</td>
                                        <td>The ID for this return</td>
                                      </tr>
                                      <tr>
                                        <td>quantity</td>
                                        <td>Quantity of items returned</td>
                                      </tr>
                                      <tr>
                                        <td>reason</td>
                                        <td>Reason for return; merchants can define actions beyond the default strings created with each store, which are: Received Wrong Product, Wrong Product Ordered, Not Satisfied With The Product, and There Was A Problem With The Product</td>
                                      </tr>
                                      <tr>
                                        <td>action</td>
                                        <td>Return action; merchants can define actions beyond the default set created with each store (Repair, Replacement, or Store Credit)</td>
                                      </tr>
                                      <tr>
                                        <td>comments</td>
                                        <td>Comments that the customer entered with the return request</td>
                                      </tr>
                                      <tr>
                                        <td>status</td>
                                        <td>Status of the return: Pending, Received, Authorized, Repaired, 
                                    Refunded, Rejected, or Cancelled</td>
                                      </tr>
                                      <tr>
                                        <td>product</td>
                                        <td>Array of products included in the return</td>
                                      </tr>
                                      <tr>
                                        <td>url</td>
                                        <td>URL for this product</td>
                                      </tr>
                                      <tr>
                                        <td>name</td>
                                        <td>Name of this product</td>
                                      </tr>
                                      <tr>
                                        <td>options</td>
                                        <td>Array of additional product details (size, color, etc.), as name/value pairs</td>
                                      </tr>
                                      <tr>
                                        <td>name</td>
                                        <td>Displayed name for this category of information</td>
                                      </tr>
                                      <tr>
                                        <td>value</td>
                                        <td>Displayed value for this product’s entry</td>
                                      </tr>
                                      <tr>
                                        <td>image</td>
                                        <td>Image for this product</td>
                                      </tr>
                                    </table>



                                    ## <div id="NewReturn"></div>Account New
                                    Return


                                    <b>Description:</b> Objects to handle a new
                                    return for the current customer. (Called on
                                    the default
                                    `<theme-name>/templates/pages/account/add-return.html`
                                    template.)


                                    <b>Handlebars Expression:</b>
                                    `{{forms.return}}`


                                    <b>Object Properties:</b>


                                    <table>
                                      <tr>
                                        <td>Property</td>
                                        <td>Description</td>
                                      </tr>
                                      <tr>
                                        <td>order_id</td>
                                        <td>ID for the original order</td>
                                      </tr>
                                      <tr>
                                        <td>reasons</td>
                                        <td>Reasons for return</td>
                                      </tr>
                                      <tr>
                                        <td>actions</td>
                                        <td>Return actions: an array of strings arbitrarily defined by the merchant: refund, exchange, credit, etc.</td>
                                      </tr>
                                      <tr>
                                        <td>order_products</td>
                                        <td>Array of products from the order that are available to return</td>
                                      </tr>
                                      <tr>
                                        <td>id</td>
                                        <td>ID for the product</td>
                                      </tr>
                                      <tr>
                                        <td>name</td>
                                        <td>Name of this product</td>
                                      </tr>
                                      <tr>
                                        <td>product_id</td>
                                        <td>ID for this product</td>
                                      </tr>
                                      <tr>
                                        <td>price</td>
                                        <td>Price object that defines this product’s price</td>
                                      </tr>
                                      <tr>
                                        <td>quantity</td>
                                        <td>Quantity of the product returned</td>
                                      </tr>
                                      <tr>
                                        <td>options</td>
                                        <td>Array of additional product details (size, color, etc.), as name/value pairs</td>
                                      </tr>
                                      <tr>
                                        <td>name</td>
                                        <td>Displayed name for this category of information</td>
                                      </tr>
                                      <tr>
                                        <td>value</td>
                                        <td>Displayed value for this product’s entry</td>
                                      </tr>
                                    </table>



                                    ## <div id="CreateAccount"></div>Create
                                    Account


                                    <b>Description:</b> Object to enable the
                                    current customer to create a store account.
                                    (Called on the default
                                    `<theme-name&gt;/templates/pages/auth/create-account.html`
                                    template.)


                                    <b>Handlebars Expression:</b>
                                    `{{forms.create_account}}`


                                    <b>Object Properties:</b>


                                    <table>
                                      <tr>
                                        <td>Property</td>
                                        <td>Description</td>
                                      </tr>
                                      <tr>
                                        <td>recaptcha</td>
                                        <td>Objects for integrating the Google reCAPTCHA service to distinguish human visitors from ’bots (automated agents)</td>
                                      </tr>
                                      <tr>
                                        <td>enabled</td>
                                        <td>Boolean indicating whether reCAPTCHA is enabled for this store</td>
                                      </tr>
                                      <tr>
                                        <td>public_key</td>
                                        <td>Public key (site key) that reCAPTCHA returns upon merchant’s enabling CAPTCHA security in Store Settings > Display Settings</td>
                                      </tr>
                                      <tr>
                                        <td>address_fields</td>
                                        <td>Array of form fields that define each shipping address for this customer; for details, see <a href="https://github.com/bigcommerce/cornerstone/tree/master/templates/components/common/forms">this repo</a></td>
                                      </tr>
                                      <tr>
                                        <td>class_name</td>
                                        <td>Specifies a CSS class (defined in the theme's `/assets/scss/` subdirectory) to apply to a field within the array; for corresponding control-panel steps, see
                                     <NOBR><a href="https://support.bigcommerce.com/articles/Public/Editing-Form-Fields#advanced-settings">this support article</a></td>
                                      </tr>
                                      <tr>
                                        <td>account_fields</td>
                                        <td>Object of form fields; for details, see <a href=https://github.com/bigcommerce/cornerstone/tree/master/templates/components/common/forms>this repo</a>
                                      </tr>
                                      <tr>
                                        <td>class_name</td>
                                        <td>Specifies a CSS class to apply to a field within the array; for corresponding control-panel steps, see:
                                     <a href="https://support.bigcommerce.com/articles/Public/Editing-Form-Fields#advanced-settings">this support article</a></td>
                                      </tr>
                                      <tr>
                                        <td>error</td>
                                        <td>BCApp generated message to display when customer’s account creation fails</td>
                                      </tr>
                                      <tr>
                                        <td>checking_out</td>
                                        <td>Boolean indicating whether customer created the account during a purchase checkout</td>
                                      </tr>
                                    </table>



                                    ## <div id="ShipAddress"></div>Shipping
                                    Addresses


                                    <b>Description:</b> Object to enable the
                                    customer to enter shipping and contact
                                    information. (Called on the default
                                    `<theme-name>/templates/components/account/address-list.html`
                                    partial.)


                                    <b>Handlebars
                                    Expression:</b>`{{customer.addresses}}`


                                    <b>Object Properties:</b>


                                    <table>
                                      <tr>
                                        <th>Property</th>
                                        <th>Description</th>
                                      </tr>
                                      <tr>
                                        <td>id</td>
                                        <td>ID for this shipping address</td>
                                      </tr>
                                      <tr>
                                        <td>customer_id</td>
                                        <td>ID for this customer</td>
                                      </tr>
                                      <tr>
                                        <td>first_name</td>
                                        <td>First name to ship to</td>
                                      </tr>
                                      <tr>
                                        <td>last_name</td>
                                        <td>Last name to ship to</td>
                                      </tr>
                                      <tr>
                                        <td>company</td>
                                        <td>Company name to ship to</td>
                                      </tr>
                                      <tr>
                                        <td>address1</td>
                                        <td>Street (etc.) address, first line</td>
                                      </tr>
                                      <tr>
                                        <td>address2</td>
                                        <td>Street (etc.) address, second line</td>
                                      </tr>
                                      <tr>
                                        <td>city</td>
                                        <td>City to ship to</td>
                                      </tr>
                                      <tr>
                                        <td>state</td>
                                        <td>State/province/region to ship to</td>
                                      </tr>
                                      <tr>
                                        <td>zip</td>
                                        <td>Postal/ZIP code to ship to</td>
                                      </tr>
                                      <tr>
                                        <td>country</td>
                                        <td>Country to ship to</td>
                                      </tr>
                                      <tr>
                                        <td>phone</td>
                                        <td>Addressee’s phone number</td>
                                      </tr>
                                      <tr>
                                        <td>state_id</td>
                                        <td>ID for destination state/province/region</td>
                                      </tr>
                                      <tr>
                                        <td>country_id</td>
                                        <td>ID for destination country</td>
                                      </tr>
                                      <tr>
                                        <td>destination</td>
                                        <td>residential or commercial</td>
                                      </tr>
                                      <tr>
                                        <td>last_used</td>
                                        <td>Boolean, indicating whether this was the last-used shipping address for this customer</td>
                                      </tr>
                                      <tr>
                                        <td>full_name</td>
                                        <td>Full name of addressee</td>
                                      </tr>
                                      <tr>
                                        <td>edit_url</td>
                                        <td>URL for customer to edit this shipping address</td>
                                      </tr>
                                      <tr>
                                        <td>delete_url</td>
                                        <td>URL for customer to delete this shipping address </td>
                                      </tr>
                                    </table>
                            config:
                              sidebar:
                                token: Objects
                          - title: 'Blog '
                            route:
                              path: /new-subpage
                            data:
                              blocks:
                                - type: text
                                  data: >-
                                    <a name="Stencil-Blog-ref"></a>Blog objects
                                    map to a merchant’s storefront blog:


                                    <ul>

                                    <li><a href="#Blog">Blog</a></li>
                                     <li><a href="#Post">Blog Post</a></li>
                                    </ul>


                                    These objects are called on the default
                                    `<theme-name>/templates/components/blog/post.html`
                                    partial.


                                    ## <div id="Blog"></div>Blog


                                    <b>Description:</b> Blog-specific properties
                                    for the blog feature within BigCommerce
                                    storefronts 


                                    <b>Handlebars Expression:</b> `{{blog}}`


                                    <b>Object Properties:</b>


                                    <table>
                                      <tr>
                                        <td>Property</td>
                                        <td>Description</td>
                                      </tr>
                                      <tr>
                                        <td>name</td>
                                        <td>Blog name</td>
                                      </tr>
                                      <tr>
                                        <td>url</td>
                                        <td>Blog custom url</td>
                                      </tr>
                                      <tr>
                                        <td>pagination</td>
                                        <td>References pagination model</td>
                                      </tr>
                                      <tr>
                                        <td>posts </td>
                                        <td>A list of posts for the blog index; default sorting is by date_published,<br> from most-recent to earliest</td>
                                      </tr>
                                      <tr>
                                        <td>author</td>
                                        <td>Author of the blog post</td>
                                      </tr>
                                      <tr>
                                        <td>title</td>
                                        <td>Title of the blog post</td>
                                      </tr>
                                      <tr>
                                        <td>url</td>
                                        <td>URL of the blog entry</td>
                                      </tr>
                                      <tr>
                                        <td>body</td>
                                        <td>Body of the blog entry</td>
                                      </tr>
                                      <tr>
                                        <td>thumbnail</td>
                                        <td>Image thumbnail for the blog entry, in <a href="/docs/stencil-image-common-object">Stencil image format</a></td>
                                      </tr>
                                      <tr>
                                        <td>date_published</td>
                                        <td>Date the blog entry was published</td>
                                      </tr>
                                      <tr>
                                        <td>social</td>
                                        <td>Social media tags for the blog entry</td>
                                      </tr>
                                      <tr>
                                        <td>tags </td>
                                        <td>Tags for the blog</td>
                                      </tr>
                                      <tr>
                                        <td>name</td>
                                        <td>Name for the tag</td>
                                      </tr>
                                      <tr>
                                        <td>url</td>
                                        <td>URL for the tag</td>
                                      </tr>
                                    </table>



                                    ## <div NAME="Post"></div>Blog Post


                                    <b>Description:</b> Individual blog post
                                    object


                                    <b>Handlebars Expression:</b>
                                    `{{blog.post}}`


                                    <b>Object Properties:</b>


                                    <table>
                                      <tr>
                                        <td>Property</td>
                                        <td>Description</td>
                                      </tr>
                                      <tr>
                                        <td>author</td>
                                        <td>Author of the blog post</td>
                                      </tr>
                                      <tr>
                                        <td>title</td>
                                        <td>Title of the blog post</td>
                                      </tr>
                                      <tr>
                                        <td>url</td>
                                        <td>URL of the blog entry</td>
                                      </tr>
                                      <tr>
                                        <td>body</td>
                                        <td>Body of the blog entry</td>
                                      </tr>
                                      <tr>
                                        <td>thumbnail</td>
                                        <td>Image thumbnail for the blog entry, in <a href="/docs/stencil-image-common-object">Stencil image format</a></td>
                                      </tr>
                                      <tr>
                                        <td>date_published</td>
                                        <td>Date the blog entry was published</td>
                                      </tr>
                                      <tr>
                                        <td>social</td>
                                        <td>Social media tags for the blog entry</td>
                                      </tr>
                                      <tr>
                                        <td>tags </td>
                                        <td>Tags for the blog</td>
                                      </tr>
                                      <tr>
                                        <td> name</td>
                                        <td>Name for the tag</td>
                                      </tr>
                                      <tr>
                                        <td> url</td>
                                        <td>URL for the tag</td>
                                      </tr>
                                    </table>
                            config:
                              sidebar:
                                token: Objects
                          - title: Forms
                            route:
                              path: /forms-objects
                            data:
                              blocks:
                                - type: html
                                  data: <h1>Forms Objects</h1>
                                - type: text
                                  data: >-
                                    ## Forms Objects

                                    Forms objects map to dynamic forms
                                    associated with specific objects:<br>


                                    <ul>
                                      <li><a href="#AccountForm">Account Form</a></li>
                                     <li><a href="#AddressForm">Account Address Form</a></li>
                                     <li><a href="#WishForm">Wishlist Form</a></li>
                                     <li><a href="#GiftForm">Gift Certificate Form</a></li>
                                     <li><a href="#ContactForm">Contact Us Form</a></li>
                                    </ul>
                                - type: text
                                  data: >-
                                    ### Account Form


                                    <b>Description:</b> The form object used to
                                    edit a customer object. <br>


                                    <b>Handlebars Expression:</b> <span
                                    class="inline-code">{{forms.account}}</span><br>


                                    <b>Object Properties:</b><br><br>


                                    <table>
                                      <tr>
                                        <td>Property</td>
                                        <td>Description</td>
                                      </tr>
                                      <tr>
                                        <td class="">first_name</td>
                                        <td class="">First name of the customer being edited</td>
                                      </tr>
                                      <tr>
                                        <td class="">last_name</td>
                                        <td class="">Last name of the customer being edited</td>
                                      </tr>
                                      <tr>
                                        <td class="">company_name</td>
                                        <td class="">Company of the customer being edited</td>
                                      </tr>
                                      <tr>
                                        <td class="">phone</td>
                                        <td class="">Phone number of the customer being edited</td>
                                      </tr>
                                      <tr>
                                        <td class="">error</td>
                                        <td class="">Message to display (generated by the BigCommerce App) when customer’s account edit fails</td>
                                      </tr>
                                      <tr>
                                        <td class="">success</td>
                                        <td class="">Message to display (generated by the BigCommerce App) when customer’s account edit succeeds</td>
                                      </tr>
                                    </table>
                                - type: text
                                  data: >-
                                    ### Account Address Form 


                                    <b>Description:</b> Form object presented to
                                    customers in the Add/Edit Address page.
                                    Called on the default <NOBR><span
                                    class="inline-code">&lt;theme-name&gt;/templates/components/account/address-list.html</span></nobr>
                                    partial and <NOBR><span
                                    class="inline-code">&lt;theme-name&gt;/templates/pages/account/add-address.html</span></nobr>
                                    template. <br>


                                    <b>Handlebars Expression</b><b>:</b> <span
                                    class="inline-code">{{forms.address}}</span><br>


                                    <b>Object Properties:</b><br><br>


                                    <table>
                                      <tr>
                                        <td>Property</td>
                                        <td>Description</td>
                                      </tr>
                                      <tr>
                                        <td class="">address_id</td>
                                        <td class="">ID for this shipping address</td>
                                      </tr>
                                      <tr>
                                        <td class="">shipping_fields</td>
                                        <td class="">Array of form fields that define each shipping address for this customer; for details, see this repo:
                                    https://github.com/bigcommerce/cornerstone/tree/master/templates/components/common/forms</td>
                                      </tr>
                                      <tr>
                                        <td class="">action</td>
                                        <td class="">URL to the proper handler (Update Address versus Save New Address)</td>
                                      </tr>
                                      <tr>
                                        <td class="">error</td>
                                        <td class="">Message to display when form entry fails (defined by the BigCommerce App)</td>
                                      </tr>
                                    </table>
                                - type: text
                                  data: >-
                                    ### Wishlist Form


                                    <b>Description:</b> Form object presented to
                                    customers on the Add/Edit Wishlist page.
                                    Called on the default <NOBR><span
                                    class="inline-code">&lt;theme-name&gt;/templates/components/account/add-wishlist.html</span></nobr>
                                    partial and <NOBR><span
                                    class="inline-code">&lt;theme-name&gt;/templates/pages/account/add-wishlist.html</span></nobr>
                                    template. <br>


                                    <b>Handlebars Expression:</b> <span
                                    class="inline-code">{{forms.wishlist}}</span><br>


                                    <b>Object Properties:</b><br><br>


                                    <table>
                                      <tr>
                                        <td>Property</td>
                                        <td>Description</td>
                                      </tr>
                                      <tr>
                                        <td class="">name</td>
                                        <td class="">Displayed name for this wishlist</td>
                                      </tr>
                                      <tr>
                                        <td class="">id</td>
                                        <td class="">ID for this wishlist</td>
                                      </tr>
                                      <tr>
                                        <td class="">is_public</td>
                                        <td class="">Boolean indicating whether this wishlist is displayed to other store visitors</td>
                                      </tr>
                                      <tr>
                                        <td class="">errors</td>
                                        <td class="">Message to display when form entry fails (generated by the BigCommerce App)</td>
                                      </tr>
                                      <tr>
                                        <td class="">action</td>
                                        <td class="">URL to the proper handler (Update Wish List versus Save New Wish List)</td>
                                      </tr>
                                    </table>
                                - type: text
                                  data: >-
                                    <h2> <A NAME="GiftForm"></a>Gift Certificate
                                    Form</h2>


                                    <b>Description:</b><b><em> </em></b>Form
                                    object used to create and edit a gift
                                    certificate object for the merchant's store.
                                    Called on the default <NOBR><span
                                    class="inline-code">&lt;theme-name&gt;templates/pages/gift-certificate/purchase.html</span></nobr>
                                    template. <br>


                                    <b>Handlebars Expression:</b> <span
                                    class="inline-code">{{forms.gift_certificate}}</span><br>


                                    <b>Object Properties:</b><br><br>


                                    <table>
                                      <tr>
                                        <td>Property</td>
                                        <td>Description</td>
                                      </tr>
                                      <tr>
                                        <td class="">editing</td>
                                        <td class="">Whether the current context is editing a gift certificate in the cart, or adding a new gift certificate</td>
                                      </tr>
                                      <tr>
                                        <td class="">can_use_custom_amount</td>
                                        <td class="">Whether the customer can enter free-text input (otherwise, must select from a drop-down list)</td>
                                      </tr>
                                      <tr>
                                        <td class="">amount_options</td>
                                        <td class="">If can_use_custom_amount is disabled, this variable fills the dropdown with the available options, in <a href="/docs/price-common-object">price object</a> form</td>
                                      </tr>
                                      <tr>
                                        <td class="">minimum</td>
                                        <td class=""><a href="/docs/price-common-object">Price object</a> that defines the minimum amount a customer can enter (when can_use_custom_amount is enabled)</td>
                                      </tr>
                                      <tr>
                                        <td class="">maximum</td>
                                        <td class=""><a href="/docs/price-common-object">Price object</a> that defines the minimum amount a customer can enter  (when can_use_custom_amount is enabled)</td>
                                      </tr>
                                      <tr>
                                        <td class="">expires_in_days</td>
                                        <td class="">If the gift certificates expire, this will be non-0 numerical days</td>
                                      </tr>
                                      <tr>
                                        <td class="">errors</td>
                                        <td class="">Server-side validation errors from the form’s submission</td>
                                      </tr>
                                      <tr>
                                        <td class="">themes</td>
                                        <td class="">A list of active gift-certificate themes (Birthday, Celebration, General, etc.), each stored as an object containing corresponding display and value children</td>
                                      </tr>

                                      <tr>
                                        <td class=""><span class="indent1">display</span></td>
                                        <td class="">Birthday, Celebration, General, etc.</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1">value</span></td>
                                        <td class="">Birthday.html, Celebration.html, General.html, etc.</td>
                                      </tr>
                                      
                                      <tr>
                                        <td class="">action</td>
                                        <td class="">The action for the form</td>
                                      </tr>
                                      <tr>
                                        <td class="">cart_item_id</td>
                                        <td class="">If editing, this is the cart item id being edited.</td>
                                      </tr>
                                      <tr>
                                        <td class="">values</td>
                                        <td class="">An array of the form values for prefilling</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1">to_name</span></td>
                                        <td class="">The recipient's name</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1">to_email</span></td>
                                        <td class="">To email address</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1">from_name</span></td>
                                        <td class="">The sender’s name</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1">from_email</span></td>
                                        <td class="">From email address</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1">message</span></td>
                                        <td class="">An optional custom message</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1">amount</span></td>
                                        <td class=""><a href="/docs/price-common-object">Price object</a> that defines the amount of the gift certificate</td>
                                      </tr>
                                    </table>
                                - type: text
                                  data: >-
                                    ### Contact Us Form 


                                    <b>Description:</b><b><em> </em></b>Form
                                    object used to manage merchants’ "Contact
                                    Us" pages. Called on the default <NOBR><span
                                    class="inline-code">&lt;theme-name&gt;/templates/pages/contact-us.html</span></nobr>
                                    template. <br>


                                    <b>Handlebars Expression:</b> <span
                                    class="inline-code">{{forms.contact}}</span><br>


                                    <b>Object Properties:</b><br><br>


                                    <table>
                                      <tr>
                                        <td>Property</td>
                                        <td>Description</td>
                                      </tr>
                                      <tr>
                                        <td class="">success</td>
                                        <td class="">Boolean indicating whether form was just submitted</td>
                                      </tr>
                                      <tr>
                                        <td class="">name</td>
                                        <td class="">Boolean indicating whether name input is enabled for the form</td>
                                      </tr>
                                      <tr>
                                        <td class="">company</td>
                                        <td class="">Boolean indicating whether company-name input is enabled for the form</td>
                                      </tr>
                                      <tr>
                                        <td class="">phone</td>
                                        <td class="">Boolean indicating whether phone-number input is enabled for the form</td>
                                      </tr>
                                      <tr>
                                        <td class="">order</td>
                                        <td class="">Boolean indicating whether order-number input is enabled for the form</td>
                                      </tr>
                                      <tr>
                                        <td class="">rma</td>
                                        <td class="">Boolean indicating whether RMA (Return Merchandise Authorization) input is enabled for the form</td>
                                      </tr>
                                      <tr>
                                        <td class="">page_id</td>
                                        <td class="">Page ID for this contact page (there can be multiple contact pages)</td>
                                      </tr>
                                      <tr>
                                        <td class="">captcha_url</td>
                                        <td class="">URL to provide an image file for a CAPTCHA field</td>
                                      </tr>
                                      <tr>
                                        <td class="">text</td>
                                        <td class="">Text content to display above the form</td>
                                      </tr>
                                      <tr>
                                        <td class="">error</td>
                                        <td class="">Potential error that occurred during previous form submission</td>
                                      </tr>
                                    </table>
                            config:
                              sidebar:
                                token: Objects
                config:
                  sidebar:
                    token: Reference
            blocks: []
          config:
            sidebar:
              token: ''
        - title: CSS And Design Assets
          route:
            path: /css-and-design-assets
          data:
            children:
              - title: Assets Directory
                route:
                  path: /assets-directory
                data:
                  blocks:
                    - type: html
                      data: <h1>Assets Directory</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#assets_the-assets-directory\">The <code>assets</code> Directory</a></li>\n    <li><a href=\"#assets_video-demo\">Video Demo</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >-
                        ## The `assets` Directory


                        Each Stencil theme’s `<theme-name>/assets/` directory
                        contains CSS, JavaScript, and image assets that help
                        create the design of storefront pages. A minimal
                        `<theme-name>/assets/` directory contains the files and
                        subdirectories that you can view on the [Cornerstone
                        Github
                        Repository](https://github.com/bigcommerce/cornerstone/tree/master/assets).


                        We will go further into detail about the subdirectories
                        within `/assets/` below: 


                        ### The `cdn` Subdirectory


                        The `/cdn/` subdirectory is designed to contain large
                        static assets that you will upload to a content delivery
                        network, separately from the rest of your theme. For
                        this reason – and by design – the contents of this
                        directory (only) are excluded from theme bundling. For
                        details, see Staging a Theme for CDN Delivery.


                        ### The `fonts` Subdirectory


                        The `/fonts/` subdirectory contains local versions of
                        theme-specific fonts.


                        ### The `icons` Subdirectory


                        The `/icons/` subdirectory contains .svg files for icons
                        used within a theme.


                        ### The `img` Subdirectory


                        The `/img/` subdirectory contains images used in the
                        theme’s display – background images, sprites, and other
                        images not related to store content.


                        You would typically reference these image assets using
                        Stencil's cdn Handlebars helper. For example,
                        generically:


                        `<img src="{{cdn 'assets/img/image.jpg'}}">`


                        Or, with a realistic file name:


                        `<img src="{{cdn 'assets/img/size-chart.png'}}">`


                        **Note:** For Stencil themes only, images that use the
                        default zoom library pass through Akami Image Manager.
                        This chooses the best image to serve based on device. To
                        bypass the image optimization, include imbypass=on as a
                        query parameter in the image url. This will serve
                        un-optimized images.


                        `<img src="{{cdn 'webdav:img/image.jpg?imbypass=on'}}">`


                        `<img src="{{getImage settings.store_logo.image
                        'logo_size'}}?imbypass=on">`


                        `<img src="{{cdn 'assets/img/image.jpg?imbypass=on'}}">`


                        ### The `js` Subdirectory


                        The `/js/` subdirectory contains general JavaScript
                        files used in the theme.


                        ### The `scss` Subdirectory


                        The `/scss/` subdirectory contains theme-specific CSS
                        resources.
                      header:
                        anchor: assets_the-assets-directory
                    - type: callout
                      data:
                        type: warning
                        title: ' Production-Safe Image References'
                        body: >+
                          To avoid unexpected 404 errors on your production
                          store, we recommend that you use short relative paths
                          in your SCSS to reference images in your `/img/`
                          subdirectory. So, for example, use references of the
                          form:

                          `background: url('../img/header-bg.png');` rather than
                          references of the form:

                          `background: url('/assets/img/header-bg.png');`

                    - type: text
                      data: '---'
                    - type: text
                      data: >
                        ## Video Demo


                        Watch a video tour of the `/assets/` directory, its
                        `/scss/` subdirectory, interactions between CSS and
                        `config.json` values, Stencil custom Sass functions, and
                        the `/img/` subdirectory.


                        <iframe width="560" height="315"
                        src="https://www.youtube.com/embed/zUDNgprOEts"
                        frameborder="0" allow="autoplay; encrypted-media"
                        allowfullscreen></iframe>
                      header:
                        anchor: assets_video-demo
                    - type: callout
                      data:
                        type: warning
                        body: >-
                          This section's remaining pages list certain
                          restrictions on changing some subdirectories'
                          structure, contents, and file names.


                          In parts of your theme's directory tree where you are
                          free to add new subdirectories and files, be sure to:


                          * Set newly added directories to permission `755
                          (drwxr-xr-x)`.

                          * Set newly added files to permission `644
                          (rw-r--r--)`.

                          * Without these permissions, running your theme
                          locally will fail, with multiple error messages.
                          Bundling your theme will also fail, blocking its
                          upload to a store.
                        title: |2
                           Directory and File Restrictions/Permissions
              - title: Components Directory & Design Patterns
                route:
                  path: /stencil-design-patterns
                data:
                  blocks:
                    - type: html
                      data: <h1>Components Directory and Design Patterns</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#components_design-patterns\">Design Patterns</a></li>\n    <li><a href=\"#components_components-directory\">Components Directory</a></li>\n    <li><a href=\"#components_citadel-sub\">The <code>citadel</code> Subdirectory</a></li>\n    <li><a href=\"#components_foundation-sub\">The <code>foundation</code> Subdirectory</a></li>\n    <li><a href=\"#components_stencil-sub\">The <code>stencil</code> Subdirectory</a></li>\n    <li><a href=\"#components_vendor-sub\">The <code>vendor</code> Subdirectory</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >-
                        ## Design Patterns


                        Stencil themes include an internal pattern library
                        called Citadel, which consumes the ZURB Foundation
                        framework. Foundation provides the basis for creating
                        responsive themes. Citadel extends the Foundation
                        framework’s mixins and components to provide Stencil’s
                        own mixins, extensible components, and utilities.


                        **Note:** _Citadel is based specifically on Foundation
                        5.5.3, which installs with the Stencil framework.
                        (Direct download link is
                        [here](https://github.com/zurb/foundation-sites/releases/tag/v5.5.3);
                        documentation is
                        [here](https://foundation.zurb.com/sites/docs/v/5.5.3/).)
                        We do not support Foundation 6.x, due to breaking
                        changes introduced between versions 5.x and 6.x._


                        A theme developer might use drop-down lists, forms, and
                        similar resources from Citadel’s design patterns. The
                        design/style language underlying these Citadel resources
                        is the Sass/SCSS preprocessor.
                      header:
                        anchor: components_design-patterns
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Components Directory 


                        Citadel design patterns reside in the
                        `<theme-name>/assets/scss/components/` subdirectory. The
                        components subdirectory contains the 4 following
                        subdirectories:

                        * `/citadel/`, 

                        * `/foundation/`,

                        * `/stencil/`, and 

                        * `/vendor/`.



                        You can see the components directory and its children
                        present in the [Cornerstone Theme Github
                        Repository](https://github.com/bigcommerce/cornerstone/tree/master/assets/scss/components).
                      header:
                        anchor: components_components-directory
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## The `citadel` Subdirectory


                        The `components/citadel` subdirectory contains
                        Citadel-specific resources. The resources are named
                        according to our [style
                        guide](https://github.com/bigcommerce/sass-style-guide),
                        which follows [BEM](http://getbem.com/naming/) and [SUIT
                        CSS](https://github.com/suitcss/suit/blob/master/doc/naming-conventions.md)
                        naming conventions: Class names are structured, and
                        hyphens are meaningful (that is, hyphens are not used
                        merely to separate words). 


                        As a general rule, classes here are named functionally,
                        not based on their visual presentation or their content.
                        Here are some prototypes and examples:


                        * `componentName` (for example: `.dropdown or
                        .buttonGroup`)


                        * `componentName--modifierName` (for example:
                        `.dropdown--dropUp` or `.button--primary`)


                        * `componentName-descendantName` (for example:
                        `.dropdown-item`)


                        * `componentName.is-stateOfComponent` (for example:
                        `.dropdown.is-active`)


                        * `u-utilityName` (for example: `.u-textTruncate`)


                        * Abstractly:
                        `[<namespace>-]<componentName>[--modifierName|-descendentName]`


                        ### Components versus Utilities


                        Our naming scheme makes an architectural distinction
                        between components and utilities. Components are defined
                        as custom elements that enclose specific semantics,
                        styling, and behavior. Our syntax for naming them is:


                        `<componentName>[--modifierName|-descendantName]`


                        Component names are in camel case. We have tried to
                        choose names that are as short as possible, but as long
                        as necessary. For example:


                        * `.nav`, not `.navigation`; but:

                        * `.button`, not `.btn`


                        Utility classes are defined as low-level, structural and
                        positional traits. Utilities can be applied directly to
                        any element. Multiple utilities can be used together,
                        and utilities can be used alongside component classes.


                        To make HTML patterns as reusable as possible, we have
                        used utility classes sparingly, reserving them for
                        component-level styling.


                        Our syntax for naming utilities is camel case, prefixed
                        with a `u-` namespace:


                        `u-<utilityName>`


                        ### Variables and Mixins


                        Citadel variables and mixins follow similar naming
                        conventions.


                        Variables are things that can change over time. Their
                        names are in camel case, and show context:


                        `
                        [<componentName>[--modifierName][-descendentName]-<propertyName>

                        -<variablename>[--<modifierName>]`


                        Mixins follow regular camel-case naming conventions.
                        Namespacing is not universally required for mixins.
                        However, where a mixin has been created for a utility,
                        its name matches the utility’s name, including `u-`
                        namespacing:


                        ```

                        @mixin buttonVariant;

                        @mixin u-textTruncate;

                        ```
                      header:
                        anchor: components_citadel-sub
                    - type: text
                      data: '---'
                    - type: text
                      data: >
                        ## `foundation` Subdirectory


                        The `/components/foundation/` subdirectory contains
                        files installed by the [ZURB Foundation
                        framework](https://foundation.zurb.com/showcase/about.html).
                        (Stencil's Foundation support is limited to version
                        5.5.3.)
                      header:
                        anchor: components_foundation-sub
                    - type: text
                      data: '---'
                    - type: text
                      data: >
                        ## `stencil` Subdirectory


                        The `/components/stencil/` subdirectory contains CSS
                        files unique to Stencil themes, which are used to create
                        specific page elements within the themes. You can view
                        this subdirectory and all its children in the
                        [Cornerstone Theme Github
                        Repository](https://github.com/bigcommerce/cornerstone/tree/master/assets/scss/components/stencil).


                        This subdirectory’s children contain CSS for the
                        following page elements:


                        This subdirectory’s children contain CSS for the
                        following page elements:


                        <p></p><table>
                          <tbody><tr>
                            <th>Subdirectory</th>
                            <th>UI Element/Purpose</th>
                          </tr>
                          <tr>
                            <td>account</td>
                            <td>Customer account details</td>
                          </tr>
                          <tr>
                            <td>addressBox</td>
                            <td>Customer shipping addresses</td>
                          </tr>
                          <tr>
                            <td>addReturn</td>
                            <td>Add a product-return request</td>
                          </tr>
                          <tr>
                            <td>banners</td>
                            <td>Banners displayed across storefront’s top and bottom</td>
                          </tr>
                          <tr>
                            <td>blocker</td>
                            <td>Position .blocker element above another element, to prevent a user action</td>
                          </tr>
                          <tr>
                            <td>compare</td>
                            <td>Layout for product-comparison table</td>
                          </tr>
                          <tr>
                            <td>facetedSearch</td>
                            <td>Faceted-search toggle (on/off), navigation list, and filters</td>
                          </tr>
                          <tr>
                            <td>facetLabel</td>
                            <td>Labels for faceted-search display</td>
                          </tr>
                          <tr>
                            <td>heroCarousel</td>
                            <td>Carousel of prominent ("hero") images</td>
                          </tr>
                          <tr>
                            <td>navPages</td>
                            <td>Styles for page navigation, with responsive layout</td>
                          </tr>
                          <tr>
                            <td>navUser</td>
                            <td>Styles for cart counter, quick search</td>
                          </tr>
                          <tr>
                            <td>productCarousel</td>
                            <td>Carousel of product images</td>
                          </tr>
                          <tr>
                            <td>productReviews</td>
                            <td>Styles for product reviews</td>
                          </tr>
                          <tr>
                            <td>productView</td>
                            <td>Product display (with thumbnails suppressed for mobile/tablet), product details, product options (size, color, etc.), product sharing</td>
                          </tr>
                          <tr>
                            <td>quickView</td>
                            <td>Quick-view modal window for a selected product</td>
                          </tr>
                          <tr>
                            <td>ribbon</td>
                            <td>Top-right text badges, for messages like "On sale"</td>
                          </tr>
                          <tr>
                            <td>socialLinks</td>
                            <td>Styles for social-media links</td>
                          </tr>
                          <tr>
                            <td>tags</td>
                            <td>Styles for blog-post tags</td>
                          </tr>
                          <tr>
                            <td>toggleLink</td>
                            <td>Styles for collapsible/expandable components</td>
                          </tr>
                          <tr>
                            <td>writeReview</td>
                            <td>Styles for product-review submission form</td>
                          </tr>
                        </tbody></table>
                      header:
                        anchor: components_stencil-sub
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## `vendor` Subdirectory


                        The `/components/vendor/` subdirectory contains the
                        consumed version of framework components from your
                        chosen provider. There is some renaming of these
                        components to match Stencil naming conventions.
                      header:
                        anchor: components_vendor-sub
              - title: 'Layouts, Utilities, & Settings Directories'
                route:
                  path: /layouts-and-utilities-directory
                data:
                  blocks:
                    - type: html
                      data: >-
                        <h1>The <code>layouts</code>, <code>utilities</code>,
                        and <code>settings</code> Directories</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#layouts-utilities-settings_the-layouts-directory\">The <code>layouts</code> Directory</a></li>\n    <li><a href=\"#layouts-utilities-settings_the-utilities-directory\">The <code>utilities</code> Directory</a></li>\n    <li><a href=\"#layouts-utilities-settings_the-settings-directory\">The <code>settings</code> Directory</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >-
                        ## The `layouts` Directory


                        The `<theme-name>/assets/scss/layouts/` subdirectory
                        contains `.scss` files that provide default styling for
                        major layout components of theme pages. You can see the
                        `/layouts/` subdirectory's internal structure on the
                        [Cornerstone Github
                        Repository](https://github.com/bigcommerce/cornerstone/tree/master/assets/scss/layouts)
                      header:
                        anchor: layouts-utilities-settings_the-layouts-directory
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## The `utilities` Directory


                        The `<theme-name>/assets/scss/utilities` subdirectory
                        contains mixins and tools, beyond the Citadel library,
                        that help create UI’s. You can apply these CSS snippets
                        to your HTML for quick prototyping when you need a
                        unique, yet repeatable, style.


                        Every utility in this subdirectory will have both a
                        class and a mixin. For example, consider the utility
                        `truncatedText:` You can use it by applying the class
                        `.u-truncatedText`, or by applying the mixin @include
                        u-truncatedText;.
                      header:
                        anchor: layouts-utilities-settings_the-utilities-directory
                    - type: text
                      data: '---'
                    - type: text
                      data: "## The `settings` Directory\n\nThe `<theme-name>/assets/scss/settings/` subdirectory contains SCSS variables for your framework. Files here map directly to components. If present, these variables override defaults in consumed libraries. The `/settings/` subdirectory's internal structure can be viewed at the [Cornerstone Github Repository](https://github.com/bigcommerce/cornerstone/tree/master/assets/scss/settings) \n\t\nThe nested subdirectory for your chosen framework contains a file that includes that framework’s variables. (For example, in the default Stencil theme, this file is: `/settings/foundation/_foundation.scss`.)\n\nWithin each subdirectory nested at the ultimate level is one primary file, `_settings.scss`, that imports all other variables that have been broken into logical files (such as `_colors.scss`, `_typography.scss`, and `_z-index.scss`).\n\t\n### Sass Stylesheet Support for Theme Fonts\n\t\nTo support Theme Editor, your theme's Sass stylesheet must call Stencil's custom Sass functions to transform fonts specified in the theme's `config.json` file. You must call these functions on each `config.json` font key whose value you want to make available to Sass variables.\n\nThe default Stencil theme includes these function calls in this stylesheet:\n`<theme-name>/assets/scss/settings/foundation/type/_settings.scss`. However, if your theme relies on a Sass framework other than Foundation, the relevant stylesheet will be a different .scss file name within `<theme-name>/assets/scss/`.\n\n\t\n### How to Enable Fonts for Theme Editor\n\nAssume that your theme's `config.json` contains the following key name and value (the details of both are arbitrary, but the key name must end in `-font`, and the value must follow a defined format):\n\t\n`\"headings-font\": \"Google_Open+Sans_700\"`\n\t\nIn your Sass stylesheet, you would call the stencilFontFamily and stencilFontWeight custom Sass functions on the corresponding `config.json` key name:\n\t\n```\n$body-font-family: stencilFontFamily(\"body-font\");\n$body-font-weight: stencilFontWeight(\"body-font\");\n```\n\nThese functions would extract the corresponding `config.json` values as:\n\n```\n$body-font-family: 'Open Sans';\n$body-font-weight: 700;\n```\n\t\nThis transformation allows you to use the `$body-font-family` and `$body-font-weight` variables wherever needed in your theme. If a merchant uses Theme Editor to select a different font family and/or weight, the variables will propagate the change throughout your theme.\n"
                      header:
                        anchor: layouts-utilities-settings_the-settings-directory
              - title: Custom Sass Functions
                route:
                  path: /custom-sass-functions
                data:
                  blocks:
                    - type: html
                      data: <h1>Custom Sass Functions</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#custom-sass-functions_stencilcolor\">stencilColor Function</a></li>\n    <li><a href=\"#custom-sass-functions_stencilfontfamily\">stencilFontFamily Function</a></li>\n    <li><a href=\"#custom-sass-functions_stencilfontweight\">stencilFontWeight Function</a></li>\n    <li><a href=\"#custom-sass-functions_stencilnumber\">stencilNumber Function</a></li>\n    <li><a href=\"#custom-sass-functions_stencilstring\">stencilString Function</a></li>\n    <li><a href=\"#custom-sass-functions_stencilimage\">stencilImage Function</a></li>\n    <li><a href=\"#custom-sass-functions_compiling-custom-sass-files\">Compiling Custom Sass Files</a></li>\n\t</ul>\n</div>\n"
                    - type: text
                      data: >-
                        ## stencilColor Function


                        stencilColor accepts (as a string) the key name of a
                        color that you have defined in config.json as editable.
                        It returns the color’s hexadecimal value.


                        In Stencil's Cornerstone (1.4.0) base theme, the
                        optimized-checkout.scss file sets the background color
                        for the page's header with the following code:


                        ```

                        .optimizedCheckout-header {
                            background-color: stencilColor("optimizedCheckout-header-backgroundColor");
                            // scss-lint:disable StringQuotes
                            background-image: url(stencilImage('optimizedCheckout-backgroundImage', 'optimizedCheckout-backgroundImage-size'));
                            // scss-lint:enable StringQuotes
                            background-size: cover;
                            ...
                        }

                        ```


                        The above CSS fetches the background-color property's
                        value by using the stencilColor() function to retrieve
                        the optimizedCheckout-header-backgroundColor key's
                        current value.


                        That optimizedCheckout-header-backgroundColor key is
                        defined, and assigned a default value, in config.json.
                        However, merchants can use Theme Editor to change the
                        value at any time. So using this stencilColor() call,
                        the key's current value (which might have been altered
                        from the static default value in config.json) will be
                        fetched from a BigCommerce settings server.
                      header:
                        anchor: custom-sass-functions_stencilcolor
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## stencilFontFamily Function


                        stencilFontFamily accepts (as a string) the name of a
                        font key that you have defined in config.json. It
                        returns the corresponding font-family value, also as a
                        string. For a key named "headings-font" and defined as
                        Google Open Sans, stencilFontFamily would return a value
                        like this to Sass variables:


                        `$headings-‐font-‐family: 'Open Sans';`


                        (The above example's name and definition in config.json
                        are both arbitrary.)


                        Your Sass stylesheet must call stencilFontFamily for
                        each config.json font key whose font-family value you
                        want to provide to Sass variables. You would call the
                        function in the following format (again assuming a key
                        arbitrarily named "headings-font"):


                        `$headings-font-family:
                        stencilFontFamily("headings-font");`
                      header:
                        anchor: custom-sass-functions_stencilfontfamily
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## stencilFontWeight Function


                        stencilFontWeight accepts (as a string) the key name of
                        a font that you have defined in config.json. It returns
                        (as an integer) the corresponding font-weight value. For
                        a key arbitrarily named "headings-font" and defined as
                        700, it would return a value like this to Sass
                        variables:


                        `$headings-‐font-‐weight: 700;`


                        Your Sass stylesheet may optionally call
                        stencilFontWeight for each config.json font key whose
                        weight value you want to provide to Sass variables. You
                        would call the function in the following format:


                        `$headings-font-weight:
                        stencilFontWeight("headings-font");`
                      header:
                        anchor: custom-sass-functions_stencilfontweight
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## stencilNumber Function


                        `stencilNumber` accepts (as a string) a key name that
                        you have defined in `config.json` as editable. It also
                        accepts (also as a string) an _optional_ second
                        parameter to define the unit. (This second parameter’s
                        value defaults to `"px"`.) It returns the corresponding
                        numeric value, postfixed with the defined unit.


                        You can use this function with arithmetical operators.
                        For example, assume that your `config.json` contains a
                        `"font-size"` value of `"3"`. The following statement
                        would evaluate to `9rem`.


                        `stencilNumber("font-size", "rem") * 3`
                      header:
                        anchor: custom-sass-functions_stencilnumber
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## stencilString Function


                        `stencilString` accepts (as a string) a key name that
                        you have defined in `config.json` as editable. It
                        returns (also as a string) the key’s value. This
                        function is used for purposes like defining font family
                        names, or defining paths to images.
                      header:
                        anchor: custom-sass-functions_stencilstring
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## stencilImage Function


                        `stencilImag`e accepts (as a string) a key name for an
                        image url that you have defined in `config.json`. It
                        also accepts (as a string) the key name for the image
                        size that you have defined in `config.json`. It returns
                        the string value of the image URL and the size.
                      header:
                        anchor: custom-sass-functions_stencilimage
                    - type: text
                      data: >
                        ## Compiling Custom Sass Files


                        If you want to add your own custom Sass files, initiate
                        auto-compilation of those files by including the
                        associated tag in your HTML markup. Cornerstone's Sass
                        file is named:


                        `/cornerstone/assets/scss/theme.scss`


                        To add a custom Sass file, place it at this path
                        location, using an arbitrary filename prefix as shown:


                        `<theme-name>/assets/scss/<your-theme-or-file-name>.scss`


                        For example, to use the Foundation Sass framework, you
                        might need:


                        `<theme-name>/assets/scss/main.scss`

                        `<theme-name>/assets/scss/widgets.scss`


                        Next, be sure the following tag is included within your
                        `<theme-name>/templates/layout/base.html` file’s
                        `<head>` tag, to compile your Sass to the specified
                        object file:


                        `{{stylesheet '/assets/css/theme.css'}}`


                        While `stencil start` is running, it will recompile your
                        custom Sass files to the specified
                        `<theme-name>/assets/css/theme.css` file. (Note that
                        this object file’s name is always the same, and is
                        independent of your custom Sass files’ names.) For an
                        additional example, please see Replacing Content Blocks.
                      header:
                        anchor: custom-sass-functions_compiling-custom-sass-files
                    - type: callout
                      data:
                        type: warning
                        body: >-
                          The Stencil framework is designed to support your
                          incorporation of custom Sass files/frameworks.
                          However, BigCommerce does not offer technical
                          assistance on substitutions for, or customized
                          versions of, Stencil's default dependencies.
                        title: Before You Customize
              - title: Page Composition and Styling
                route:
                  path: /page-composition-and-styling
                data:
                  blocks:
                    - type: html
                      data: <h1>Page Composition and Styling</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#page-composition_referencing-css-stylesheet\">Referencing a CSS Stylesheet</a></li>\n    <li><a href=\"#page-composition_template-composition\">Template Composition</a></li>\n\t</ul>\n</div>\n\n\n\n\n"
                    - type: text
                      data: >-
                        ## Referencing a CSS Stylesheet


                        To apply CSS styling to a page in your theme, make sure
                        that page's code includes a reference to the stylesheet
                        you want to use. This example does so using the
                        `{{partial}}` and `{{cdn}}` custom Handlebars helpers:


                        ```

                        {{#partial "head"}}
                            <link href="{{cdn '/assets/css/invoice.css'}}" rel="stylesheet">
                        {{/partial}}

                        ```
                      header:
                        anchor: page-composition_referencing-css-stylesheet
                    - type: text
                      data: '---'
                    - type: text
                      data: "## Template Composition\n\nTemplate composition is a valuable Stencil feature. By defining blocks of overrideable content, your themes can insert templates on a per-page basis, while sharing code that is common to the whole theme.\n\n### Defining Content Blocks\n\nA base template defines content blocks by name. The following snippet uses `{{block}}` custom Handlebars helpers to define three content blocks, respectively named `head`, `hero`, and `page`:\n\n```\n// templates/layout/base.html\n<!DOCTYPE html>\n<html>\n    <head>\n        <title>{{ head.title }}</title>\n        {{#block \"head\"}} {{/block}}\n    </head>\n    <body>\n        <div class=\"body\">\n\t\t    {{#block \"hero\"}} {{/block}}\n\t\t    <div class=\"container\">\n\t\t        {{#block \"page\"}} {{/block}}\n\t\t    </div>\n\t\t    {{> components/common/modal}}\n        </div>\n    </body>\n</html>\n```\n\n### Replacing Content Blocks\n\nPages can use a base template, replacing the defined blocks with their own content. This example replaces content for the head and page blocks:\n\n```\n//templates/pages/account/orders/invoice.html\n{{#partial \"head\"}}\n    <link href=\"{{cdn '/assets/css/invoice.css'}}\" rel=\"stylesheet\">\n{{/partial}}\n\n{{#partial \"page\"}}\n    <p>An invoice for a particular order would go here</p>\n{{/partial}}\n{{> layout/empty}}\n```\n\n### Matching Partials with Blocks\n\nWe recommend that, for any given name defined within the template rendering path, you maintain a 1:1 mapping of partials to blocks."
                      header:
                        anchor: page-composition_template-composition
              - title: Using Custom Fonts
                route:
                  path: /using-custom-fonts
                data:
                  blocks:
                    - type: html
                      data: <h1>Using Custom Fonts</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#using-custom-fonts_stage-the-fonts\">Stage the Fonts</a></li>\n    <li><a href=\"#using-custom-fonts_reference-fonts\">Reference Fonts in Templates' <code>head</code></a></li>\n    <li><a href=\"#using-custom-fonts_video-demo\">Video Demo</a></li>\n    <li><a href=\"#using-custom-fonts_update-the-css\">Update the CSS</a></li>\n\t</ul>\n</div>\n"
                    - type: callout
                      data:
                        type: warning
                        title: Custom Fonts Unavailable on Theme Editor
                        body: >-
                          On the current Stencil framework, custom fonts that
                          you incorporate using this process will not be
                          available for selection in Theme Editor.
                    - type: text
                      data: >
                        ## Stage the Fonts


                        First, acquire your custom fonts. In this logo scenario,
                        we'll assume the single (nonexistent) font
                        `MyFontFile.ttf`.

                        Next, [use WebDav to upload each custom font](). (Upload
                        to WebDAV's default `/content/` folder.)
                      header:
                        anchor: using-custom-fonts_stage-the-fonts
                    - type: text
                      data: '---'
                    - type: text
                      data: "## Reference Fonts in Templates' `<head>`\n\nNext, edit the appropriate template files' `<head>` sections to reference your custom fonts. In this logo example, you would edit the `/cornerstone/templates/layout/base.html` file's `<head>` section to insert the following code, which references the custom font you just uploaded:\n\t\n```\n<style type=\"text/css\" media=\"screen, print\">\n           @font-face {\n               font-family: \"MyFont\";\n               src: url(\"{{cdn 'webdav:MyFontFile.ttf'}}\");\n           }\n</style>\n```"
                      header:
                        anchor: using-custom-fonts_reference-fonts
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Video Demo


                        Watch a video demonstration of referencing custom fonts
                        in your template files' `<head>` sections: 


                        <iframe width="560" height="315"
                        src="https://www.youtube.com/embed/-w7Hbn_p_pw"
                        frameborder="0" allow="autoplay; encrypted-media"
                        allowfullscreen></iframe>
                      header:
                        anchor: using-custom-fonts_video-demo
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Update the CSS


                        Finally, update the appropriate CSS to reference the
                        same font. Here, you would edit the
                        `/cornerstone/assets/scss/layouts/header/_header.scss`
                        file to include the two lines below `.header-logo-text`:


                        ```

                        .header-logo-text {

                        display: block;
                           font-family: 'MyFont';
                           [...]
                        }

                        ```
                      header:
                        anchor: using-custom-fonts_update-the-css
                    - type: callout
                      data:
                        title: Notes
                        body: >-
                          * The cdn custom Handlebars helper assumes WebDAV's
                          default /content/ folder, so there is no need to
                          specify that folder.

                          * Fonts staged via WebDAV, as in the above example,
                          will not show up in the local version of your theme.
              - title: Using and Updating Icons
                route:
                  path: /using-and-updating-icons
                data:
                  blocks:
                    - type: html
                      data: <h1>Using and Updating Icons</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#using-and-updating-icons_installing-grunt\">Installing Grunt</a></li>\n    <li><a href=\"#using-and-updating-icons_calling-theme-icons\">Calling Theme Icons</a></li>\n    <li><a href=\"#using-and-updating-icons_adding-new-icons\">Adding New Icons</a></li>\n    <li><a href=\"#using-and-updating-icons_video-demo\">Video Demo</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >
                        ## Installing Grunt


                        Some of a Stencil theme's static assets are handled with
                        the Grunt JavaScript automator, where required. This
                        means that you have some dependencies on both Grunt and
                        npm. To get started:


                        First, make sure you have Grunt installed globally on
                        your machine:


                        `npm install -g grunt-cli`


                        Then, from your theme's root directory, run:


                        `npm install`
                      header:
                        anchor: using-and-updating-icons_installing-grunt
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Calling Theme Icons 


                        A Stencil theme's icons are delivered via a single SVG
                        sprite, which is embedded on the page in

                        `<theme-name>templates/layout/base.html`. This sprite is
                        generated via the Grunt task `grunt svgstore`.


                        The task takes individual SVG files for each icon (in
                        the theme's `assets/icons/` subdirectory) and bundles

                        them together, to be inlined on the top of the theme,
                        inside a Handlebars partial.


                        You can then call each icon in a similar way to an
                        inline image, via:


                        `<svg><use xlink:href="#icon-svgFileName" /></svg>`


                        The ID of each SVG icon you call is based on the
                        filename of the icon you want, with `icon-` prepended.

                        For example:


                        `xlink:href="#icon-facebook"`
                      header:
                        anchor: using-and-updating-icons_calling-theme-icons
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Adding New Icons


                        Simply add your new icon SVG file to the `assets/icons/
                        `folder. Then, from your theme's root directory, run
                        `grunt svgstore` or just `grunt`.
                      header:
                        anchor: using-and-updating-icons_adding-new-icons
                    - type: text
                      data: '---'
                    - type: text
                      data: >
                        ## Video Demo


                        Watch a video demonstration of installing Grunt and
                        using it to update your theme's SVG sprite with custom
                        icons: 


                        <iframe width="560" height="315"
                        src="https://www.youtube.com/embed/-w7Hbn_p_pw"
                        frameborder="0" allow="autoplay; encrypted-media"
                        allowfullscreen></iframe>
                      header:
                        anchor: using-and-updating-icons_video-demo
        - title: Event Hooks
          route:
            path: /adding-event-hooks-to-your-theme
          data:
            children:
              - title: Event Hook Overview and Examples
                route:
                  path: /event-hook-overview-and-examples
                data:
                  blocks:
                    - type: html
                      data: <h1>Event Hook Overview and Examples</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#event_event-hook\">Event Hook Overview</a></li>\n    <li><a href=\"#event_cookie-notification\">Cookie Notification Example</a></li>\n    <li><a href=\"#event_cart-dialog\">Cart Dialog Example</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >-
                        ## Event Hook Overview 


                        Stencil themes provide access to remote resources
                        through data tags and event hooks. Developers can use
                        these hooks to trigger defined events: A theme can hook
                        to an event to perform its own actions or calculations,
                        based on shopper behavior.


                        Your Stencil themes incorporate these resources by
                        importing the stencil-utils module, using this
                        statement:


                        `import utils from '@bigcommerce/stencil-utils';`
                      header:
                        anchor: event_event-hook
                    - type: text
                      data: >
                        ## Cookie Notification Example


                        In the JavaScript-only example below, the
                        `cookie-privacy-notification` hook enables customization
                        of the alert window that displays European
                        Union–required cookie notifications:


                        First, ensure you have loaded the `stencil-utils`
                        package with the following command:


                        `import utils from '@bigcommerce/stencil-utils';`


                        European websites must notify users of cookies to comply
                        with European Union law.

                        The following code implements hook that will alert
                        shoppers that the website uses cookies.


                        ```

                        export default function() {

                          // Here you can override the default browser alert box by
                          // hooking to the 'cookie-privacy-notification' hook.
                          utils.hooks.on('cookie-privacy-notification', (event, privacyMessage) => {

                            // You can make your own custom modal or alert box
                            // appear in your theme using the privacyMessage provided
                            myCustomAlert(privacyMessage);

                            // Call event.preventDefault() to prevent the default
                            // browser alert from occurring in stencil-utils
                            event.preventDefault();
                          });
                        }

                        ```


                        A theme could listen for the
                        `cookie-privacy-notification` event to override the
                        browser’s default notification UI.
                      header:
                        anchor: event_cookie-notification
                    - type: text
                      data: >
                        ## Cart Dialog Example


                        In the following code snippet from Cornerstone in
                        [templates/components/products/product-view.html](https://github.com/bigcommerce/cornerstone/blob/master/templates/components/products/product-view.html),
                        note the data tag named `data‑cart‑item‑add`:


                        ```

                        <form class="form" method="post"
                        action="{{product.cart_url}}"
                            enctype="multipart/form-data" data-cart-item-add>
                        ```


                        This data tag enables the emission of the
                        `cart‑item‑add` event in this next snippet:


                        ```

                        /*  
                         * Import all product-specific js 
                         */
                        [...]

                        import utils from '@bigcommerce/stencil-utils';

                        [...]

                        addProductToCart() {
                            utils.hooks.on('cart-item-add', (event) => {
                                event.preventDefault();
                            });
                        }

                        ```
                      header:
                        anchor: event_cart-dialog
              - title: Remote API Example
                route:
                  path: /remote-api-example
                data:
                  blocks:
                    - type: html
                      data: <h1>Remote API Example</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#remote_remote-api-example\">Remote API Example</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >-
                        ## Remote API Example


                        Client-side JavaScript can access event hooks directly,
                        without using Handlebars statements. By setting up
                        listeners for these events, you can exercise granular
                        control over your storefront’s user interface. For
                        example, you can pop up custom windows when certain
                        events occur.


                        Below is an example implemented within a Stencil theme.
                        This code adds an item to the shopping cart, and
                        displays the result in a custom modal dialog rather than
                        a cart page.


                        _This particular example uses certain conventions of ES6
                        JavaScript (also known as ECMAScript 6 or

                        ECMAScript 2015)._


                        Here is the signature of the cart.itemAdd function used
                        below, with parameters for product ID, quantity, and
                        options:


                        `itemAdd(FormData, callback)`


                        Here is the signature of the cart.getContent function
                        used further down:


                        `getContent(options, callback)`


                        This first complete code snippet calls `cart.itemAdd`,
                        catches any errors, and displays the cart contents in a
                        modal dialog: 


                        ```
                         // Add item to cart
                                utils.api.cart.itemAdd(new FormData(form), (err, response) => {
                                    const errorMessage = err || response.data.error;

                                    $addToCartBtn
                                        .val(originalBtnVal)
                                        .prop('disabled', false);

                                    this.$overlay.hide();

                                    // Guard statement
                                    if (errorMessage) {
                                        // Strip the HTML from the error message
                                        const tmp = document.createElement('DIV');
                                        tmp.innerHTML = errorMessage;

                                        return alert(tmp.textContent || tmp.innerText);
                                    }

                                    // Open preview modal and update content
                                    if (this.previewModal) {
                                        this.previewModal.open();

                                        this.updateCartContent(this.previewModal, response.data.cart_item.hash);
                                    } else {
                                        this.$overlay.show();
                                        // if no modal, redirect to the cart page
                                        this.redirectTo(response.data.cart_item.cart_url || this.context.urls.cart);
                                    }
                                });
                        ```


                        This final code snippet calls `cart.getContent` to fetch
                        the cart contents, then display it in a preview format,
                        which is specified by a `template` option with a value
                        of `cart/preview`:


                        ```
                          /**
                             * Get cart contents
                             *
                             * @param {String} cartItemHash
                             * @param {Function} onComplete
                             */
                            getCartContent(cartItemHash, onComplete) {
                                const options = {
                                    template: 'cart/preview',
                                    params: {
                                        suggest: cartItemHash,
                                    },
                                    config: {
                                        cart: {
                                            suggestions: {
                                                limit: 4,
                                            },
                                        },
                                    },
                                };

                                utils.api.cart.getContent(options, onComplete);
                            }
                        ```
                      header:
                        anchor: remote_remote-api-example
              - title: Data Tags & Event Hooks
                route:
                  path: /data-tags-event-hooks-reference
                data:
                  blocks:
                    - type: html
                      data: <h1>Data Tags/Event Hook Reference</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#data_stencil-data-tags\">Stencil Data Tags and Event Hooks</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: "## Stencil Data Tags and Event Hooks\nStencil themes provide the following chains of data tags, delegated DOM (Document Object Model) events, emitted Stencil event hooks, and Stencil event parameter(s).\n\n### Cart Item Added\n\nHook for items added to the customer’s shopping cart.\n\n**Function Signature:**\n\n```\nitemAdd() {\n    this.$body.on('submit', '[data-cart-item-add]', (event) => {\n        this.emit('cart-item-add', event, event.target);\n    });\n}\n```\n\n<table>\n\t<tr>\n\t\t<th>Data Tag</th>\n\t\t<th>Delegated DOM Event</th>\n\t\t<th>Stencil Event/Hook</th>\n\t\t<th>Stencil Event Parameter(s)</th>\n\t</tr>\n\t<tr>\n\t\t<td>data-cart-item-add</td>\n\t\t<td>submit</td>\n\t\t<td>cart-item-add</td>\n\t\t<td>event, event.target</td>\n\t</tr>\n</table>\n\n### Faceted-Search Events\n\nHooks for faceted-search selections that the customer initiates or submits.\n\n**Function Signature**\n\n```\nsearchEvents() {\n  this.$body.on('click', '[data-faceted-search-facet]', (event) => {\n        this.emit('facetedSearch-facet-clicked', event);\n  });\n \n  this.$body.on('submit', '[data-faceted-search-range]', (event) => {\n        this.emit('facetedSearch-range-submitted', event);\n  });\n}\n\n```\n\n<table>\n\t<tr>\n\t\t<th>Data Tag</th>\n\t\t<th>Delegated DOM Event</th>\n\t\t<th>Stencil Event/Hook</th>\n\t\t<th>Stencil Event Parameter(s)</th>\n\t</tr>\n\t<tr>\n\t\t<td>data-faceted-search-facet</td>\n\t\t<td>click</td>\n\t\t<td>facetedSearch-facet-clicked</td>\n\t\t<td>event</td>\n\t</tr>\n\t<tr>\n\t\t<td>data-faceted-search-range</td>\n\t\t<td>submit</td>\n\t\t<td>facetedSearch-range-submitted</td>\n\t\t<td>event</td>\n\t</tr>\n</table>"
                      header:
                        anchor: data_stencil-data-tags
                config:
                  sidebar:
                    token: Reference
              - title: stencil-utils
                route:
                  path: /stencil-utils-api-reference
                data:
                  blocks:
                    - type: html
                      data: <h1>stencil-utils API Reference</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#remote_remote-api-example\">stencil-utils API Reference</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >-
                        <h2> <A NAME="API-js"></a>API [api.js]</h2>


                        The <span class="inline-code">api.getPage()</span>
                        function allows you to add Ajax functionality to your
                        themes.<br>


                        <br> <span id="getpage"> <b>getPage Signature</b>
                        </span> <br>


                        The following statement passes <span
                        class="inline-code">url</span> and <span
                        class="inline-code">options</span> arguments to the
                        <span class="inline-code">api.getPage()</span>
                        function:<br><p></p>


                        <pre>utils.api.getPage(url, options, callback)

                        </pre><br>


                        <table>
                          <tbody><tr>
                            <td class="">Argument</td>
                            <td class="">Type</td>
                            <td class="">Description/Usage</td>
                          </tr>
                          <tr>
                            <td class="">url</td>
                            <td class="">String</td>
                            <td class="">URL to which you want to send a request (for example: localhost:4000/cart.php)</td>
                          </tr>
                          <tr>
                            <td class="">options</td>
                            <td class="">Object</td>
                            <td class="">Can contain <span class="inline-code">template</span>, <span class="inline-code"><a href="https://developer.mozilla.org/en-US/docs/Web/API/FormData">FormData</a></span> (for POST methods), <span class="inline-code">params</span>&nbsp;(for GET methods), and/or <span class="inline-code">config</span>. <br><br>    
                              The <span class="inline-code">template</span> option allows you to select a particular template, or an array of templates, for rendering one page. Each value must correspond to a file present in the theme's <span class="inline-code">templates/components/</span> subdirectory. <br><br>
                              The <span class="inline-code">config</span> option can be used to pass extra resources, corresponding to attributes that are valid in a page's <a href="/docs/using-yaml-front-matter">front matter</a>, as an object.
                            </td>
                          </tr>
                          <tr>
                            <td class="">callback</td>
                            <td class="">Function</td>
                            <td class="">Asynchronous function call to handle the results</td>
                          </tr>
                        </tbody></table>


                        The <span class="inline-code">config</span> argument
                        works like front matter: it encapsulates JSON. For a
                        usage example of <span
                        class="inline-code">config</span>, see <NOBR><a
                        href="/docs/remote-api-example">Remote API
                        Example</a></nobr>. <br><br>



                        <span id="getPageEx"> <b>getPage Example</b> </span>
                        <br>


                        In the following example (from <span
                        class="inline-code">common/faceted-search.js</span>),
                        <span class="inline-code">api.getPage()</span> is called
                        to help execute an <span
                        class="inline-code">updateView()</span>
                        function:<br><p></p>


                        <pre>    updateView() {
                                $(this.options.blockerSelector).show();

                                api.getPage(urlUtils.getUrl(), this.requestOptions, (err, content) => {
                                    $(this.options.blockerSelector).hide();

                                    if (err) {
                                        throw new Error(err);
                                    }

                                    // Refresh view with new content
                                    this.refreshView(content);
                                });
                            }</pre><p></p>


                        <h2> <A NAME="Cart-API"></a>Cart API </h2>


                        The following functions allow your theme to work with
                        cart contents in customized ways.<br><br>


                        <b>itemAdd Signature</b><br>


                        The <span class="inline-code">itemAdd</span> function
                        allows your code to add an item to the cart, with
                        options:<br><p></p>


                        <pre>utils.api.cart.itemAdd(<a
                        href="https://developer.mozilla.org/en-US/docs/Web/API/FormData">FormData</a>,
                        callback)</pre>

                        <br>


                        <table>
                          <tbody><tr>
                            <td class="">Argument</td>
                            <td class="">Type</td>
                            <td class="">Description/Usage</td>
                          </tr>
                          <tr>
                            <td class=""><A NAME="CartAPI-FormData"></a>formData</td>
                            <td class=""><a href="https://developer.mozilla.org/en-US/docs/Web/API/FormData">FormData</a> object </td>
                            <td class="">Contains all details about the added item and its product options</td>
                          </tr>
                          <tr>
                            <td class="">callback</td>
                            <td class="">Function</td>
                            <td class="">Asynchronous function call to handle the results</td>
                          </tr>
                        </tbody></table>



                        <span id="itemAddEx"> <b>itemAdd Example</b> </span>
                        <br>


                        <span class="inline-code">itemAdd</span> is called at
                        the head of the following example (from <span
                        class="inline-code">common/product-details.js</span>) to
                        populate the cart:<br><p></p>


                        <pre>        // Add item to cart
                                utils.api.cart.itemAdd(new FormData(form), (err, response) => {
                                    const errorMessage = err || response.data.error;

                                    $addToCartBtn
                                        .val(originalBtnVal)
                                        .prop('disabled', false);

                                    this.$overlay.hide();

                                    // Guard statement
                                    if (errorMessage) {
                                        // Strip the HTML from the error message
                                        const tmp = document.createElement('DIV');
                                        tmp.innerHTML = errorMessage;

                                        return alert(tmp.textContent || tmp.innerText);
                                    }

                                    // Open preview modal and update content
                                    if (this.previewModal) {
                                        this.previewModal.open();

                                        this.updateCartContent(this.previewModal, response.data.cart_item.hash);
                                    } else {
                                        this.$overlay.show();
                                        // if no modal, redirect to the cart page
                                        this.redirectTo(response.data.cart_item.cart_url || this.context.urls.cart);
                                    }
                                }); </pre><br>


                        <b>itemUpdate Signature</b><br>


                        The <span class="inline-code">itemUpdate</span> function
                        allows your code to update a specified cart item’s
                        quantity:<br>


                        <p></p><pre>utils.api.cart.itemUpdate(itemId, qty,
                        callback)</pre>

                        <br>


                        <table>
                          <tbody><tr>
                            <td class="">Argument</td>
                            <td class="">Type</td>
                            <td class="">Description/Usage</td>
                          </tr>
                          <tr>
                            <td class="">itemId</td>
                            <td class="">String</td>
                            <td class="">The item’s ID</td>
                          </tr>
                          <tr>
                            <td class="">qty</td>
                            <td class="">Integer</td>
                            <td class="">The item’s quantity in the cart</td>
                          </tr>
                          <tr>
                            <td class="">callback</td>
                            <td class="">Function</td>
                            <td class="">Asynchronous function call to handle the results</td>
                          </tr>
                        </tbody></table>


                        <span id="itemUpdateEx"> <b>itemUpdate  Example</b>
                        </span> <br>


                        In the following example (from <span
                        class="inline-code">cart.js</span>), <span
                        class="inline-code">itemUpdate</span> is called just
                        before the final if/else test for an empty
                        cart:<br><p></p>


                        <pre>    cartUpdate($target) {
                                const itemId = $target.data('cartItemid');
                                const $el = $(`#qty-${itemId}`);
                                const oldQty = parseInt($el.val(), 10);
                                const maxQty = parseInt($el.data('quantityMax'), 10);
                                const minQty = parseInt($el.data('quantityMin'), 10);
                                const minError = $el.data('quantityMinError');
                                const maxError = $el.data('quantityMaxError');
                                const newQty = $target.data('action') === 'inc' ? oldQty + 1 : oldQty - 1;

                                // Does not quality for min/max quantity
                                if (newQty < minQty) {
                                    return swal({
                                        text: minError,
                                        type: 'error',
                                    });
                                } else if (maxQty > 0 && newQty > maxQty) {
                                    return swal({
                                        text: maxError,
                                        type: 'error',
                                    });
                                }

                                this.$overlay.show();

                                utils.api.cart.itemUpdate(itemId, newQty, (err, response) => {
                                    this.$overlay.hide();

                                    if (response.data.status === 'succeed') {
                                        // if the quantity is changed "1" from "0", we have to remove the row.
                                        const remove = (newQty === 0);

                                        this.refreshContent(remove);
                                    } else {
                                        $el.val(oldQty);
                                        swal({
                                            text: response.data.errors.join('\n'),
                                            type: 'error',
                                        });
                                    }
                                });
                            } </pre><br>


                        <b>itemRemove Signature</b><br>


                        The <span class="inline-code">itemRemove</span> function
                        allows your code to remove items from the cart:<br>


                        <p></p><pre>utils.api.cart.itemRemove(itemId,
                        callback)</pre>
                         <br>

                        <table>
                          <tbody><tr>
                            <td class="">Argument</td>
                            <td class="">Type</td>
                            <td class="">Description/Usage</td>
                          </tr>
                          <tr>
                            <td class="">itemId</td>
                            <td class="">String</td>
                            <td class="">The item’s ID</td>
                          </tr>
                          <tr>
                            <td class="">callback</td>
                            <td class="">Function</td>
                            <td class="">Asynchronous function call to handle the results</td>
                          </tr>
                        </tbody></table>



                        <span id="itemRemoveEx"> <b>itemRemove Example</b>
                        </span><br>


                        In the following example (from <span
                        class="inline-code">cart.js</span>), <span
                        class="inline-code">itemRemove</span> is called before
                        the if/else test:<br><p></p>


                        <pre>    cartRemoveItem(itemId) {
                                this.$overlay.show();
                                utils.api.cart.itemRemove(itemId, (err, response) => {
                                    if (response.data.status === 'succeed') {
                                        this.refreshContent(true);
                                    } else {
                                        alert(response.data.errors.join('\n'));
                                    }
                                });
                            } </pre><br>


                        <b>update Signature</b><br>


                        The <span class="inline-code">update</span> function
                        allows your code to update the set of items in the
                        cart:<br>


                        <p></p><pre>utils.api.cart.update(itemId, qty,
                        callback)</pre>

                         <br>

                        <table>
                          <tbody><tr>
                            <td class="">Argument</td>
                            <td class="">Type</td>
                            <td class="">Description/Usage</td>
                          </tr>
                          <tr>
                            <td class="">items</td>
                            <td class="">Array</td>
                            <td class="">The items in the cart</td>
                          </tr>
                          <tr>
                            <td class="">callback</td>
                            <td class="">Function</td>
                            <td class="">Asynchronous function call to handle the results</td>
                          </tr>
                        </tbody></table>



                        <b>update Example</b><br>


                        The following example shows a call to <span
                        class="inline-code">update</span> within the <span
                        class="inline-code">itemUpdate</span>
                        function:<br><p></p>


                        <pre>    /**
                            itemUpdate(itemId, qty, callback) {
                                let callbackArg = callback;
                                let items;

                                if (Array.isArray(itemId) && typeof qty === 'function') {
                                    callbackArg = qty;
                                    items = itemId;
                                } else {
                                    items = [
                                        {
                                            id: itemId,
                                            quantity: qty,
                                        },
                                    ];
                                }

                                this.update(items, (err, response) => {
                                    const emitData = {
                                        items,
                                        err,
                                        response,
                                    };

                                    Hooks.emit('cart-item-update-remote', emitData);
                                    callbackArg(err, response);
                                });
                            } </pre><br>


                        <b>getItemGiftWrappingOptions Signature</b><br>


                        The <span
                        class="inline-code">getItemGiftWrappingOptions</span>
                        function allows your code to retrieve gift-wrapping
                        options for the current cart item, in customized
                        ways:<br><p></p>



                        <pre>utils.api.cart.getItemGiftWrappingOptions(itemId,
                        callback)</pre>

                        <br>


                        <table>
                          <tbody><tr>
                            <td class="">Argument</td>
                            <td class="">Type</td>
                            <td class="">Description/Usage</td>
                          </tr>
                          <tr>
                            <td class="">itemId</td>
                            <td class="">String</td>
                            <td class="">The cart item</td>
                          </tr>
                          <tr>
                            <td class="">callback</td>
                            <td class="">Function</td>
                            <td class="">Asynchronous function call to handle the results</td>
                          </tr>
                        </tbody></table>



                        <b>getItemGiftWrappingOptions Example</b> <br>


                        The following example (from <span
                        class="inline-code">cart.js</span>) calls <span
                        class="inline-code">getItemGiftWrappingOptions</span> to
                        display gift-wrapping options in a modal:<br><p></p>


                        <pre>    bindGiftWrappingEvents() {
                                const modal = defaultModal();

                                $('[data-item-giftwrap]').on('click', (event) => {
                                    const itemId = $(event.currentTarget).data('item-giftwrap');
                                    const options = {
                                        template: 'cart/modals/gift-wrapping-form',
                                    };

                                    event.preventDefault();

                                    modal.open();

                                    utils.api.cart.getItemGiftWrappingOptions(itemId, options, (err, response) => {
                                        modal.updateContent(response.content);

                                        this.bindGiftWrappingForm();
                                    });
                                });
                            } </pre><br>


                        <b>submitItemGiftWrappingOption Signature</b><br>


                        The <span
                        class="inline-code">submitItemGiftWrappingOption</span>
                        function allows your code to handle the customer’s
                        gift-wrapping selection for the current cart
                        item:<br><p></p>


                        <pre>utils.api.cart.submitItemGiftWrappingOption(itemId,
                        qty, callback)</pre>

                        <br>



                        <table>
                          <tbody><tr>
                            <td class="">Argument</td>
                            <td class="">Type</td>
                            <td class="">Description/Usage</td>
                          </tr>
                          <tr>
                            <td class="">itemId</td>
                            <td class="">String</td>
                            <td class="">The cart item</td>
                          </tr>
                          <tr>
                            <td class="">callback</td>
                            <td class="">Function</td>
                            <td class="">Asynchronous function call to handle the results</td>
                          </tr>
                        </tbody></table>



                        <b>submitItemGiftWrappingOption Example</b> <br>


                        This commented example shows a simple call to <span
                        class="inline-code">submitItemGiftWrappingOption</span>:


                        <pre>    /**
                             * Submit giftwrapping options
                             *
                             * @param {String} itemId
                             * @param {Function} callback
                             */
                            submitItemGiftWrappingOption(itemId, params, callback) {
                                this.remoteRequest(`/gift-wrapping/${itemId}`, 'POST', { params }, callback);
                            } </pre><br>


                        <b>getContent Signature</b><br>


                        The <span class="inline-code">getContent</span> function
                        allows your code to display the cart contents in
                        customized ways:<br>


                        <p></p><pre>utils.api.cart.getContent(options,
                        callback)</pre>

                        <br>


                        <table>
                          <tbody><tr>
                            <td class="">Argument</td>
                            <td class="">Type</td>
                            <td class="">Description/Usage</td>
                          </tr>
                          <tr>
                            <td class=""><A NAME="getContent-options"></a>options</td>
                            <td class="">Object</td>
                            <td class="">Template containing content and totals children</td>
                          </tr>
                          <tr>
                            <td class="">callback</td>
                            <td class="">Function</td>
                            <td class="">Asynchronous function call to handle the results</td>
                          </tr>
                        </tbody></table>


                        <span id="getContentEx"> <b>getContent Examples</b>
                        </span> <br>


                        The following example (from <span
                        class="inline-code">common/product-details.js</span>) a
                        call to <span class="inline-code">getContent</span>, set
                        up by a prior call to <span
                        class="inline-code">getCartContent</span>:<br><p></p>


                        <pre>    /**
                             * Get cart contents
                             *
                             * @param {String} cartItemHash
                             * @param {Function} onComplete
                             */
                            getCartContent(cartItemHash, onComplete) {
                                const options = {
                                    template: 'cart/preview',
                                    params: {
                                        suggest: cartItemHash,
                                    },
                                    config: {
                                        cart: {
                                            suggestions: {
                                                limit: 4,
                                            },
                                        },
                                    },
                                };

                                utils.api.cart.getContent(options, onComplete);
                            } </pre><p></p>

                        This example (from <span
                        class="inline-code">cart.js</span>) shows a call to
                        <span class="inline-code">getContent</span> within the
                        <span class="inline-code">refreshContent</span>
                        function:<br><p></p>


                        <pre>    refreshContent(remove) {
                                const $cartItemsRows = $('[data-item-row]', this.$cartContent);
                                const $cartPageTitle = $('[data-cart-page-title]');
                                const options = {
                                    template: {
                                        content: 'cart/content',
                                        totals: 'cart/totals',
                                        pageTitle: 'cart/page-title',
                                        statusMessages: 'cart/status-messages',
                                    },
                                };

                                this.$overlay.show();

                                // Remove last item from cart? Reload
                                if (remove && $cartItemsRows.length === 1) {
                                    return window.location.reload();
                                }

                                utils.api.cart.getContent(options, (err, response) => {
                                    this.$cartContent.html(response.content);
                                    this.$cartTotals.html(response.totals);
                                    this.$cartMessages.html(response.statusMessages);

                                    $cartPageTitle.replaceWith(response.pageTitle);
                                    this.bindEvents();
                                    this.$overlay.hide();

                                    const quantity = $('[data-cart-quantity]', this.$cartContent).data('cart-quantity') || 0;

                                    $('body').trigger('cart-quantity-update', quantity);
                                });
                            } </pre><p></p> 

                        Here is a final example of a call to <span
                        class="inline-code">getContent</span>, from <span
                        class="inline-code">global/cart-preview.js</span>:<br><p></p>


                        <pre>    $cart.on('click', (event) => {
                                const options = {
                                    template: 'common/cart-preview',
                                };

                                // Redirect to full cart page
                                //
                                // https://developer.mozilla.org/en-US/docs/Browser_detection_using_the_user_agent
                                // In summary, we recommend looking for the string 'Mobi' anywhere in the User Agent to detect a mobile device.
                                if (/Mobi/i.test(navigator.userAgent)) {
                                    return event.stopPropagation();
                                }

                                event.preventDefault();

                                $cartDropdown
                                    .addClass(loadingClass)
                                    .html($cartLoading);
                                $cartLoading
                                    .show();

                                utils.api.cart.getContent(options, (err, response) => {
                                    $cartDropdown
                                        .removeClass(loadingClass)
                                        .html(response);
                                    $cartLoading
                                        .hide();
                                });
                            }); </pre><br>


                        <b><A NAME="getShippingQuotes"></a>getShippingQuotes
                        Signature</b><br>


                        The <span class="inline-code">getShippingQuotes</span>
                        function allows your code to retrieve shipping-cost
                        quotes for the cart’s contents. It returns <span
                        class="inline-code">shippingQuote</span> objects that
                        contain IDs. You must follow <span
                        class="inline-code">getShippingQuotes</span> by calling
                        <span class="inline-code"><a
                        href="#submitShippingQuotes">submitShippingQuote</a></span>
                        on a <span class="inline-code">quoteId</span>:<br>


                        <p></p><pre>utils.api.cart.getShippingQuotes(params,
                        renderWith, callback)</pre>

                        <br>


                        <table>
                          <tbody><tr>
                            <td class="">Argument</td>
                            <td class="">Type</td>
                            <td class="">Description/Usage</td>
                          </tr>
                          <tr>
                            <td class="">params</td>
                            <td class="">Object</td>
                            <td class="">Contains country_id, state_id, and zip_code</td>
                          </tr>
                          <tr>
                            <td class="">template</td>
                            <td class="">String/  Array/ Object</td>
                            <td class="">The template to use for rendering</td>
                          </tr>
                          <tr>
                            <td class="">callback</td>
                            <td class="">Function</td>
                            <td class="">Asynchronous function call to handle the results</td>
                          </tr>
                        </tbody></table>



                        <b>getShippingQuotes and submitShippingQuote Example</b>
                        <br><p></p>


                        The following example (from <span
                        class="inline-code">cart/shipping-estimator.js</span>)
                        shows calls to both <span
                        class="inline-code">getShippingQuotes</span> and <span
                        class="inline-code">submitShippingQuote</span>:<br><p></p>


                        <pre>    bindEstimatorEvents() {
                                const $estimatorContainer = $('.shipping-estimator');
                                const $estimatorForm = $('.estimator-form');

                                $estimatorForm.on('submit', (event) => {
                                    const params = {
                                        country_id: $('[name="shipping-country"]', $estimatorForm).val(),
                                        state_id: $('[name="shipping-state"]', $estimatorForm).val(),
                                        city: $('[name="shipping-city"]', $estimatorForm).val(),
                                        zip_code: $('[name="shipping-zip"]', $estimatorForm).val(),
                                    };

                                    event.preventDefault();

                                    utils.api.cart.getShippingQuotes(params, 'cart/shipping-quotes', (err, response) => {
                                        $('.shipping-quotes').html(response.content);

                                        // bind the select button
                                        $('.select-shipping-quote').on('click', (clickEvent) => {
                                            const quoteId = $('.shipping-quote:checked').val();

                                            clickEvent.preventDefault();

                                            utils.api.cart.submitShippingQuote(quoteId, () => {
                                                location.reload();
                                            });
                                        });
                                    });
                                }); </pre><br>

                        <A NAME="submitShippingQuote"></a>
                        <b>submitShippingQuote Signature</b><br>


                        The <span class="inline-code">submitShippingQuote</span>
                        function must be called after <span
                        class="inline-code"><a
                        href="#getShippingQuotes">getShippingQuote</a></span>,
                        which returns <span
                        class="inline-code">shippingQuote</span> objects that
                        contain IDs. The cart page renders the shipping quotes.
                        When the user selects one of the quotes, this function
                        sends that <span class="inline-code">quoteId</span> to
                        the backend:<br>


                        <p></p><pre>utils.api.cart.submitShippingQuote(quoteId,
                        callback)</pre>

                         <br>

                        <table>
                          <tbody><tr>
                            <td class="">Argument</td>
                            <td class="">Type</td>
                            <td class="">Description/Usage</td>
                          </tr>
                          <tr>
                            <td class="">quoteId</td>
                            <td class="">Number</td>
                            <td class="">ID for a shipping quote returned by <span class="inline-code"><a href="#getShippingQuotes">getShippingQuotes</a></span></td>
                          </tr>
                          <tr>
                            <td class="">callback</td>
                            <td class="">Function</td>
                            <td class="">Asynchronous function call to handle the results</td>
                          </tr>
                        </tbody></table>


                        (For sample code, please see <b>getShippingQuotes and
                        submitShippingQuote Example</b>, above.)<br><br>



                        <b>applyCode Signature</b><br>


                        The <span class="inline-code">applyCode</span> function
                        applies a coupon code or gift certificate to the
                        cart:<br>


                        <p></p><pre>utils.api.cart.applyCode(code,
                        callback)</pre>

                        <br>


                        <table>
                          <tbody><tr>
                            <td class="">Argument</td>
                            <td class="">Type</td>
                            <td class="">Description/Usage</td>
                          </tr>
                          <tr>
                            <td class="">code</td>
                            <td class="">String</td>
                            <td class="">Alphanumeric representation of the coupon or gift-certificate code</td>
                          </tr>
                          <tr>
                            <td class="">callback</td>
                            <td class="">Function</td>
                            <td class="">Asynchronous function call to handle the results</td>
                          </tr>
                        </tbody></table>


                        In the following example (from <span
                        class="inline-code">cart.js</span>),  <span
                        class="inline-code">applyCode</span> is called before
                        the final if/else test to apply a coupon
                        code:<br><p></p>


                        <pre>    bindPromoCodeEvents() {
                                const $couponContainer = $('.coupon-code');
                                const $couponForm = $('.coupon-form');
                                const $codeInput = $('[name="couponcode"]', $couponForm);

                                $('.coupon-code-add').on('click', (event) => {
                                    event.preventDefault();

                                    $(event.currentTarget).hide();
                                    $couponContainer.show();
                                    $('.coupon-code-cancel').show();
                                    $codeInput.focus();
                                });

                                $('.coupon-code-cancel').on('click', (event) => {
                                    event.preventDefault();

                                    $couponContainer.hide();
                                    $('.coupon-code-cancel').hide();
                                    $('.coupon-code-add').show();
                                });

                                $couponForm.on('submit', (event) => {
                                    const code = $codeInput.val();

                                    event.preventDefault();

                                    // Empty code
                                    if (!code) {
                                        return alert($codeInput.data('error'));
                                    }

                                    utils.api.cart.applyCode(code, (err, response) => {
                                        if (response.data.status === 'success') {
                                            this.refreshContent();
                                        } else {
                                            alert(response.data.errors.join('\n'));
                                        }
                                    });
                                });
                            } </pre><p></p>


                        <h2> <A NAME="Cookie"></a>Cookie Resource</h2>


                        This resource allows you to override a browser’s default
                        alert box for cookie notifications.<br><p></p>


                        <table>
                          <tbody><tr>
                            <td class="">Argument</td>
                            <td class="">Description/Usage</td>
                          </tr>
                          <tr>
                            <td class="">privacyMessage</td>
                            <td class="">Merchant-defined message informing customers of storefront’s cookie usage (e.g., to comply with E.U. notification requirement)</td>
                          </tr>
                        </tbody></table>



                        <b>Cookie Examples:</b> <br><p></p>


                        The following commented example (from <span
                        class="inline-code">global/cookieNotification.js)</span>
                        shows a call to <span
                        class="inline-code">utils.hooks.on('cookie-privacy-notification',
                        (event, privacyMessage)</span> to help comply with
                        European Union privacy requirements:<br><p></p>


                        <pre>/**
                         * European websites must notify users of cookies to comply with European Union law.
                         * This will alert shoppers that this website uses cookies.
                         */
                        export default function () {
                            /*
                            // Here you can override the default browser alert box by hooking to the 'cookie-privacy-notification' hook.
                            utils.hooks.on('cookie-privacy-notification', (event, privacyMessage) => {
                                // You can make your own custom modal or alert box appear in your theme using the privacyMessage provided
                                myCustomAlert(privacyMessage);

                                // Call event.preventDefault() to prevent the default browser alert from occurring in stencil-utils
                                event.preventDefault();
                            });
                            */

                            utils.hooks.on('cookie-privacy-notification', (event) => {
                                event.preventDefault();

                                const $privacyDialog = $('.cookieMessage');
                                $privacyDialog.show();

                                $('body').on('click', '[data-privacy-accept]', () => {
                                    utils.hooks.emit('cookie-privacy-accepted');
                                    $privacyDialog.hide();
                                });
                            });
                        } </pre><p></p> 



                        <h2> <A NAME="Countries"></a>Countries Resources</h2>


                        These functions allow your theme or app to retrieve
                        standardized country names, by numeric ID or by
                        string.<br>


                        <br><b>getById Signature</b><br>


                        The <span class="inline-code">getById</span> function
                        retrieves standardized country names by numeric ID:<br>


                        <p></p><pre>utils.api.countries.getById(countryId,
                        callback)</pre>

                         <br>

                        <table>
                          <tbody><tr>
                            <td class="">Argument</td>
                            <td class="">Type</td>
                            <td class="">Description/Usage</td>
                          </tr>
                          <tr>
                            <td class="">countryId</td>
                            <td class="">Number</td>
                            <td class="">Country code</td>
                          </tr>
                          <tr>
                            <td class="">callback</td>
                            <td class="">Function</td>
                            <td class="">Asynchronous function call to handle the results</td>
                          </tr>
                        </tbody></table>



                        The following example a call to <span
                        class="inline-code">getById</span>, followed by a call
                        to the <span class="inline-code">getByName</span>
                        function (described below):<br><p></p>


                        <pre>    /**
                             *
                             * Get country data by id wrapper
                             *
                             * @param {Number} id
                             * @param {Function} callback
                             */
                            getById(id, callback) {
                                const url = this.endpoint + id;

                                this.remoteRequest(url, 'GET', {}, callback);
                            }

                            /**
                             * Get country data by country name
                             * @param name
                             * @param callback
                             */
                            getByName(name, callback) {
                                const url = this.endpoint + name;

                                this.remoteRequest(url, 'GET', {}, callback);
                            }
                        }
                         </pre><br>


                        <b>getByName Signature</b><br>


                        The <span class="inline-code">getByName</span> function
                        retrieves states by country name, and returns an array
                        of states that can be used in the callback:<br>


                        <p></p><pre>utils.api.countries.getByName(countryName,
                        callback)</pre>

                         <br>

                        <table>
                          <tbody><tr>
                            <td class="">Argument</td>
                            <td class="">Type</td>
                            <td class="">Description/Usage</td>
                          </tr>
                          <tr>
                            <td class="">countryName</td>
                            <td class="">String</td>
                            <td class="">Country name</td>
                          </tr>
                          <tr>
                            <td class="">callback</td>
                            <td class="">Function</td>
                            <td class="">Asynchronous function call to handle the results</td>
                          </tr>
                        </tbody></table>



                        In the following example (from <span
                        class="inline-code">common/state-country.js</span>,
                        <span class="inline-code">getByName</span> is called
                        after the initial if test:<br><p></p>


                        <pre>   
                        $('select[data-field-type="Country"]').on('change',
                        (event) => {
                                const countryName = $(event.currentTarget).val();

                                if (countryName === '') {
                                    return;
                                }

                                utils.api.country.getByName(countryName, (err, response) => {
                                    if (err) {
                                        alert(context.state_error);

                                        return callback(err);
                                    }

                                    const $currentInput = $('[data-field-type="State"]');

                                    if (!_.isEmpty(response.data.states)) {
                                        // The element may have been replaced with a select, reselect it
                                        const $selectElement = makeStateRequired($currentInput, context);

                                        addOptions(response.data, $selectElement, options);
                                        callback(null, $selectElement);
                                    } else {
                                        const newElement = makeStateOptional($currentInput, context);

                                        callback(null, newElement);
                                    }
                                });
                            }); </pre><p></p> 


                        <h2> <A NAME="ProdAttrib"></a>Product Attributes
                        Resource</h2>


                        The <span class="inline-code">optionChange</span>
                        function is fired when the customer selects a product
                        option for the current cart item (for example, changing
                        a shirt’s color from a default "yellow" to
                        "green"):<br><br>


                        <b>optionChange Signature</b><br>


                        <p></p><pre>utils.api.productAttributes.optionChange(productId,
                        params, callback)</pre>

                        <br>


                        <table>
                          <tbody><tr>
                            <td class="">Argument</td>
                            <td class="">Type</td>
                            <td class="">Description/Usage</td>
                          </tr>
                          <tr>
                            <td class="">params</td>
                            <td class="">Object</td>
                            <td class="">Contains a collection of IDs that map to product properties (color, size, etc.)</td>
                          </tr>
                          <tr>
                            <td class="">productId</td>
                            <td class="">Number</td>
                            <td class="">ID for this product</td>
                          </tr>
                          <tr>
                            <td class="">callback</td>
                            <td class="">Function</td>
                            <td class="">Asynchronous function call to handle the results</td>
                          </tr>
                        </tbody></table>



                        <b>optionChange Examples</b><br>


                        In this example (from <span
                        class="inline-code">common/product-details.js</span>),
                        <span class="inline-code">optionChange</span> is called
                        to update options in a Quick View modal:<br><p></p>


                        <pre>        // Update product attributes. If we're in
                        quick view and the product has options, then also update
                        the initial view in case items are oos
                                if (_.isEmpty(productAttributesData) && hasOptions) {
                                    const $productId = $('[name="product_id"]', $form).val();

                                    utils.api.productAttributes.optionChange($productId, $form.serialize(), (err, response) => {
                                        const attributesData = response.data || {};

                                        this.updateProductAttributes(attributesData);
                                        this.updateView(attributesData);
                                    });
                                } else {
                                    this.updateProductAttributes(productAttributesData);
                                } </pre><p></p>


                        In this example (from <span
                        class="inline-code">cart.js</span>), <span
                        class="inline-code">optionChange</span> is called before
                        the final if test:<br><p></p>


                        <pre>    cartEditOptions(itemId) {
                                const modal = defaultModal();
                                const options = {
                                    template: 'cart/modals/configure-product',
                                };

                                modal.open();

                                utils.api.productAttributes.configureInCart(itemId, options, (err, response) => {
                                    modal.updateContent(response.content);

                                    this.bindGiftWrappingForm();
                                });

                                utils.hooks.on('product-option-change', (event, option) => {
                                    const $changedOption = $(option);
                                    const $form = $changedOption.parents('form');
                                    const $submit = $('input.button', $form);
                                    const $messageBox = $('.alertMessageBox');
                                    const item = $('[name="item_id"]', $form).attr('value');

                                    utils.api.productAttributes.optionChange(item, $form.serialize(), (err, result) => {
                                        const data = result.data || {};

                                        if (err) {
                                            alert(err);
                                            return false;
                                        }  </pre><p></p>


                        <h2> <A NAME="Product"></a>Product Resource</h2>


                        The <span class="inline-code">product.getById</span>
                        function allows your code to retrieve, and to present,
                        detailed product information by product ID.<br>


                        <br><b>getById Signature</b><br>


                        <p></p><pre>utils.api.product.getById(productId, params,
                        callback)</pre>

                        <br>


                        <table>
                          <tbody><tr>
                            <td class="">Argument</td>
                            <td class="">Type</td>
                            <td class="">Description/Usage</td>
                          </tr>
                          <tr>
                            <td class="">productId</td>
                            <td class="">Number</td>
                            <td class="">ID for this product</td>
                          </tr>
                          <tr>
                            <td class="">params</td>
                            <td class="">Object</td>
                            <td class="">Contains request options and/or presentation template</td>
                          </tr>
                          <tr>
                            <td class="">callback</td>
                            <td class="">Function</td>
                            <td class="">Asynchronous function call to handle the results</td>
                          </tr>
                        </tbody></table>



                        The following example (from <span
                        class="inline-code">global/quick-view.js</span>) calls
                        <span class="inline-code">product.getById</span> to
                        populate the Quick View modal:<br><p></p>


                        <pre>    $('body').on('click', '.quickview', (event) =>
                        {
                                event.preventDefault();

                                const productId = $(event.currentTarget).data('product-id');

                                modal.open({ size: 'large' });

                                utils.api.product.getById(productId, { template: 'products/quick-view' }, (err, response) => {
                                    modal.updateContent(response);

                                    modal.$content.find('.productView').addClass('productView--quickView');

                                    return new ProductDetails(modal.$content.find('.quickView'), context);
                                });
                            }); </pre><p></p>


                        <h2> <A NAME="Search"></a>Search Resource</h2>


                        The <span class="inline-code">search</span> function
                        allows you to present a customized user interface for
                        search results.<br>


                        <br><b>search Signature</b><br>


                        <p></p><pre>utils.api.search.search(query, params,
                        callback)</pre>

                        <br>


                        <table>
                          <tbody><tr>
                            <td class="">Argument</td>
                            <td class="">Type</td>
                            <td class="">Description/Usage</td>
                          </tr>
                          <tr>
                            <td class="">query</td>
                            <td class="">String</td>
                            <td class="">Contains the customer’s search query</td>
                          </tr>
                          <tr>
                            <td class="">params</td>
                            <td class="">Object</td>
                            <td class="">Contains request options and/or presentation template</td>
                          </tr>
                          <tr>
                            <td class="">callback</td>
                            <td class="">Function</td>
                            <td class="">Asynchronous function call to handle the results</td>
                          </tr>
                        </tbody>

                        </table>
                      header:
                        anchor: remote_remote-api-example
                config:
                  sidebar:
                    token: API Reference
        - title: 'Custom Javascript Implementations '
          route:
            path: /custom-javascript-implementations
          data:
            children:
              - title: Adding Javascript to a Stencil Theme
                route:
                  path: /adding-javascript
                data:
                  blocks:
                    - type: html
                      data: <h1>Adding Javascript to Your Stencil Theme</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#adding_bundling-and-minification\">Bundling and Minification</a></li>\n    <li><a href=\"#adding_development-options\">Development Options</a></li>\n    <li><a href=\"#adding_using-npm\">Using npm (Node Package Manager)</a></li>\n    <li><a href=\"#adding_placing-modules\">Placing Modules in assets/js/</a></li>\n    <li><a href=\"#adding_theme-specific-js\">Theme-Specific JavaScript Modules</a></li>\n    <li><a href=\"#adding_mapping-page\">Mapping Page Types to JavaScript Modules</a></li>\n    <li><a href=\"#adding_mapping-custom\">Mapping Custom Templates to JavaScript Modules</a></li>\n    <li><a href=\"#adding_summary\">Summary</a></li>\n\t</ul>\n</div>\n\n\n\n\n\n\n\n"
                    - type: text
                      data: "## Bundling and Minification\n\nA small Web application, such as an ecommerce theme, can include rich user interactions that depend on many small JavaScript and CSS modules. If we were to embed each of the JavaScript modules in a template file with a separate `<script>` tag, the shopper's browser would need to make separate HTTP requests to retrieve each module.\n\t\nIn some cases, it would take longer to set up the HTTP request than to download the small JavaScript module – leading to slower load times. On mobile devices, slow load times can be especially frustrating.\n\n### Bundling\nTo solve this problem, Stencil – like other modern front-end frameworks – bundles all the JavaScript modules into a single file (a bundle), allowing the shopper's browser to make only a single HTTP request. After the browser has downloaded the bundle of JavaScript modules, the browser caches them, speeding up the rest of the shopper's session.\n\n### Minification\nBeyond reducing the number of HTTP calls required to fetch all the required JavaScript modules, we can reduce the size of the individual JavaScript modules through minification. JavaScript minification removes white space and comments, shortens variable and function names, removes dead code, and more. The goal, in all cases, is to reduce the amount of bandwidth necessary to transmit the JavaScript module to the browser."
                      header:
                        anchor: adding_bundling-and-minification
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Development Options


                        When you add JavaScript to a theme, use one of the
                        following techniques, so that Stencil will automatically
                        bundle and minify your modules:


                        * **Using npm:** Add third-party JavaScript modules to
                        your theme with npm where possible.


                        * **Place Modules in assets/js/:** For a JavaScript
                        module that is not distributed via npm, add this module
                        to your theme by creating a subdirectory within
                        assets/js/ that contains your module.


                        * **Theme-Specific JavaScript Modules:** Stencil themes
                        include their own custom JavaScript modules for most
                        page types. You can alter these page-type–specific
                        modules by editing the files in assets/js/theme/*.js.


                        These techniques are outlined in the following sections.
                      header:
                        anchor: adding_development-options
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Using npm (Node Package Manager)


                        Many third-party JavaScript components are distributed
                        with npm (Node Package Manager). When you use the npm
                        command-line utility to add a JavaScript component to
                        your theme, Stencil will automatically bundle and minify
                        the component. To enable this bundling/minification, run
                        each module's `npm install` command from the root
                        directory of your theme.


                        ### Taking Over from npm


                        npm facilitates managing third-party JavaScript
                        components by placing each JavaScript component – and
                        any of its dependencies – in the correct directories.
                        However, as a developer, you will still need to edit
                        your theme files to wire up the JavaScript component to
                        expose it on your storefront. You will find several
                        examples of this on the following pages.
                      header:
                        anchor: adding_using-npm
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Placing Modules in assets/js/


                        You can freely create subdirectories within
                        `assets/js/`, to contain new JavaScript modules. The
                        constraint is that all JavaScript files in each module
                        must use the `.js` file extension.
                      header:
                        anchor: adding_placing-modules
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Theme-Specific JavaScript Modules


                        In your theme's `assets/js/theme/` subdirectory, you
                        will find a tree of JavaScript files. Each file is a
                        JavaScript module. Some modules are for specific page
                        types. Others are common modules that can be used in
                        other modules. Still others are global modules that are
                        available on every page.
                      header:
                        anchor: adding_theme-specific-js
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Mapping Page Types to JavaScript Modules


                        To find the mapping from page types to modules in
                        `assets/js/theme/`, examine the `PageClasses` object in
                        the file: `assets/js/app.js`. Each `=>import(...)`
                        function within this class maps a page type to the entry
                        module for that page type. For example: When the `cart`
                        page type is loaded in the browser, the JavaScript
                        module named `cart` will be loaded.


                        ### Mapping Example in app.js


                        Here is an excerpt of mappings from the Cornerstone base
                        theme's `assets/js/app.js`:


                        ```

                        [...]

                        const pageClasses = {
                            account_orderstatus: getAccount,
                            account_order: getAccount,
                            account_addressbook: getAccount,
                            [...]
                            createaccount: getLogin,
                            getnewpassword: getLogin,
                            forgotpassword: getLogin,
                            blog: () => import('./theme/blog'),
                            blog_post: () => import('./theme/blog'),
                            brand: () => import('./theme/brand'),
                            brands: () => import('./theme/brand'),
                            cart: () => import('./theme/cart'),
                            [...]
                        }; 

                        ```


                        ### Mapping Example in cart.js


                        Inside the `cart` module (`assets/js/theme/cart.js`),
                        other modules are imported, and custom JavaScript
                        methods for the cart module are created in the `Cart`
                        class.


                        Here is an excerpt from Cornerstone's
                        `assets/js/theme/cart.js` file:


                        ```

                        import PageManager from './page-manager';

                        import $ from 'jquery';

                        import _ from 'lodash';

                        import giftCertCheck from
                        './common/gift-certificate-validator';

                        import utils from '@bigcommerce/stencil-utils';

                        import ShippingEstimator from
                        './cart/shipping-estimator';

                        import { defaultModal } from './global/modal';

                        import swal from 'sweetalert2';


                        export default class Cart extends PageManager {
                            loaded(next) {
                                this.$cartContent = $('[data-cart-content]');
                                this.$cartMessages = $('[data-cart-status]');
                                this.$cartTotals = $('[data-cart-totals]');
                                this.$overlay = $('[data-cart] .loadingOverlay')
                                    .hide(); // TODO: temporary until roper pulls in his cart components

                                this.bindEvents();

                                next();
                            }

                            cartUpdate($target) {
                                const itemId = $target.data('cart-itemid');
                                const $el = $(`#qty-${itemId}`);
                                const oldQty = parseInt($el.val(), 10);
                                const maxQty = parseInt($el.data('quantity-max'), 10);
                                const minQty = parseInt($el.data('quantity-min'), 10);
                                const minError = $el.data('quantity-min-error');
                                const maxError = $el.data('quantity-max-error');
                                const newQty = $target.data('action') === 'inc' ? oldQty + 1 : oldQty - 1;
                                [...]
                        ```
                      header:
                        anchor: adding_mapping-page
                    - type: text
                      data: '---'
                    - type: text
                      data: "## Mapping Custom Templates to JavaScript Modules\n\nIf you add [custom page templates]() to your theme, you can edit the same `assets/js/app.js` file to map each custom template to an appropriate JavaScript module.\n\nIn the example below, we have added the highlighted `if` statement to map a file called `my-custom-template`:\n\n```\nwindow.stencilBootstrap = function stencilBootstrap(pageType, contextJSON = null, loadGlobal = true) {\n    const context = JSON.parse(contextJSON || {});\n\n    return {\n        load() {\n            $(async () => {\n                let globalClass;\n                let pageClass;\n                let PageClass;\n\n\nif (context.template === 'pages/custom/page/my-custom-template') {\n           // do something, import a file, call a function ...\n}\n\n                [...] \n```\n\nIn the theme's `templates/layout/base.html` template, we've added the `{{inject 'template' template}}` just above `{{{snippet 'htmlhead'}}}` statement to inject the custom template:\n\n```\n<head>\n        <title>{{ head.title }}</title>\n        {{{ head.meta_tags }}}\n        {{{ head.config }}}\n\n        [...]\n\n        {{{head.scripts}}}\n        {{{head.rsslinks}}}\n\n        {{inject 'themeSettings' theme_settings}}\n        {{inject 'genericError' (lang 'common.generic_error')}}\n        {{inject 'maintenanceMode' settings.maintenance}}\n        {{inject 'urls' urls}}\n        {{inject 'template' template}} //injects the custom template\n        {{{snippet 'htmlhead'}}}\n    </head> \n\t\t\n\t\t```\n\n\n"
                      header:
                        anchor: adding_mapping-custom
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Summary


                        To review the basics of using JavaScript in your Stencil
                        theme:


                        * Stencil automatically bundles and minifies JavaScript
                        modules to optimize page performance.


                        * To insert custom JavaScript on a particular page in
                        your theme, edit the JavaScript module that corresponds
                        to the page's type.


                        * To add files from third-party JavaScript modules to a
                        theme, use npm, where possible.


                        * To add JavaScript modules not distributed via npm, you
                        can create new subdirectories within `assets/js/`.


                        * Theme-Specific JavaScript modules are provided in the
                        theme's `assets/js/theme/` subdirectory.


                        * To find the mapping between modules in
                        assets/js/theme/ and page types, examine the PageClasses
                        object contained in `assets/js/app.js`.


                        * You can map JavaScript modules to custom page
                        templates by editing the same `assets/js/app.js` file.
                      header:
                        anchor: adding_summary
              - title: Basic Non NPM Example
                route:
                  path: /basic-non-npm-example
                data:
                  blocks:
                    - type: html
                      data: <h1>Basic Non NPM Example</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#adding_locating-page\">Locating Page-Specific JavaScript</a></li>\n    <li><a href=\"#adding_adding-custom-js\">Adding Custom JS Functions</a></li>\n\t</ul>\n</div>\n\n\n\n"
                    - type: text
                      data: >-
                        ## Locating Page-Specific JavaScript 


                        In this example, let's say that we want to display Hello
                        world alerts when a shopper visits a blog page.


                        In Stencil's base Cornerstone theme, the JavaScript that
                        runs on the blog page can be found in

                        /cornerstone/assets/js/theme/blog.js. If we want to run
                        additional JavaScript on this page, we can add it to the
                        PageManager class in this file, which is empty by
                        default.
                      header:
                        anchor: adding_locating-page
                    - type: callout
                      data:
                        body: >-
                          Prior to March 2017, the Cornerstone's default path
                          name was `/stencil/`.
                        title: >-
                          Default Path Name Updated from "stencil" to
                          "cornerstone"
                    - type: text
                      data: >-
                        ## Adding Custom JS Functions 


                        In the code example below, we have added three custom
                        JavaScript functions (`blogHello`, `blogGreatday` and
                        `blogGoodbye`) to the page by populating `PageManager`.
                        Note how each function is called at a different time
                        during the page's life cycle:



                        ```

                        import PageManager from '../page-manager';


                        export default class Blog extends PageManager {
                            blogHello() {
                                alert('Hello world from blog.js');
                            }
                            blogGreatday() {
                                alert('Have a great day from blog.js');
                            }
                            blogGoodbye() {
                                alert('Goodbye world from blog.js');
                            }
                            before(next) {
                                this.blogHello();
                                next();
                            }
                            loaded(next) {
                                this.blogGreatday();
                                next();
                            }
                            after(next) {
                                this.blogGoodbye();
                                next();
                            }
                        }

                        ```
                      header:
                        anchor: adding_adding-custom-js
              - title: Basic NPM example
                route:
                  path: /new-subpage-2
                data:
                  blocks:
                    - type: html
                      data: <h1>Basic <code>npm</code> Example</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#basic_what-were-building\">What We're Building</a></li>\n    <li><a href=\"#basic_set-up\">Set Up Your Store</a></li>\n    <li><a href=\"#basic_install-dependencies\">Install Dependencies</a></li>\n    <li><a href=\"#basic_configure-webpack\">Configure Webpack loaders in webpack.conf.js</a></li>\n    <li><a href=\"#basic_import-dependencies\">Import Dependencies</a></li>\n    <li><a href=\"#basic_configured-loaded-method\">Configure the loaded() Method</a></li>\n\t</ul>\n</div>\n\n\n\n\n\n\n\n"
                    - type: callout
                      data:
                        title: >-
                          Compatible with Cornerstone versions earlier than
                          2.x.x
                        body: >-
                          Because this example involves editing the
                          `webpack.conf.js` file, the way this example is
                          outlined will align with only with Cornerstone
                          versions earlier than 2.x.x. This is due to the
                          transition to Webpack 4 in Cornerstone 2.0.0, which
                          deprecated the `webpack.conf.js` file.
                        type: warning
                    - type: text
                      data: >-
                        ## What We're Building


                        This example will use the
                        [Foundation-datepicker.js](http://foundation-datepicker.peterbeno.com/#basic-example)
                        plugin to implement a datepicker for product pages'
                        Delivery/Event Date fields.
                    - type: image
                      data: >-
                        //s3.amazonaws.com/user-content.stoplight.io/6116/1539276603841
                      header:
                        title: Screenshot of final product
                      config:
                        bordered: true
                        maxWidth: '700'
                        maxHeight: '700'
                        centered: true
                        fluid: true
                    - type: text
                      data: >-
                        ## Set Up Your Store


                        To test this example, you'll want your (sandbox or
                        production) store to include at least a couple of
                        products that have a `Delivery/Event Date` configured.
                        (In production, you'd typically use this feature for
                        things like seasonally themed products, temporary
                        promotions, or event tickets.)


                        For product configuration steps in the BigCommerce
                        control panel, please see this support article.
                    - type: text
                      data: "## Install Dependencies\n\nUse the following command to install this example's required dependencies:\n\n`npm install --save-dev css-loader moment foundation-datepicker style-loader`\n\nThe above command's options are:\n\n* `--save-dev` saves the dependencies as `DevDependencies`; this flags them as required for development, but not at runtime. [This stack overflow thread](https://stackoverflow.com/questions/18875674/whats-the-difference-between-dependencies-devdependencies-and-peerdependencies) provides further context to this concept.\n\n* `css-loader` and `style-loader` are webpack loaders, used together:\n\t* [`css-loader`](https://github.com/webpack-contrib/css-loader) resolves `@import` and `url()` expressions in CSS files.\n\t* [`style-loader`](https://github.com/webpack-contrib/style-loader) generically loads stylesheets by injecting a `<style>` tag.\n\n* [`moment`](https://momentjs.com/) is a JavaScript component parses, validates, and displays dates and times.\n\n* `foundation-datepicker` specifies the datepicker package to install."
                    - type: text
                      data: >-
                        ## Configure Webpack loaders in webpack.conf.js


                        The [css]() and [style]() loaders are used to import CSS
                        and to inject it into the DOM, respectively:


                        ```

                        {
                            test: /\.css$/,
                            loader: 'style-loader!css-loader',
                        }

                        ```
                    - type: image
                      data: >-
                        //s3.amazonaws.com/user-content.stoplight.io/6116/1539280227448
                      header:
                        title: CSS and style loaders in context
                    - type: text
                      data: >-
                        ## Import the Dependencies


                        Import these new dependencies into
                        `<theme-name>/assets/js/theme/product.js`.


                        In `<theme-name>/assets/js/app.js`, notice that there is
                        a mapping between the product page and the `product.js`
                        script:


                        ```

                        const PageClasses = {
                            mapping: {
                                ...
                                'pages/product': product,
                        ```


                        That is, when a user navigates to the product page, the
                        `product.js` script is run. First its constructor will
                        be run, followed by the methods `before`, `loaded`, and
                        `after` – in that order.
                    - type: text
                      data: >-
                        ## Configure the loaded() Method


                        We'll use the `loaded` method to initialize our
                        datepicker widget:


                        ```

                        import $ from 'jquery';

                        import PageManager from '../page-manager';

                        import Review from './product/reviews';

                        import collapsibleFactory from './common/collapsible';

                        import ProductDetails from './common/product-details';

                        import videoGallery from './product/video-gallery';

                        import { classifyForm } from './common/form-utils';

                        import
                        'foundation-datepicker/js/foundation-datepicker.min.js';

                        import
                        'foundation-datepicker/css/foundation-datepicker.min.css';

                        import moment from 'moment';


                        ...


                        loaded(next) {
                            let validator;

                            // Init collapsible
                            collapsibleFactory();

                            this.productDetails = new ProductDetails($('.productView'), this.context);

                            videoGallery();

                            const $reviewForm = classifyForm('.writeReview-form');
                            const review = new Review($reviewForm);

                            $('body').on('click', '[data-reveal-id="modal-review-form"]', () => {
                                validator = review.registerValidation();
                            });

                            $reviewForm.on('submit', () => {
                                if (validator) {
                                    validator.performCheck();
                                    return validator.areAll('valid');
                                }

                                return false;
                            });

                            let $deliveryDateMth = $('#deliveryDateMth');
                            let $deliveryDateDay = $('#deliveryDateDay');
                            let $deliveryDateYr = $('#deliveryDateYr');
                            let earliestDate = moment(this.context.product.event_date.date_start, "MMM Do YYYY");
                            let latestDate = moment(this.context.product.event_date.date_end, "MMM Do YYYY");

                            $('#deliveryDate').fdatepicker({
                                leftArrow:'<<',
                                rightArrow:'>>',
                                onRender: function (date) {
                                    return moment(date).isBetween(earliestDate, latestDate, null, '[]') ? '' : 'disabled';
                                }
                            })
                            .on('changeDate', function(event) {
                                let date = event.date;
                                $deliveryDateMth.val(date.getMonth() + 1);
                                $deliveryDateDay.val(date.getDate());
                                $deliveryDateYr.val(date.getFullYear());
                            })
                            .data('datepicker');

                            next();
                        }

                        ```


                        Highlighted below is the new code added to the `loaded`
                        method:
                    - type: image
                      data: >-
                        //s3.amazonaws.com/user-content.stoplight.io/6116/1539275148248
                      header:
                        title: Code addition to loaded method in product.js
                    - type: text
                      data: >
                        Update the
                        `<theme-name>/templates/components/products/product-view.html`
                        template, replacing the existing `{{#if
                        product.event_date}}` block with the following:


                        ```

                        {{#if product.event_date}}
                            {{inject 'product' product}}
                            <div class="form-field">
                                <label class="form-label form-label--alternate form-label--inlineSmall">
                                {{product.event_date.name}}:
                                <small>{{lang 'common.required'}}</small>
                                </label>
                                <input type="text" class="form-input" id="deliveryDate" name="EventDate[Date]" required>
                                <input type="hidden" id="deliveryDateMth" name="EventDate[Mth]">
                                <input type="hidden" id="deliveryDateDay" name="EventDate[Day]">
                                <input type="hidden" id="deliveryDateYr" name="EventDate[Yr]">
                            </div>
                        {{/if}}

                        ```


                        Note that we're "injecting" the product here, so we have
                        access to its properties. This could be done closer to
                        the root of the tree, but it's been placed here for
                        proximity to the code that requires it.


                        We also needed to add form fields for the
                        `EventDate[Mth]`, `EventDate[Day]`, and `EventDate[Yr]`
                        data, which we update whenever the `changeDate` event
                        occurs. This conforms to the data format that the server
                        expects. These fields are hidden from the user.
              - title: Advanced NPM Example
                route:
                  path: /advanced-npm-example
                data:
                  blocks:
                    - type: html
                      data: <h1>Advanced NPM Example</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#advanced_video-of-what\">Video of What We're Building</a></li>\n    <li><a href=\"#advanced_install-dependencies\">Install Dependencies</a></li>\n    <li><a href=\"#advanced_import-dependencies\">Import Dependencies</a></li>\n    <li><a href=\"#advanced_update-webpackconfjs\">Update webpack.conf.js</a></li>\n    <li><a href=\"#advanced_update-appjs\">Update app.js</a></li>\n    <li><a href=\"#advanced_add-the-xcoupondrawer\">Add the <<code>x-coupon-drawer</code>> Element to the Page</a></li>\n    <li><a href=\"#advanced_call-initreact\">Call initReact from base.html</a></li>\n    <li><a href=\"#advanced_create-an-assetsjscomp\">Create an assets/js/components Folder</a></li>\n    <li><a href=\"#advanced_create-a-coupondrawerjs-file\">Create a CouponDrawer.js File</a></li>\n    <li><a href=\"#advanced_create-a-verticallinear\">Create a VerticalLinearStepper.js File</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >-
                        ## Video of What We're Building


                        <iframe width="560" height="315"
                        src="https://www.youtube.com/embed/sudvuxJFxKc"
                        frameborder="0" allow="autoplay; encrypted-media"
                        allowfullscreen></iframe>
                      header:
                        anchor: advanced_video-of-what
                    - type: text
                      data: >-
                        ## Install Dependencies


                        Material-UI requires the `react-tap-event-plugin`
                        module. Also, `document-register-element` is needed to
                        polyfill `document.registerElement`. The babel presets
                        and plugins are needed to support `Object.assign`,
                        `react`, and `Material-UI`, respectively:


                        ```

                        npm install -save-dev document-register-element
                        material-ui react react-dom react-tap-event-plugin  

                        npm install -save-dev
                        babel-plugin-transform-object-assign babel-preset-react
                        babel-preset-stage-1

                        ```
                      header:
                        anchor: advanced_install-dependencies
                    - type: text
                      data: >-
                        ## Import Dependencies


                        Next, import the new dependencies into
                        `<theme-name>/assets/js/app.js`


                        Note the `CouponDrawer` import at the bottom. This file
                        doesn't yet exist, but we'll shortly create a React
                        component with this name:
                      header:
                        anchor: advanced_import-dependencies
                    - type: image
                      data: >-
                        //s3.amazonaws.com/user-content.stoplight.io/6116/1540279579178
                      header:
                        title: app.js imports
                    - type: text
                      data: >-
                        ## Update webpack.conf.js


                        Update webpack.conf.js with the new presets and
                        plug-ins, as shown here:
                      header:
                        anchor: advanced_update-webpackconfjs
                    - type: image
                      data: >-
                        //s3.amazonaws.com/user-content.stoplight.io/6116/1540279603654
                      header:
                        title: 'webpack.config.js: presets and plugins'
                    - type: text
                      data: >-
                        ## Update app.js


                        Add the following code to the bottom of
                        `<theme-name>/assets/js/app.js`:


                        ```

                        window.initReact = function(contextJSON = '{}') {
                            injectTapEventPlugin();
                            const context = JSON.parse(contextJSON);
                            const proto = Object.create(HTMLElement.prototype, {
                                attachedCallback: {
                                    value: function() {
                                        const mountPoint = document.createElement('span');
                                        const attrs = [].reduce.call(this.attributes, (memo, attr) => {
                                            memo[attr.name] = attr.value;
                                            return memo;
                                        }, {});
                                        const data = Object.assign({}, context, attrs);

                                        this.appendChild(mountPoint);
                                        ReactDOM.render(
                                            <MuiThemeProvider>
                                                <CouponDrawer data={data} />
                                            </MuiThemeProvider>,
                                            mountPoint
                                        );
                                    }
                                }
                            });
                            document.registerElement('x-coupon-drawer', {prototype: proto});
                        }

                        ```


                        This sets up a handler for attaching an
                        `<x-coupon-drawer>` element to the page. We're using
                        React here to render the `CouponDrawer` component. This
                        block of code was taken and modified from
                        https://facebook.github.io/react/docs/web-components.html#using-react-in-your-web-components.
                      header:
                        anchor: advanced_update-appjs
                    - type: text
                      data: >-
                        ## Add the `<x-coupon-drawer>` Element to the Page 


                        Add this in `<theme-name>/templates/layout/base.html`.
                        (See the image below.) We're using this layout template
                        for this example, although you would follow the same
                        steps in any other template.
                      header:
                        anchor: advanced_add-the-xcoupondrawer
                    - type: text
                      data: >-
                        ## Call initReact from base.html 


                        Add a call to `window.initReact`. We're continuing to
                        work with the `base.html` page for this example. Notice
                        that we're also passing in the jsContext here. The
                        `initReact` method will merge this context with an
                        object created from the attributes placed upon the
                        `<x-coupon-drawer>`, and will pass the combined data
                        along to the React component.
                      header:
                        anchor: advanced_call-initreact
                    - type: image
                      data: >-
                        //s3.amazonaws.com/user-content.stoplight.io/6116/1540279254389
                      header:
                        title: base.html setup
                      config:
                        centered: true
                        fluid: true
                        bordered: true
                    - type: text
                      data: |-
                        ## Create an assets/js/components Folder 

                        We'll store our React components here.
                      header:
                        anchor: advanced_create-an-assetsjscomp
                    - type: text
                      data: >-
                        ## Create a CouponDrawer.js File


                        Create a
                        `<theme-name>/assets/js/components/CouponDrawer.js`
                        file. Populate this file with the following code block
                        (which is adapted from
                        http://www.material-ui.com/#/components/drawer):


                        ```

                        import React from 'react';

                        import Drawer from 'material-ui/Drawer';

                        import AppBar from 'material-ui/AppBar';

                        import RaisedButton from 'material-ui/RaisedButton';

                        import VerticalLinearStepper from
                        './VerticalLinearStepper';


                        export default class CouponDrawer extends
                        React.Component {

                          constructor(props) {
                            super(props);
                            this.state = {open: false};
                          }

                          handleToggle = () => this.setState({open: !this.state.open});

                          render() {
                            return (
                              <div>
                                <RaisedButton
                                  label="Click here to get a coupon!"
                                  onTouchTap={this.handleToggle}
                                />
                                <Drawer width={200} openSecondary={true} open={this.state.open} >
                                  <AppBar title="Coupon magic" titleStyle={{fontSize: 14}} />
                                  <VerticalLinearStepper />
                                </Drawer>
                              </div>
                            );
                          }
                        }

                        ```
                      header:
                        anchor: advanced_create-a-coupondrawerjs-file
                    - type: text
                      data: >-
                        ## Create a VerticalLinearStepper.js File


                        Create a
                        `<theme-name>/assets/js/components/VerticalLinearStepper.js`
                        file. Populate this file with the following code block:


                        ```

                        import React from 'react';

                        import {
                          Step,
                          Stepper,
                          StepButton,
                          StepContent,
                        } from 'material-ui/Stepper';

                        import RaisedButton from 'material-ui/RaisedButton';

                        import FlatButton from 'material-ui/FlatButton';

                        import TextField from 'material-ui/TextField';


                        /**
                         * A basic vertical non-linear implementation
                         */
                        class VerticalLinearStepper extends React.Component {

                          constructor(props) {
                              super(props);
                          }

                          state = {
                            stepIndex: 0,
                          };

                          handleNext = () => {
                            const {stepIndex} = this.state;
                            if (stepIndex < 2) {
                              this.setState({stepIndex: stepIndex + 1});
                            }
                          };

                          handlePrev = () => {
                            const {stepIndex} = this.state;
                            if (stepIndex > 0) {
                              this.setState({stepIndex: stepIndex - 1});
                            }
                          };

                          renderStepActions(step) {
                            return (
                              <div style={{margin: '12px 0'}}>
                                <RaisedButton
                                  label="Next"
                                  disableTouchRipple={true}
                                  disableFocusRipple={true}
                                  primary={true}
                                  onTouchTap={this.handleNext}
                                  style={{marginRight: 12}}
                                />
                                {step > 0 && (
                                  <FlatButton
                                    label="Back"
                                    disableTouchRipple={true}
                                    disableFocusRipple={true}
                                    onTouchTap={this.handlePrev}
                                  />
                                )}
                              </div>
                            );
                          }

                          render() {
                            const {stepIndex} = this.state;

                            return (
                              <div style={{maxWidth: 380, maxHeight: 400, margin: 'auto'}}>
                                <Stepper
                                  activeStep={stepIndex}
                                  linear={false}
                                  orientation="vertical"
                                >
                                  <Step>
                                    <StepButton onTouchTap={() => this.setState({stepIndex: 0})}>
                                      Do this
                                    </StepButton>
                                    <StepContent>
                                      <p>
                                        Navigate to <a href="http://example.com">here</a> and get your code.
                                      </p>
                                      {this.renderStepActions(0)}
                                    </StepContent>
                                  </Step>
                                  <Step>
                                    <StepButton onTouchTap={() => this.setState({stepIndex: 1})}>
                                      Then this
                                    </StepButton>
                                    <StepContent>
                                      <TextField hintText="Enter your code here" style={{height: 100, width: 100}}/>
                                      {this.renderStepActions(1)}
                                    </StepContent>
                                  </Step>
                                  <Step>
                                    <StepButton onTouchTap={() => this.setState({stepIndex: 2})}>
                                      Collect your coupon!
                                    </StepButton>
                                    <StepContent>
                                      <p>
                                        <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/9/9b/Wikipedia_mobile_en.svg/296px-Wikipedia_mobile_en.svg.png"/>
                                      </p>
                                      {this.renderStepActions(2)}
                                    </StepContent>
                                  </Step>
                                </Stepper>
                              </div>
                            );
                          }
                        }


                        export default VerticalLinearStepper;

                        ```


                        The above code block was adapted from
                        http://www.material-ui.com/#/components/stepper.
                      header:
                        anchor: advanced_create-a-verticallinear
                    - type: callout
                      data:
                        body: >-
                          We must register a custom element to set up the "root"
                          of every React component we create. However, within a
                          React component, we can import other React components
                          without having to register them. For example, here we
                          register x-coupon-drawer as a custom element that
                          renders the React CouponDrawer component. However,
                          within CouponDrawer, we can simply import the
                          VerticalLinearStepper component needing to set it up
                          in the same way.
                        title: ' Note on the VerticalLinearStepper.js Example'
              - title: Page Types and Life Cycle
                route:
                  path: /new-subpage
                data:
                  blocks:
                    - type: html
                      data: <h1>Page Types and Life Cycle</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#page-types_stencil-utils\">stencil-utils Library</a></li>\n    <li><a href=\"#page-types_javascript-api\">JavaScript API</a></li>\n    <li><a href=\"#page-types_callback\">Callback Methods</a></li>\n    <li><a href=\"#page-types_javascript\">JavaScript Template Context Injection</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >+
                        ## stencil-utils Library


                        [stencil-utils](/stencil-docs/adding-event-hooks-to-your-theme/stencil-utils-api-reference)
                        is our supporting library for events and remote
                        interactions.

                      header:
                        anchor: page-types_stencil-utils
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Javascript API


                        Stencil themes include an API for running JavaScript on
                        a per-page basis. To properly write JavaScript for your
                        theme, you will have the following page types available
                        to you:


                        * "pages/account/addresses"

                        * "pages/account/add-address"

                        * "pages/account/add-return"

                        * "pages/account/add-wishlist"

                        * "pages/account/recent-items"

                        * "pages/account/download-item"

                        * "pages/account/edit"

                        * "pages/account/return-saved"

                        * "pages/account/returns"

                        * "pages/auth/login"

                        * "pages/auth/account-created"

                        * "pages/auth/create-account"

                        * "pages/auth/new-password"

                        * "pages/blog"

                        * "pages/blog-post"

                        * "pages/brand"

                        * "pages/brands"

                        * "pages/cart"

                        * "pages/category"

                        * "pages/compare"

                        * "pages/errors"

                        * "pages/gift-certificate/purchase"

                        * "pages/gift-certificate/balance"

                        * "pages/gift-certificate/redeem"

                        * "global"

                        * "pages/home"

                        * "pages/order-complete"

                        * "pages/page"

                        * "pages/product"

                        * "pages/search"

                        * "pages/sitemap"

                        * "pages/subscribed"

                        * "page/account/wishlist-details"

                        * "pages/account/wishlists"


                        These page types correspond to the pages within your
                        theme. Each of these page types maps to an ES6 module
                        that extends the base `PageManager` abstract class:


                        ```
                           export default class Blog extends PageManager {
                                constructor() {
                                    //Setup code goes here – attach to internals, and use internals as you would 'this'
                                }
                            }
                        ```
                      header:
                        anchor: page-types_javascript-api
                    - type: text
                      data: '---'
                    - type: text
                      data: >+
                        ## Callback Methods


                        Within `PageManager`, you will see methods that are
                        available from all your classes. But three methods are
                        especially important. The following methods have the
                        signature `func (callback)`, with the callback taking
                        `callback(err)` in case of an error.


                        ### before(callback)


                        When this method is implemented in your class, the code
                        contained will be executed after the constructor but
                        before the `loaded()` method. This will provide a shim
                        for your code before your main implementation logic
                        could run.


                        ```
                         export default class Blog extends PageManager {
                                constructor() {
                                    //Setup code goes here
                                }
                                before(callback) {
                                    //Code that should be ran before any other code in this class

                                    //Callback must be called to move on to the next method
                                    callback();
                                }
                            }
                        ```


                        ### loaded(callback)


                        This method will be called when the constructor has ran
                        and `before()` has executed. Main implementation code
                        should live in the `loaded()` method.


                        ```
                         export default class Blog extends PageManager {
                                constructor() {
                                    //Setup code goes here
                                }
                                loaded(callback) {
                                    //Main implementation logic here

                                    //Callback must be called to move on to the next method
                                    callback();
                                }
                            }
                        ```


                        ### after(callback)


                        This method is for any cleanup that may need to happen,
                        and it will be executed after `before()` and `loaded()`.


                        ```
                            export default class Blog extends PageManager {
                                constructor() {
                                    //Set up code goes here
                                }
                                after(callback) {
                                    //Main implementation logic here

                                    //Callback must be called to move on to the next method
                                    callback();
                                }
                            }
                        ```




                      header:
                        anchor: page-types_callback
                    - type: text
                      data: '---'
                    - type: text
                      data: >+
                        ## JavaScript Template Context Injection


                        Occasionally, you might need to use dynamic data from
                        the template context within your theme's client-side
                        application code. Two helpers are provided to help
                        achieve this.


                        The `inject` helper allows you to compose a json object
                        with a subset of the template context to be sent to the
                        browser:


                        `{{inject "stringBasedKey" contextValue}}`


                        To retrieve the parsable JSON object, just call
                        `{{jsContext}}` after all of the `{{inject}}` calls.


                        For example, to set up the product name in your
                        client-side app, you can do this if you're in the
                        context of a product:


                        ```

                        {{inject "myProductName" product.title}}


                        <script>

                        // Note the lack of quotes around the jsContext
                        handlebars helper, it becomes a string automatically.

                        var jsContext = JSON.parse({{jsContext}}); //jsContext
                        would output "{\"myProductName\": \"Sample Product\"}"
                        which can feed directly into your JavaScript


                        console.log(jsContext.myProductName); // Will output:
                        Sample Product

                        </script>

                        ```


                        You can compose your JSON object across multiple pages,
                        to create a different set of client-side data depending
                        on the currently loaded template context.


                        Stencil's Cornerstone base theme makes the `jsContext`
                        available as `this.context`, both on the active page
                        scoped and on global `PageManager` objects.





                      header:
                        anchor: page-types_javascript
        - title: Conditional-Logic Examples
          route:
            path: /conditional-logic-examples
          data:
            children:
              - title: 'Catalog Price Object: How Properties Interact'
                route:
                  path: /catalog-price-object
                data:
                  blocks:
                    - type: html
                      data: '<h1>Catalog Price Object: How Properties Interact</h1>'
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#catalog-price_price-prop-overview\">Price Properties Overview</a></li>\n    <li><a href=\"#catalog-price_cost-price\">Cost Price</a></li>\n    <li><a href=\"#catalog-price_basic-price-example\">Basic Price Example – No \"Sale Price\" Defined</a></li>\n    <li><a href=\"#catalog-price_sale-price-defined\">\"Sale Price\" Defined Example</a></li>\n    <li><a href=\"#catalog-price_prices-and-conditional\">Prices and Conditional Logic – Special for You!</a></li>\n    <li><a href=\"#catalog-price_including-and-or-excluding\">Including and/or Excluding Tax</a></li>\n    <li><a href=\"#catalog-price_tax-sale-price\">Tax/Sale Price Interactions</a></li>\n    <li><a href=\"#catalog-price_mapping-of-control\">Mapping of Control-Panel Options to Catalog Price Properties</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >-
                        ## Price Properties Overview


                        For each product in a catalog, merchants can use
                        BigCommerce's control panel options to set multiple
                        prices for a product. 


                        As a theme developer seeking ways to more effectively
                        merchandise products, you might want to engineer your
                        theme to utilize this information and highlight the
                        savings that a merchant is providing over the list
                        price, commonly known as the manufacturer's suggested
                        retail price (MSRP). In order to do this, you will need
                        to reference the correct property that the Stencil
                        catalog price object returns for each product. 


                        This page explains how the properties interact with each
                        other, and with control-panel options. We will also
                        include an example of building conditional logic around
                        a price property.
                      header:
                        anchor: catalog-price_price-prop-overview
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Cost Price


                        The Cost Price property is never returned to the
                        storefront. This is by design. Generally, merchants
                        would not want to reveal the true cost of goods to
                        shoppers. Rather, the cost price field is meant to be
                        consumed by reports and third-party accounting
                        integrations.
                      header:
                        anchor: catalog-price_cost-price
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Basic Price Example – No `Sale Price` Defined


                        Assume that the merchant has defined a product’s price
                        like this in the BigCommerce Control Panel:
                      header:
                        anchor: catalog-price_basic-price-example
                    - type: image
                      data: >-
                        //s3.amazonaws.com/user-content.stoplight.io/6116/1539813608717
                      header:
                        title: Item without sale price defined
                      config:
                        centered: true
                        fluid: true
                        bordered: true
                        maxWidth: '650'
                        maxHeight: '350'
                    - type: text
                      data: >+
                        In the photo above:


                        * The `Price` field contains this product’s standard
                        store price.

                        * The `Excluding Tax` indicator to the right of the
                        `Price` field is applicable to the whole column of price
                        fields.

                        * The `Cost Price` field will not be returned, for
                        reasons described above.

                        * The `Retail Price` field contains the list price (also
                        known as MSRP).

                        * No `Sale Price has` been set here.



                        A corresponding Stencil `price` object for the product
                        will be structured as follows:


                        ```

                        "product": {
                          "price": {
                            "without_tax": {"formatted": "$150.00","value": 150},
                            "rrp_without_tax": {"formatted": "$250.00","value": 250},
                            "saved": {"formatted": "$100.00","value": 100},
                            "tax_label": "Tax"
                          }
                        }

                        ```

                        Items to note about the Stencil `price` object above: 


                        * The `without_tax` property represents the standard
                        store price (the control panel’s `Price` field).

                        * The `rrp_without_tax` property represents the list
                        price or MSRP. (Here, `rrp` is short for "regular retail
                        price.")

                        * The `saved` property is the computed difference
                        between the `without_tax` versus `rrp_without_tax`
                        values.

                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## `Sale Price` Defined Example


                        This example below is identical, except that here the
                        merchant has assigned the product a discounted `Sale
                        Price` of `$123`:
                      header:
                        anchor: catalog-price_sale-price-defined
                    - type: image
                      data: >-
                        //s3.amazonaws.com/user-content.stoplight.io/6116/1539837943099
                      header:
                        title: Item with sale price defined
                      config:
                        maxWidth: '600'
                        maxHeight: '300'
                        centered: true
                        fluid: true
                        bordered: true
                    - type: text
                      data: >+
                        A corresponding Stencil price object for the product
                        will be structured as shown below. 


                        ```

                        "product": {
                          "price": {
                            "without_tax": {"formatted": "$123.00","value": 123},
                            "non_sale_price_without_tax": {"formatted": "$150.00","value": 150},
                            "rrp_without_tax": {"formatted": "$250.00","value": 250},
                            "saved": {"formatted": "$127.00","value": 127},
                            "tax_label": "Tax"
                          }
                        }

                        ```


                        Items to note regarding the Stencil `price` object
                        above: 


                        * The product’s effective price is the `Sale Price`
                        which appears in the object’s `without_tax` property.

                        * The regular store price is now displayed in an added
                        property called `non_sale_price_without_tax`.

                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Prices and Conditional Logic – Special for You! 


                        Stencil structures product prices as described above for
                        backward compatibility with the BigCommerce platform's
                        traditional treatment of prices. As a theme developer,
                        this behavior enables you to embed logic that determines
                        whether to display a strikeout (struck-out) price on the
                        storefront.


                        The example below tests for the presence of the
                        `non_sale_price_without_tax` property. If it is present,
                        that means that the product has a sale price, so the
                        page will display the regular store price struck-out:


                        ```
                          {{#if price.non_sale_price_without_tax}}
                             ... [some code to display on-sale strikeout pricing] ...
                          {{/if}}
                        ```
                      header:
                        anchor: catalog-price_prices-and-conditional
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Including and/or Excluding Tax 


                        Depending on how the store has been set up in the
                        control panel’s `Store Setup > Tax > Configure Tax
                        Display Settings`, the price object’s properties will
                        represent prices including tax, excluding tax, or in
                        both ways.


                        This setting affects not only how values are returned in
                        the Stencil framework, but also how the values appear on
                        storefront pages:
                      header:
                        anchor: catalog-price_including-and-or-excluding
                    - type: image
                      data: >-
                        //s3.amazonaws.com/user-content.stoplight.io/6116/1539842045139
                      header:
                        title: Configure Tax Display Settings
                      config:
                        centered: true
                        fluid: true
                        bordered: true
                        maxWidth: '600'
                        maxHeight: '400'
                    - type: text
                      data: >-
                        Below is an example of a Stencil `price` object that
                        returns properties’ values both including, and
                        excluding, tax. Here, we have configured a flat 10% tax
                        rate:


                        ```

                        "product": {
                          "price": {
                            "with_tax": {"formatted": "$165.00","value": 165},
                            "without_tax": {"formatted": "$150.00","value": 150},
                            "rrp_with_tax": {"formatted": "$275.00","value": 275},
                            "rrp_without_tax": {"formatted": "$250.00","value": 250},
                            "saved": {"formatted": "$110.00","value": 110},
                            "tax_label": "Tax"
                          }
                        }

                        ```


                        Items to note:


                        * The `with_tax` property is new in this example, and
                        represents the `without_tax` value plus a 10% tax
                        markup.

                        * The `rrp_with_tax` property is new as well, and
                        represents the `rrp_without_tax` value plus a 10% tax
                        markup.

                        *You would see the same new properties and values if the
                        control-panel setting had been `Including tax`, rather
                        than `Including and excluding tax`. But these
                        properties/vaues would not be added for a control-panel
                        seting of Excluding tax.
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Tax/Sale Price Interactions 


                        Here is the same example – values both including and
                        excluding tax, and a flat 10% tax rate – but we have
                        also defined a sale price for the product:


                        ```

                        "product": {
                          "price": {
                            "with_tax": {"formatted": "$135.30","value": 135.3},
                            "without_tax": {"formatted": "$123.00","value": 123},
                            "rrp_with_tax": {"formatted": "$275.00","value": 275},
                            "rrp_without_tax": {"formatted": "$250.00","value": 250},
                            "saved": {"formatted": "$139.70","value": 139.7},
                            "non_sale_price_without_tax": {"formatted": "$150.00","value": 150},
                            "non_sale_price_with_tax": {"formatted": "$165.00","value": 165},
                            "tax_label": "Tax"
                          }
                        }

                        ```


                        Here again:


                        * The `with_tax` property represents the without_tax
                        value, plus a 10% tax markup.

                        * The `rrp_with_tax` property represents the
                        `rrp_without_tax` value, plus a 10% tax markup.


                        New here:


                        * The `non_sale_price_without_tax` and
                        `non_sale_price_with_tax` properties are added, to
                        represent the standard store price (respectively)
                        without and with tax.

                        * The saved value is now based on the difference between
                        the `with_tax` versus `non_sale_price_with_tax` values.

                        * You would see the same results if the control-panel
                        setting had been Including tax, rather than Including
                        and excluding tax. But these properties/values would not
                        be added for a control-panel seting of Excluding tax.
                      header:
                        anchor: catalog-price_tax-sale-price
                    - type: text
                      data: '---'
                    - type: text
                      data: "## Mapping of Control-Panel Options to Catalog Price Properties\n\nThis table shows how price options available in the BigCommerce control panel relate to properties returned on the Stencil framework.\n\n<table>\n  <tr>\n    <th>Control-Panel Field</th>\n    <th>Stencil Catalog Price Object and Property</th>\n    <th>Notes</th>\n  </tr>\n\n  <tr>\n    <td>Retail Price (excluding tax)</td>\n\t\t<td><code>{{ product.price.rrp_without_tax }}</code></td>\n    <td>Typically used to represent the product’s list price (MSRP).</td>\n  </tr>\n\n  <tr>\n    <td>Retail Price (including tax)</td>\n\t\t<td><code>{{ product.price.rrp_with_tax }}</code></td>\n    <td>Typically used to represent the product’s list price (MSRP), including tax.</td>\n  </tr>\n\n  <tr>\n    <td>Price (excluding tax)</td>\n\t\t<td><code>{{ product.price.non_sale_price_without_tax }}</code></td>\n    <td>The standard store price for the product.</td>\n  </tr>\n\n  <tr>\n    <td>Price (including tax)</td>\n\t\t<td><code>{{ product.price.non_sale_price_with_tax }}</code></td>\n    <td>The standard store price for the product, with tax.</td>\n  </tr>\n  \n  <tr>\n    <td>Sale Price (excluding tax)</td>\n\t\t<td><code>{{ product.price.without_tax }}</code></td>\n    <td>This product’s discounted/sale price.</td>\n  </tr>\n  \n  <tr>\n    <td>Sale Price (including tax)</td>\n    <td>{{ product.price.with_tax }}</td>\n    <td>This product’s discounted/sale price, with tax.</td>\n  </tr>\n  \n  <tr>\n    <td>[No control-panel field]</td>\n    <td>{{ product.price.saved }}</td>\n    <td>The customer’s savings on the effective price versus list price.</td>\n  </tr>\n</table>"
                      header:
                        anchor: catalog-price_mapping-of-control
              - title: 'Cart Price Properties: Relationships'
                route:
                  path: /cart-price-relationships
                data:
                  blocks:
                    - type: html
                      data: '<h1>Cart Price Properties: Relationships</h1>'
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#cart-price_cart-price-props\">Cart Price Properties: Relationships</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >+
                        ## Cart Price Properties: Relationships


                        This page shows the relationship of price properties
                        available on the `{{cart.items}}` object. These
                        properties' values cascade as follows.


                        For a single cart item, the `rrp` property contains the
                        list price, also known as MSRP:


                        ```

                        "rrp": { 
                          "formatted": "$130.00",
                          "value": 130
                        }

                        ```


                        Let's assume that the standard store price for this item
                        is actually $100.00, and that these bulk discount rules
                        are applied:


                        ```

                        "bulk_pricing": { 
                          "base_price": {
                            "formatted": "$100.00",
                            "value": 100
                          },
                          "discount_percentage": 5,  
                          "discount_amount": null
                        }

                        ```


                        Within `{{cart.items}}`, the `price` property contains
                        the item's price after bulk discounts, but before cart
                        discounts and promotions:


                        ```

                        "price": { 
                          "formatted": "$95.00",
                          "value": 95
                        }

                        ```


                        The `price_discounted` property contains the item's
                        price after cart discounts and promotions:


                        ```

                        "price_discounted": {  
                          "formatted": "$85.50",
                          "value": 85.5
                        }

                        ```

                      header:
                        anchor: cart-price_cart-price-props
              - title: Calling Theme-Wide Variables via Handlebars
                route:
                  path: /calling-theme-wide-variables
                data:
                  blocks:
                    - type: html
                      data: <h1>Calling Theme-Wide Variables via Handlebars</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#calling-theme-wide_calling-theme-wide\">Calling Theme-Wide Variables via Handlebars</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >-
                        ## Calling Theme-Wide Variables via Handlebars


                        As shown in an earlier Quick Start example, you can
                        reference variables from `config.json` in a theme
                        template's front matter. But you can also call any
                        `config.json` variable within a template's
                        HTML/Handlebars body, by using a Handlebars expression
                        that precedes the variable with `theme_settings`.


                        Below, from Cornerstone's `templates/pages/home.html`,
                        is a code snippet that provides three examples:


                        ```

                        <div class="main full">
                            {{#if products.featured}}
                                {{> components/products/featured products=products.featured
                                    columns=theme_settings.homepage_featured_products_column_count}}
                            {{/if}}

                            {{#if products.top_sellers}}
                                {{> components/products/top products=products.top_sellers
                                    columns=theme_settings.homepage_top_products_column_count}}
                            {{/if}}

                            {{#if products.new}}
                                {{> components/products/new products=products.new 
                                    columns=theme_settings.homepage_new_products_column_count}}
                            {{/if}}
                        </div> 

                        ```


                        Above, each `if` conditional statement tests whether one
                        of the three products attributes (Featured Products, Top
                        Sellers/Popular Brands, or New Products) is declared
                        within this template's front matter. If so, for the
                        corresponding section on this page, it sets the local
                        column count to match the theme-wide
                        `theme_settings...._column_count value` defined in
                        `config.json`.
                      header:
                        anchor: calling-theme-wide_calling-theme-wide
              - title: Dynamic Content Rendering on Stencil Storefronts
                route:
                  path: /dynamic-content-rendering
                data:
                  blocks:
                    - type: html
                      data: >-
                        <h1>Dynamic Content Rendering on Stencil
                        Storefronts</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#dynamic-content_why-dynamic-content\">Why Dynamic Content?: Dropzones, Dynamic Tabs, and Snippets</a></li>\n    <li><a href=\"#dynamic-content_dropzones\">Dropzones</a></li>\n    <li><a href=\"#dynamic-content_dynamic-tabs\">Dynamic Tabs</a></li>\n    <li><a href=\"#dynamic-content_snippets\">Snippets</a></li>\n    <li><a href=\"#dynamic-content_recap\">Recap</a></li>\n  </ul>\n</div>"
                    - type: text
                      data: >-
                        _We're gratefully sharing techniques devised by Ken
                        Utting, Web Developer for BigCommerce client
                        goruck.com_.


                        ## Why Dynamic Content?: Dropzones, Dynamic Tabs, and
                        Snippets


                        At GORUCK, we've customized our Stencil theme (currently
                        using the
                        [Merchant](https://www.bigcommerce.com/theme/merchant-light/?_ga=2.52710120.1984523106.1539568940-967431010.1523308107)
                        theme) to provide several ways to update our site
                        content without requiring changes to the theme itself.
                        This allows our content folks to make changes to our
                        theme without having to wait on our software developers.


                        Also, by pushing content out of the theme, these
                        techniques reduce the differences between our customized
                        theme and the out-of-the-box (base) theme – which makes
                        it easier to integrate ongoing updates into our theme.
                        Finally, these techniques allow us share identical
                        content across pages without copying and pasting.


                        Three techniques in particular have proven useful to us.
                        We call them Dropzones, Dynamic Tabs, and Snippets.
                        There is nothing particularly special to GORUCK about
                        these techniques, so there is no reason you can't adopt
                        them for your own store/theme.


                        ### Building on the Control Panel


                        The BigCommerce control panel provides an HTML editor
                        where you can enter custom content for Products,
                        Categories, and custom static pages (Storefront > Web
                        Pages). However, we encountered the following
                        limitations:


                        The HTML editor will remove a number of tags,
                        particularly style and script tags.


                        Without changes like the ones we made at GORUCK
                        (described below), all the content will be placed in a
                        single location on the page.


                        At GORUCK, we needed the ability to inject arbitrary
                        HTML into our page, and to place that content at various
                        specific page locations. To achieve this, we developed
                        the three techniques described below.
                      header:
                        anchor: dynamic-content_why-dynamic-content
                    - type: text
                      data: >-
                        ## Dropzones


                        Let's say that at the top of your category pages, you
                        want to display a full-width, category-specific, image.
                        And at the bottom of these pages, you want to display a
                        category-specific message or image gallery.


                        One possibility is to define a custom page for every
                        category. But aside from the work involved to set this
                        up, every time you added or removed a category, you
                        would need to add or remove a custom page from your
                        theme. And of course, it's possible that you would also
                        want control like this on product pages, and on other
                        pages on your storefront.


                        A more general solution we implemented was to create a
                        small set of custom pages: one for categories, one for
                        products, and so on. Each of the custom pages contains a
                        few `div` elements that define dropzones for that page.


                        With these dropzones defined, we can then populate them
                        with dynamic content specific to any instance of the
                        page. Here is an example of a dropzone that places an
                        image gallery at the bottom of a category page:
                      header:
                        anchor: dynamic-content_dropzones
                    - type: image
                      data: >-
                        //s3.amazonaws.com/user-content.stoplight.io/6116/1539874696853
                      header:
                        title: >-
                          Dropzone that places an image gallery at the bottom of
                          a category page
                    - type: text
                      data: >-
                        ### Dropzones HTML


                        The HTML for a dropzone is simply something like:


                        `<div id="gr-dropzone-top"></div>`


                        where the div's `id` defines the dropzone's name.


                        Then, using the BigCommerce **control panel's custom
                        HTML editor** (in this example, the Categories editor),
                        we place our content inside div tags that specify the
                        dropzone where the content should be inserted. Here is a
                        simple example:


                        ```

                        <div class="gr-dropzone" data-gr-zone="gr-dropzone-top">
                            <p>This content will be placed in a dropzone at the top of the page, because that dropzone has the id matching our data-gr-zone attribute.</p>
                        </div>

                        ```


                        ### Dropzones HTML Example


                        Here is an example of some HTML that we actually use:


                        ```

                        <div class="gr-dropzone"
                        data-gr-zone="gr-dropzone-bottom">
                            <h3>GORUCK GEAR IN THE FIELD</h3>
                            <div id="bv-grid-gallery" data-gr-groups="goruck-rm-group" data-gr-tags="gear"></div>
                        </div>

                        ```


                        ### Dropzones JavaScript


                        The content is moved from the default location to the
                        dropzone by JavaScript we added to the PageManager
                        class. In BigCommerce's Cornerstone base theme, Pixel
                        Union's Merchant theme, and other Stencil themes,
                        PageManager is the parent class of all page classes. So,
                        its methods get invoked on every page. This makes it a
                        great place to put code like this, which needs to run
                        every time a page is loaded.


                        We modified our theme's PageManager.before method to
                        invoke a new method named `gr_moveHtmlToDropzones`:


                        ```
                         gr_moveHtmlToDropzones () {
                                $(".gr-dropzone").each(function () {
                                    const $this = $(this);
                                    const zoneId = $this.data("gr-zone");
                                    if (zoneId) {
                                        $("#" + zoneId).html($this.html());   // copy the html to where it should be
                                        $this.remove();             // remove the html from its temporary location
                                    } else {
                                        console.warn("PageManager.gr_moveHtmlToDropzones: dropzone has no target.");
                                    }
                                });
                            }
                        ```


                        Finally, in our .scss file, we set the `.gr-dropzone`
                        class to display: none. This prevents the content from
                        appearing on the page in the wrong location before
                        PageManager has a chance to move it into the dropzone.
                      header:
                        anchor: dynamic-content_dropzones
                    - type: text
                      data: >-
                        ## Dynamic Tabs


                        Our Stencil base theme presents information on our
                        product pages in several tabs. We wanted to introduce
                        several new tabs, and to vary the tabs by product
                        category and brand. Additionally, we wanted the ability
                        to store a tab's content in an external file, on our
                        WebDAV or CDN (content delivery network).


                        By storing content in an external file, we can share
                        identical content across pages, without copying and
                        pasting. Also, changes to the content can be made just
                        once, and be reflected on all our pages.


                        So we implemented a feature we call Dynamic Tabs.
                        Dynamic Tabs are similar to dropzones, in that they
                        allow you to use the control panel's HTML editor to
                        provide content, while moving it to a specific location
                        on the page. In this case, our content will appear in a
                        tab.


                        In the example below, we use this technique to place the
                        `RIGHT BY YOU` tab in the fourth position:
                      header:
                        anchor: dynamic-content_dynamic-tabs
                    - type: image
                      data: >-
                        //s3.amazonaws.com/user-content.stoplight.io/6116/1539874970240
                    - type: text
                      data: >+
                        ### Dynamic Tabs HTML


                        There are two versions of the HTML. The first is
                        designed for a tab you want to drop in using a page's
                        own HTML:


                        ```

                        <div class="gr-tab" data-gr-position="POSITION"
                        data-gr-title="TITLE"> 
                             CONTENT 
                        </div>

                        ```


                        The second version is designed for a tab that gets its
                        content from an external file:


                        ```

                        <div class="gr-tab" data-gr-content="CONTENT URL">

                        </div>

                        ```


                        In this second case, the HTML in that external file must
                        start with the POSITION and TITLE information:


                        ```

                        <input id="gr-tab-data" type="hidden"
                        data-gr-position="POSITION" data-gr-title="TITLE" /> 
                         CONTENT
                        ```


                        ### Dynamic Tabs Parameters


                        POSITION is a number, which determines where the dynamic
                        tab will be put. For example, a POSITION of 3 means that
                        the tab will be placed after the third tab.


                        We use a POSITION of 0 to place a tab ahead of the first
                        tab. If the POSITION attribute is omitted, the tab will
                        be placed after all the other tabs. (Note that if you
                        add multiple dynamic tabs, any POSITION that you specify
                        must account for the previously inserted dynamic tabs.)


                        TITLE is the text you want to display as the tab's
                        title. For example: Our Guarantee.


                        CONTENT is any arbitrary HTML, and is displayed when the
                        user clicks on the tab's title.


                        ### Dynamic Tabs HTML Example


                        To create the RIGHT BY YOU tab in the screenshot above,
                        we added this code to our base theme's
                        templates/pages/product.html template:


                        ```

                        <!-- GORUCK Customization: pull in a dynamic tab -->
                          <div class="gr-tab" data-gr-content="/content/tabs/dynamicTab1.html?v=14">
                          </div>
                        ```


                        This tells our code to pull in a file named
                        `dynamicTab1.html`, located in our WebDAV's
                        `/content/tabs/` folder. The querystring is used just to
                        defeat caching.


                        Here are the contents of our `dynamicTab1.html` file:


                        ```

                        <input id="gr-tab-data" type="hidden"
                        data-gr-position="3" data-gr-title="Right By You"/>

                        <div class="container container-small gr-rightbyyou">
                          <div style="display: flex; flex-direction: column">
                            <div style="display: flex">
                              <div>
                                <img style="display: block; width: 100px; max-width: 100px; margin-right: 24px" 
                                src="https://content.goruck.com/2017site/products/free-returns-icon.png" height="auto"/>
                              </div>
                            <div>
                              <h3 style="margin-top: 0">Free &amp; Easy Returns</h3>
                              <p>Don't like it? Send it back for free. Returnable in like-new condition within 30 days and 
                              every order comes with a free return shipping label. Too easy.</p>
                            </div>
                          </div>

                          <div style="display: flex; margin-top: 12px">
                            <div>
                              <img style="display: block; width: 100px; max-width: 100px; margin-right: 24px" 
                              src="https://content.goruck.com/2017site/products/challenge-excellence.png" height="auto"/>
                            </div>

                            <div>
                              <h3 style="margin-top: 0">Challenge Excellence</h3>
                              <p>We have two grades, A and F and A- rounds down. Excellence is the standard and please hold us to it, 
                              we want you to love your gear as much as we do.</p>
                            </div>
                          </div>

                          <div style="display: flex; margin-top: 12px">
                            <div>
                              <img style="display: block; width: 100px; max-width: 100px; margin-right: 24px" 
                              src="https://content.goruck.com/2017site/products/customer-service-icon.png" height="auto"/>
                            </div>
                              <div>
                                <h3 style="margin-top: 0">Do Right By People</h3>
                                <p>Our goal is to run a company our grandfathers would be proud of. And the central tenet 
                                &mdash; an oldie but a goodie &mdash; is that we do whatever it takes to do right by people.
                                Contact us at <a href="https://goruck.zendesk.com/hc/en-us/requests/new" target="_blank">
                                team@goruck.com</a> with any questions and we'll get back to you ASAP.</p>
                              </div>
                            </div>
                          </div>
                        </div>

                        ```


                        ### Dynamic Tabs Javascript 


                        Again, the JavaScript code to implement Dynamic Tabs is
                        invoked in the PageManager class' before method. The
                        Dynamic Tabs code is more complex, and it relies on
                        other classes we wrote to get content from the external
                        server and cache it in the browser.


                        Nevertheless, none of it is rocket science. The three
                        classes involved are 250 lines of code. Interested
                        readers are invited to contact me via the BigCommerce
                        Developers forum for more information about the
                        implementation.

                    - type: text
                      data: >-
                        ## Snippets


                        Snippets are similar to Dynamic Tabs, in that they allow
                        you to use the BigCommerce control panel's HTML editor
                        to provide content, but pull it from a separate file.
                        This allows you to share common content across multiple
                        pages.


                        Also, because the control panel's HTML editor strips out
                        stylesheets, this is a good way to provide page-specific
                        styles for a page.


                        We use snippets at GORUCK to display our sizing charts,
                        as shown below. This makes sense since because we have a
                        handful of charts that need to be shared across many
                        products, so we don't want to copy and paste each chart
                        for every product that needs it.
                    - type: image
                      data: >-
                        //s3.amazonaws.com/user-content.stoplight.io/6116/1539878331668
                      config:
                        centered: true
                        fluid: true
                        bordered: true
                        maxWidth: '650'
                        maxHeight: '350'
                    - type: text
                      data: >+
                        ## Snippets HTML


                        Here is the format of the HTML that needs to placed on
                        each page that uses the snippet:


                        ```

                        <div class="gr-snippet" data-gr-content="CONTENT URL">
                             <em>Loading...</em>
                        </div>

                        ```


                        The external file can contain any arbitrary HTML and
                        CSS, and the styled HTML is displayed in the page
                        location where the `gr-snippet` div is located.


                        ### Snippets JavaScript


                        Like Dropzones and Dynamic Tabs, the Snippets code is
                        invoked in `PageManager`'s `before` method. Snippets
                        adds just another 50 lines of JavaScript code to the
                        theme, also relying on the same code that Dynamic Tabs
                        uses to get the external file and cache it in the
                        browser.

                      header:
                        anchor: dynamic-content_snippets
                    - type: text
                      data: >-
                        ## Recap 


                        At GORUCK, we've developed a number of techniques that
                        allow us to separate our content from our theme. These
                        techniques have proved valuable to us, because they
                        allow us to:


                        * Keep our content development and software development
                        workflows separate.

                        * Reduce modifications to our theme, which simplifies
                        merging updates from our theme provider.

                        * Share content across multiple pages.

                        * Tailor our content based on product category and
                        brand.
                      header:
                        anchor: dynamic-content_recap
        - title: Internationalization/Localization
          route:
            path: /internationalization-and-localization
          data:
            children:
              - title: Localizing Stores
                route:
                  path: /localizing-stores
                data:
                  blocks:
                    - type: html
                      data: <h1>Localizing Stores</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#localizing_localization-touchpoints\">Localization Touchpoints Overview</a></li>\n    <li><a href=\"#localizing_translating-theme-files\">Translating Theme Files via Stencil CLI</a></li>\n    <li><a href=\"#localizing_localizing-checkout\">Localizing Checkout</a></li>\n    <li><a href=\"#localizing_localizing-control-panel\">Localizing Control Panel Content</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >-
                        ## Localization Touchpoints Overview 


                        You can run a BigCommerce store in any single language
                        of your choice. If you want to support multiple
                        languages, we recommend setting up a separate store for
                        each language. To fully localize a store into a
                        language/region other than U.S. English, you will need
                        to customize three areas:


                        Storefront theme pages: Translate static strings. This
                        requires adding translation files for your chosen
                        non-English languages, via Stencil CLI.


                        Checkout: Localizing checkout requires modifications
                        both to theme files (in Stencil CLI) and to settings in
                        the BigCommerce control panel.


                        Outside your theme: Adjust other localization details
                        via the BigCommerce control panel.


                        The following sections provide a linked summary of all
                        the steps involved.
                      header:
                        anchor: localizing_localization-touchpoints
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Translating Theme Files via Stencil CLI


                        The core of localizing a store is to translate content
                        on your theme's page templates into each language that
                        you choose to support. You will need to abstract these
                        templates' literal text strings into `{{lang}}`
                        variables, then provide per-language JSON files that
                        define these variables in corresponding key/value pairs.


                        For details on this process, see this section's
                        remaining pages, starting with [Basis for
                        Internationalization](/stencil-docs/internationalization-and-localization/basis-for-internationalization).
                      header:
                        anchor: localizing_translating-theme-files
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Localizing Checkout


                        Localizing your theme's checkout and order confirmation
                        pages requires specific steps in:

                        * the corresponding templates 

                        * each of your JSON translation files 

                        * and in the BigCommerce control panel


                        **Note:** _To localize your theme's checkout and/or
                        order confirmation page, you must first enable
                        [Optimized One-Page Checkout.]()_


                        For details, please see the following pages:


                        * [Preparing Stencil Themes for Optimized One-Page
                        Checkout]() is a **prerequisite** for the remaining
                        checkout internationalization options below.


                        * [Currency-Conversion Options]() covers displaying
                        prices in alternate currencies.


                        * [Multi-Language Checkout]() covers translating your
                        checkout and/or order confirmation templates.
                      header:
                        anchor: localizing_localizing-checkout
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Localizing Control Panel Content


                        The remaining localization options reside outside your
                        theme and are accessible through the BigCommerce control
                        panel:


                        * [Product Catalog](#product-catalog)

                        * [Currency](#currency)

                        * [Date Format](#date-format)

                        * [Order Statuses](#order-statuses)

                        * [Blog](#blog)

                        * [Static Web Pages](#static-web-pages)

                        * [Transactional Emails](#transactional-emails)

                        * [Gift Certificates](#gift-certificates)


                        **Note:** _The BigCommerce platform does not currently
                        support translation of Transactional Emails or Gift
                        Certificates into languages other than English, so we
                        have rather provided a management best practice for
                        each._


                        ### <div id="product-catalog">Localizing the Product
                        Catalog</div>


                        You must localize the store's product catalog separately
                        from its theme. Each entry within a catalog can be set
                        up in only one language, so you will want to localize a
                        separate version of your catalog for each
                        single-language store.


                        For an overview of populating the store catalog –
                        including options for bulk-importing content that you
                        can localize outside the BigCommerce platform – please
                        see our support article on Adding and Managing Your
                        Product Catalog.


                        ### <div id="currency">Localizing Currency</div>

                        Each store's default currency is configured in the
                        BigCommerce control panel. For details, please see our
                        support article on Changing Your Default Currency.


                        ### <div id="date-format">Localizing Date Format</div>

                        You can set the appropriate date format for your store's
                        language/region in the BigCommerce control panel (under
                        Store Setup > Store Settings > Date & Timezone). For
                        details, please see this support article.


                        ### <div id="order-statuses">Localizing Order
                        Statuses</div>

                        The order-status labels displayed on a BigCommerce
                        storefront are configured outside your theme. You can
                        translate each of these strings via the BigCommerce
                        control panel's Orders > Order Statuses option. For
                        instructions, please see the Customizing an Order Status
                        Label support topic.


                        ### <div id="blog">Localizing the Blog</div>

                        You manage blog entries through the BigCommerce control
                        panel (under Storefront Content > Blog). You are free to
                        add blog content in any language you choose. For
                        details, please see this support article.


                        ### <div id="static-web-pages">Localizing Static Web
                        Pages</div>

                        If you create static pages as Stencil custom templates,
                        you can localize their content just like other theme
                        pages' content. However, if you create custom pages via
                        the BigCommerce control panel (under Storefront Content
                        > Web Pages), you must also enter their localized
                        content via the control panel; for details, please see
                        this support article.


                        ### <div id="transactional-emails">Managing
                        Transactional Emails</div>

                        BigCommerce does not currently provide native support
                        for localizing transactional emails. To fully localize a
                        store into a language other than English, the simplest
                        solution is to disable the sending of BigCommerce native
                        emails. You can access this option from the BigCommerce
                        control panel's left nav in one of two locations
                        (depending on your store's control-panel version):


                        `Storefront Design` > `My Themes` > `Design Options` >
                        `More` (drop-down list) > `Emails`

                        Next, in the Enable column, uncheck the check box for
                        each email type that you want to disable. (These toggles
                        require no confirmation step.) For further details about
                        managing BigCommerce transactional emails, please see
                        this support article.


                        ### <div id="gift-certificates">Managing Gift
                        Certificates</div>

                        The BigCommerce platform does not currently support
                        translation of gift certificates into languages other
                        than English. To fully localize your store, you can
                        choose to disable gift certificates via the BigCommerce
                        control panel.
                      header:
                        anchor: localizing_localizing-control-panel
              - title: Basis for Internationalization
                route:
                  path: /basis-for-internationalization
                data:
                  blocks:
                    - type: html
                      data: <h1>Basis for Internationalization</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#basis_what-translates\">What Does and Doesn't Translate</a></li>\n    <li><a href=\"#basis_required\">Required Subdirectory</a></li>\n    <li><a href=\"#basis_schema\">The Schema</a></li>\n    <li><a href=\"#basis_localization-file\">Localization File Structure</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >-
                        ## What Does and Doesn't Translate


                        The Stencil framework allows you to define multiple
                        translations for each theme based on a predefined
                        schema. Theme developers are not required to localize a
                        theme in order to make it work. BigCommerce does not
                        provide translations for the theme’s content, however,
                        you have the option of localizing your themes for
                        desired target languages, based on the provided schema.


                        * In order for theme translation to occur, you must
                        create a JSON file for each language you choose to
                        support and include key/value pairs for the text
                        blocks/parameters that you choose to translate. The
                        following pages provide details for these steps.


                        * The translated values will be displayed to visitors
                        who have selected the corresponding language in their
                        browser's locale preferences. The Stencil framework
                        automatically detects the Accept-Language request HTTP
                        header from the visitor's browser.


                        * Where a Stencil theme contains no JSON file matching
                        any of the visitor's preferred languages, it will fall
                        back to the values in the default English-language JSON
                        file.


                        * Stencil's multi-language capabilities are currently
                        limited to these particular strings that you specify
                        within the theme. The Stencil framework does not
                        currently translate content rendered from a store's
                        catalog database – for example, products' names.


                        * If you want to fully support multiple languages, we
                        recommend that you set up a separate storefront for each
                        language. This will enable you to thoroughly customize
                        all of your content (including your product catalog) for
                        each target audience.
                      header:
                        anchor: basis_what-translates
                    - type: text
                      data: '---'
                    - type: text
                      data: >
                        ## Required Subdirectory


                        Within each theme, a top level `/lang/` subdirectory is
                        reserved for internationalization. This `.../lang/`
                        subdirectory, with its contained en.json file (which
                        contains English-language defaults), must be present in
                        order for a Stencil theme to function.


                        You can localize a theme by providing other appropriate
                        .json translation files in the `.../lang/` subdirectory.
                        One file is required for each language that you want to
                        support. (These can include non-U.S. versions of
                        English, each with their own spellings.)


                        Within these files, you would define key values
                        corresponding to the text blocks in your theme's
                        templates that you choose to abstract into translatable
                        keys.
                      header:
                        anchor: basis_required
                    - type: text
                      data: '---'
                    - type: text
                      data: "## The Schema\n\nName your translation files based on the <a href=\"https://tools.ietf.org/html/bcp47\">BCP47 specification</a> of language and region codes. For a summary of how these codes are designed, see the World Wide Web Consortium’s <a href=\"http://www.w3.org/International/articles/language-tags/\">overview</a>.<br>\n\n <br>\n\nYou can find a list of code subtags in the <a href=\"http://www.iana.org/assignments/language-subtag-registry\">IANA Language Subtag Registry</a>. These subtags are primitives that you can combine to create file names’ prefixes for individual regions. Here are some examples:\n\n<table>\n\t\t<tr>\n    <th>Localization file name</th>\n    <th>Corresponding regional language variant</th>\n    <th>Subtags used</th>\n  </tr>\n  <tr>\n    <td>en.json</td>\n    <td>English (default file)</td>\n    <td>en (English)</td>\n  </tr>\n  <tr>\n    <td>en-US.json</td>\n    <td>American English</td>\n    <td>en (English) + US (United States)</td>\n  </tr>\n  <tr>\n    <td>en-AU.json</td>\n    <td>Australian English</td>\n    <td>en (English) + AU (Australia)</td>\n  </tr>\n  <tr>\n    <td>fr.json</td>\n    <td>French</td>\n    <td>en (French)</td>\n  </tr>\n  <tr>\n    <td class=\"\">fr-CA.json</td>\n    <td class=\"\">Canadian French</td>\n    <td class=\"\">fr (French) + CA (Canada)</td>\n  </tr>\n</table>\n\n\nFor more examples of frequently-used codes, see the following linked table’s \"LCID string\" (middle) column: <a href=\"http://www.science.co.il/Language/Locale-codes.asp\">http://www.science.co.il/Language/Locale-codes.asp</a>."
                      header:
                        anchor: basis_schema
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Localization File Structure


                        The `.json` translation files have a straightforward
                        structure of key-value pairs. Here is an example, from
                        Stencil’s default `en.json` file:


                        `"welcome_back": "Welcome back, {name}"`


                        Above, `"welcome_back"` is an arbitrary key name for a
                        welcome message. The string `"Welcome back, {name}"` is
                        its assigned value for English-language stores.


                        If you design your theme’s storefront pages to refer to
                        this message by its generic key name `"welcome_back"`,
                        they can pass its localized value in other languages, as
                        that value is defined in each language’s `.json` file.

                        Key-value pairs are grouped into objects, as you can see
                        in this longer example:


                        ```

                        {
                           "header": {
                            "welcome_back": "Welcome back, {name}"
                           },
                           "prelaunch": {
                            "coming_soon": "Coming Soon",
                            "intro": "This store will be launching shortly. Please visit again!"
                           },
                           "cart": {
                            "items": "{NUM, plural, =0{(0 items)} one {(# item)} other {(# items)}}",
                            "label": "Cart",
                            "is_empty": "Your cart is empty",
                             "coupon_code": "Coupon Code",
                            "gift_certificate": "Gift Certificate",
                            "freeshipping": "Free Shipping",
                            "shipping_peritem": "Per Item Shipping",
                            "shipping_estimator": {
                                "add_info": "Add Info",
                                "select_a_country": "Select a Country",
                                "select_a_state": "Select a State",
                                "estimate_shipping": "Estimate Shipping"
                            }
                           },
                        }

                        ```
                      header:
                        anchor: basis_localization-file
              - title: Invoking Translation Keys
                route:
                  path: /invoking-translation-keys
                data:
                  blocks:
                    - type: html
                      data: <h1>Invoking Translation Keys</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#invoking_translation\">Translation Syntax</a></li>\n    <li><a href=\"#invoking_video\">Video Demo</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >-
                        ## Translation Syntax


                        Once keys and values are defined in the appropriate
                        .json translation files, you invoke dynamic translation
                        strings using the Stencil framework’s `{{lang}}` custom
                        Handlebars helper. Your invocation would follow this
                        generic format:


                        `{{lang "translation.key"
                        optionalVariable=”someValue”}}`


                        Here is how this works. In a non-internationalized
                        theme, a storefront page might include a static/dynamic
                        string like this:


                        `<a href="{{ urls.account }}">Welcome Back <span>{{
                        customer.name }}</span></a>`


                        The corresponding internationalized version – ready to
                        work with any language – would substitute the fully
                        dynamic `{{ lang... }}` Handlebars helper shown below:


                        `<a href="{{ urls.account }}">{{ lang
                        "header.welcome_back" name=customer.name }}</a>`
                      header:
                        anchor: invoking_translation
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Video Demo


                        Watch a video demonstration of how JSON translation
                        files' key/value pairs interact with your templates'
                        Handlebars statements to localize your storefront
                        pages: 


                        <iframe width="560" height="315"
                        src="https://www.youtube.com/embed/ygiRGfSrmnA"
                        frameborder="0" allow="autoplay; encrypted-media"
                        allowfullscreen></iframe>
                      header:
                        anchor: invoking_video
                    - type: callout
                      data:
                        body: >-
                          Be sure to set permission 644 (rw-r–r–) on any new
                          translation files that you add. Without these
                          permissions, running your theme locally will fail,
                          with multiple error messages. Bundling your theme will
                          also fail, blocking its upload to a store.
                        type: warning
                        title: File Permissions Required
              - title: Features Supported
                route:
                  path: /features-supported
                data:
                  blocks:
                    - type: html
                      data: <h1>Features Supported</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#implementation_automatic-language-detection\">Automatic Language Detection</a></li>\n    <li><a href=\"#implementation_cascading-translations\">Cascading Translations</a></li>\n\t\t<li><a href=\"#implementation_nested-plurality\">Nested Plurality and Gender Support</a></li>\n\n\t</ul>\n</div>"
                    - type: text
                      data: >-
                        ## Automatic Language Detection


                        The Stencil framework can automatically detect a
                        localized language, based on the active shopper’s
                        `"Accept‑Language"` header.
                      header:
                        anchor: implementation_automatic-language-detection
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Cascading Translations


                        Cascading works as follows: Assume that a
                        Quebec/French-Canadian customer visits a storefront
                        built with both `fr.json` and `fr‑CA.json` localization
                        files. The framework places the `fr‑CA` locale "on top
                        of" the base `fr locale`. Therefore, any strings missing
                        from the `fr‑CA.json` file will “fall back” to
                        definitions in the base `fr.json file`, providing at
                        least approximate translations. This cascading works
                        generally across languages and locales.
                      header:
                        anchor: implementation_cascading-translations
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Nested Plurality and Gender Support

                        The framework allows you to code conditional plurality
                        for strings within each translation file. For example,
                        your code within an English-language file could overload
                        a single message to display in each of the following
                        forms – depending on the actual value of its two numeric
                        variables:


                        * "There are 3 items in 2 categories"

                        * "There is 1 item in 2 categories"

                        * "There are 2 items in 1 category"


                        Here is the markup that would handle the first three
                        words in each example above, assuming appropriate
                        parameters were inserted in the translation files:


                        ```

                        <h2 class="modal-header-title">
                           {{lang 'cart.added_to_cart.what_next' num_products=cart.quantity}} [...]
                        </h2>

                        ```


                        Similarly, the framework supports per-language
                        conditional coding of appropriate genders for pronouns
                        and nouns.
                      header:
                        anchor: implementation_nested-plurality
              - title: Implementation Example
                route:
                  path: /implementation-example
                data:
                  blocks:
                    - type: html
                      data: <h1>Implementation Example</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#implementation_cornerstone-example\">Cornerstone Implementation Example</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >-
                        ## Cornerstone Implementation Example


                        Here is an example based on this file within
                        Cornerstone:

                        `cornerstone/templates/components/cart/shipping-estimator.html`


                        In the excerpt below, each highlighted `{{lang...}}`
                        statement is a Handlebars helper. Each of the statements
                        abstracts the message indicated by its
                        (English-language) key name to enable
                        internationalization of that message:


                        ```

                        <div class="shipping-estimator" style="display: none;">
                            <form class="estimator-form">
                              <button class="shipping-estimate-hide">{{lang 'cancel'}}</button>
                              <select name="shipping-country">
                              <option>{{lang 'cart.shipping_estimator.select_a_country'}}</option>
                              {{#each countries}}
                                  <option value="{{id}}" {{#if selected}}selected="selected"{{/if}}>
                                        {{name}}
                                  </option>
                              {{/each}}
                              </select>
                              <select name="shipping-state">
                              <option>{{lang 'cart.shipping_estimator.select_a_state'}}</option>
                              {{#each states}}
                                  <option value="{{id}}" {{#if selected}}selected="selected"{{/if}}>
                                      {{name}}
                                  </option>
                              {{/each}}
                              </select>
                              <input type="text" name="shipping-zip" value="{{selected_zip}}">
                              <button class="shipping-estimate-submit">{{lang 'cart.shipping_estimator.estimate_shipping'}}
                              </button>
                            </form>
                            <div class="shipping-quotes"></div>
                        </div>


                        ```



                        In the excerpts below, you can see that the default
                        theme’s basic `.../lang/en.json` file includes matches,
                        and value definitions, for each of the translation keys
                        in the Handlebars helpers above:



                        ```

                        {
                          "header": {
                                "welcome_back": "Welcome back, {name}"
                          },
                          ...
                              "label": "Cart",
                                "is_empty": "Your cart is empty",
                                "coupon_code": "Coupon Code",
                                "gift_certificate": "Gift Certificate",
                                "freeshipping": "Free Shipping",
                                "shipping_peritem": "Per Item Shipping",
                              "shipping_estimator": {
                                    "add_info": "Add Info",
                                  "select_a_country": "Select a Country",
                                  "select_a_state": "Select a State",
                                  "estimate_shipping": "Estimate Shipping"
                              }
                          },
                          "common": {
                                "currency_converter": "Currency Converter",
                                "newsletter_signup": "Sign up for our newsletter",
                                "form_submit": "Submit",
                                "required": "Required",
                                "email_address": "Email Address",
                              "edit": "Edit",
                              "no": "No",
                              "yes": "Yes",
                              "cancel": "Cancel",
                              "share": "Share",
                              "delete": "Delete",
                              "public": "Public",
                                "private": "Private",
                                "view_all": "View All",
                                "paginator": {
                                    "page_of": "Page {current} of {total}"
                              },
                              ...
                        ```



                        Translation files for other languages would use the same
                        format, to define these keys’ values in their respective
                        languages.
                      header:
                        anchor: '#implementation_cornerstone-example'
        - title: Prepare & Upload a Theme
          route:
            path: /prepare-and-upload-a-theme
          data:
            children:
              - title: Checking a Theme's Size
                route:
                  path: /checking-a-themes-size
                data:
                  blocks:
                    - type: html
                      data: <h1>Checking a Theme's Size</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#checking_checking\">Checking a Theme's Size</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >-
                        ## Checking a Theme's Size


                        Your theme should ideally bundle into an archive of only
                        a few megabytes. BigCommerce imposes a hard limit of 50
                        MB, but most themes do not approach this limit unless
                        they include many large static assets.


                        If your theme is unlikely to exceed 50 MB, you can skip
                        past jump directly to Bundling and Uploading a Theme.


                        A few themes, however, might exceed the 50 MB limit. In
                        these cases, you can either Shrink Your Theme with the
                        help of WebDAV or Stage Your Theme for CDN Delivery to
                        restructure your theme to a size that's manageable for
                        upload to BigCommerce.
                      header:
                        anchor: checking_checking
              - title: 'Shrinking A Theme '
                route:
                  path: /shrinking-your-theme
                data:
                  blocks:
                    - type: html
                      data: >-
                        <h1>Shrinking a Theme by Excluding Static Assets Using
                        WebDAV</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#shrinking_restructuring\">Restructuring a Theme</a></li>\n    <li><a href=\"#shrinking_webdav-folders\">WebDAV Folders and Stencil Themes</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >
                        ## Restructuring Your Theme


                        In this section, you will first isolate static assets
                        from your theme's local directory, then use WebDAV to
                        cloud-host those assets, and finally reference those
                        assets using Stencil's cdn Handlebars helper.

                        For an existing theme, make a backup of your whole
                        <theme‑name> directory before proceeding.


                        Examine your theme's `/assets/` subdirectory and/or its
                        intended contents. Check for large static assets like
                        images (especially in `/assets/img/`) and videos that
                        are likely culprits in causing a bundled `.zip` file to
                        go toward or beyond BigCommerce's 50 MB limit.


                        Use WebDAV to upload these items to WebDAV's remote
                        `/content/` directory. For WebDAV specifics, please see
                        BigCommerce's Knowledge Base articles on:

                        * [Connecting to WebDav]()

                        * [WebDAV Folder Structure]()


                        Throughout your theme, reference each of these assets
                        using Stencil's `cdn` custom Handlebars helper –
                        prepending the `webdav:` option to the `assetPath`
                        parameter.


                        Prepending `webdav:` will build a URL in the remote
                        WebDAV directory. This allows your theme's deployed
                        topology to diverge from any your local directory
                        structure. As noted above, the `cdn` helper will treat
                        `/content/` as the default/root WebDAV directory. So,
                        for example, this statement:


                        `<img src="{{cdn "webdav:img/image.jpg"}}">`


                        will build the URL transformed below:


                        `<img
                        src="https://cdn.bcapp/3dsf74g/content/img/image.jpg">`


                        On your local machine, move the large static assets to a
                        location where the `stencil bundle` command will ignore
                        them.

                        This can be a location outside your `<theme-name>`
                        directory, or it can be the `<theme-name>/assets/cdn/
                        subdirectory`, which stencil bundle excludes from
                        bundling. Separating these assets is necessary to
                        exclude them from the next step.


                        Run or re-run the `stencil bundle` command, from inside
                        your streamlined `<theme‑name>` directory.

                        Once your resulting `.zip` file is 50 MB or smaller,
                        upload it to BigCommerce, as described [here]().
                      header:
                        anchor: shrinking_restructuring
                    - type: callout
                      data:
                        type: warning
                        body: >-
                          Both in production and locally, subdirectories of your
                          theme's `assets/` directory – like `img/`,` js/`, and
                          `fonts/` – are parallel to its `scss/` subdirectory.
                          So within your CSS, path references to such assets
                          should reflect this parallel relationship – for
                          example: `../img/test.jpg`.
                        title: URL References to Assets
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## WebDAV Folders and Stencil Themes


                        If you have used WebDAV in developing BigCommerce's
                        earlier (Blueprint) generation of themes, you will see
                        some differences when uploading Stencil themes.<br><br>


                        The directories accessible through WebDAV will
                        dynamically change, depending on the type of theme that
                        is active in the merchant's store, as follows:<p></p>


                        <table>
                          <tr>
                            <td><b>Available while the merchant's active theme is Blueprint:</b></td>
                            <td class=""><b>Available while the merchant's active
                              theme is Stencil:</b></td>
                          </tr>
                          <tr>
                            <td>/content/</td>
                            <td>/content/</td>
                          </tr>
                          <tr>
                            <td>/product_images/</td>
                            <td>/product_images/</td>
                          </tr>
                          <tr>
                            <td>/product_downloads/</td>
                            <td>/product_downloads/</td>
                          </tr>
                          <tr>
                            <td>/import_files/</td>
                            <td>/import_files/</td>
                          </tr>
                          <tr>
                            <td>/exports/</td>
                            <td>/exports/</td>
                          </tr>
                          <tr>
                            <td>/template/</td>
                            <td>-</td>
                          </tr>
                          <tr>
                            <td>/mobile_template/</td>
                            <td>-</td>
                          </tr>
                         </table>

                        <i>The overall difference is that the WebDAV
                        `/template/` and `/mobile_template/` directories are
                        <b>not</b> available for Stencil themes. These templates
                        must reside and remain within your Stencil theme's local
                        directory and file structure.</i>
                      header:
                        anchor: shrinking_webdav-folders
              - title: Staging A Theme for CDN Delivery
                route:
                  path: /staging-a-theme
                data:
                  blocks:
                    - type: html
                      data: <h1>Staging A Theme for CDN Delivery</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#staging_sizing-your-theme\">Organizing Your Theme</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >-
                        ## Organizing Your Theme


                        For themes that would otherwise exceed BigCommerce's 50
                        MB limit on uploads, delivering your theme's large
                        static assets via a CDN (content delivery network) is an
                        alternative to the simpler WebDAV approach.


                        The advantage of this alternative is that all assets
                        stay within your theme's directory, so your theme's
                        local structure matches its deployed structure. The
                        disadvantage is that the procedure outlined below
                        requires the expense of a CDN.


                        To stage your theme for CDN delivery, you would locally
                        store your large static assets within your theme's

                        `<theme-name>/assets/cdn/` subdirectory. By design, the
                        `stencil bundle` command omits this subdirectory's
                        contents. So those contents do not count against the 50
                        MB limit on the resulting `.zip` file.


                        Then, as you develop your theme, reference each of these
                        assets using Stencil's `cdn` custom Handlebars helper,
                        like below:


                        `<img src="{{cdn "webdav:img/image.jpg"}}">`


                        **Note:** _The presumed WebDAV root directory is
                        /content/. (So, in this example, the `image.jpg` file
                        had been uploaded to the WebDAV `/content/` directory.)
                        The presumed local directory is `<theme-name>/assets/`,
                        so you can omit that path when referencing its contained
                        files or subdirectories._


                        When you are ready to upload your theme to BigCommerce,
                        follow the procedure in [Bundling and Submitting a
                        Theme](/stencil-docs/shipping-a-theme/bundling-and-submitting).
                      header:
                        anchor: staging_sizing-your-theme
              - title: Bundling and Uploading a Theme
                route:
                  path: /bundling-and-uploading
                data:
                  blocks:
                    - type: html
                      data: <h1>Bundling and Uploading a Theme</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#bundling_confirm-dependencies\">Confirm Dependencies</a></li>\n    <li><a href=\"#bundling_verify-directory\">Verify Directory and File Permissions</a></li>\n    <li><a href=\"#bundling_bundling-your-theme\">Bundling Your Theme</a></li>\n    <li><a href=\"#bundling_uploading-your-theme\">Uploading Your Theme</a></li>\n    <li><a href=\"#bundling_other-bundling\">Other Bundling or Upload Errors</a></li>\n\t</ul>\n</div>\n\n\n\n\n\n\n\n\n"
                    - type: text
                      data: >-
                        ## Confirm Dependencies


                        If you have customized a theme originally downloaded
                        from the BigCommerce Theme Marketplace: Before you
                        package your theme, make sure your theme directory
                        includes all the dependencies that BigCommerce requires
                        for submission. 


                        Follow the link for your scenario:


                        If you downloaded a refreshed version of Stencil's
                        default Cornerstone theme: Run `npm install` in the
                        theme directory to install refreshed JavaScript
                        dependencies, as outlined in [Installing
                        Stencil](/stencil-docs/getting-started/installing-stencil#installing_installing-stencils-js-utilities).


                        If you downloaded a different Marketplace theme, and its
                        [version was lower than 1.10.0]():

                        You must also run `jspm install` in the theme directory.
                      header:
                        anchor: bundling_confirm-dependencies
                    - type: callout
                      data:
                        body: >-
                          The `stencil bundle` and `stencil push` commands do
                          not check for the dependencies that these build
                          systems install. So if those dependencies are missing,
                          these commands will not immediately report errors.
                          However, your resulting .zip file will not properly
                          upload to BigCommerce, and will not run properly on a
                          storefront.
                        title: No Automatic Check for Dependencies
                        type: warning
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Verify Directory and File Permissions


                        If you have added any new subdirectories or files to
                        your base theme, verify that you have:


                        Set newly added directories to permission `755`
                        (`drwxr-xr-x`).

                        Set newly added files to permission `644` (`rw-r--r--`).
                      header:
                        anchor: bundling_verify-directory
                    - type: callout
                      data:
                        body: >-
                          Without these permissions, bundling your theme will
                          fail, blocking its upload to BigCommerce.
                        title: Writable Permissions Are Required
                        type: warning
                    - type: text
                      data: '---'
                    - type: text
                      data: >
                        ## Bundling Your Theme


                        Once you have verified the requirements above, you are
                        ready to process and package your theme for upload to
                        BigCommerce. Stencil CLI provides two options for
                        creating a `.zip` file that contains all of your theme's
                        essentials, while excluding redundant components. The
                        options are either only bundling your theme, or bundling
                        and pushing your theme. These options are available
                        depending on how you've
                        [authorized](/stencil-docs/getting-started/launching-stencil/authorizing-and-initializing)
                        your theme:


                        ### Bundle Only 


                        The `stencil bundle` command is available for all
                        themes, whether they were initialized using OAuth or
                        Basic-Auth tokens. To use it, just enter the following
                        on your command line:


                        `stencil bundle`


                        The `bundle` command will notify you of its progress and
                        completion.



                        ####  Check/Adjust Zipfile's Size


                        Check the resulting `.zip` file's size before you
                        proceed. The zipped bundle should be only a few
                        megabytes. BigCommerce imposes a hard limit of 50 MB,
                        and any file size approaching that is problematic. If
                        your `.zip` file fits comfortably within the size limit
                        above, jump directly to [Uploading Your
                        Theme](bundling_uploading-your-theme). However, if your
                        `.zip` file approaches or exceeds 50 MB, you must first
                        use one of these procedures to restructure your theme to
                        a size that's manageable for upload to BigCommerce:


                        * [Shrinking Your Theme by Excluding Static Assets
                        (WebDAV)]()

                        * [Staging a Theme for CDN Delivery]()



                        ### Bundle and Push 


                        The `stencil push` command is available only for themes
                        that you have successfully initialized using an OAuth
                        token (with `Themes:modify scope`). This command bundles
                        your theme and uploads it to the associated store, in
                        one continuous process.


                        For further requirements and usage details, please see
                        the _Command-Line Upload_ in [Uploading Your
                        Theme](bundling_uploading-your-theme) below.


                        For file-size error diagnostics and workarounds, please
                        _Check/Adjust Zipfile's Size_ above.


                        ### Software Requirements / Resolving Lint Errors


                        * Only use the `stencil bundle` or the `stencil push`
                        command to process and package themes for submission.
                        These commands generate `.zip` files that match
                        BigCommerce's expected structure. They also generate
                        metadata required for your theme to function properly.


                        * Do not create `.zip` files using general-purpose
                        archiving software. The resulting files will trigger
                        errors upon upload to BigCommerce.


                        * Do not open a bundled theme `.zip` file to add,
                        delete, rename, or update files. Doing so will make your
                        theme unusable on the production store.


                        * If bundling your theme triggers multiple lint errors
                        related to the `bundle.js` file, then your theme is
                        missing the `.eslintignore` file. Please retrieve this
                        file from the [Stencil Cornerstone
                        repo](https://github.com/bigcommerce/cornerstone/blob/master/.eslintignore),
                        then re-run `stencil bundle` or `stencil push`.
                      header:
                        anchor: bundling_bundling-your-theme
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Uploading Your Theme


                        BigCommerce provides two alternatives for uploading a
                        theme to its associated BigCommerce store. You can
                        perform either a Control Panel Upload, or a Command Line
                        Upload. These options are available depending on how
                        you've authorized your theme:


                        ### Control-Panel Upload (OAuth or Basic Auth)


                        Uploading your theme via the BigCommerce control panel's
                        GUI is compatible with any store token (whether OAuth or
                        Basic-Auth), and with any OAuth token scope, and with
                        all versions of Stencil CLI. However, this option
                        requires that you first use stencil bundle to package
                        your theme into a .zip file. (Prepare your file
                        according to Bundle Only above.)


                        For the upload steps in the control panel, see the
                        [Uploading Custom Themes]() article in our Knowledge
                        Base. 


                        For error codes that you might encounter when uploading
                        a theme – and corresponding workarounds, see
                        [Troubleshooting Theme Uploads]().


                        ### Command-Line Upload (OAuth Required)


                        The stencil push command allows you to both bundle your
                        theme and upload it to the store, with a single terminal
                        command. To run stencil push, you must first:


                        Successfully initialize your theme using an OAuth token
                        that was created with the Themes:modify scope.

                        Install Stencil CLI version 1.12.0 or higher.


                        To check your current Stencil CLI version, enter
                        `stencil --version` or `stencil -V` on the command line.
                        If you need to update an earlier version, reinstall
                        Stencil CLI.


                        ### Pushing a Theme Upload


                        To initiate bundling and upload, enter the following on
                        the command line:


                        `stencil push`


                        Stencil CLI is designed to display the same
                        notifications, prompts, and selection options that you
                        would receive when using the control panel's GUI. Below
                        are some of the notifications and interactions you might
                        see.


                        ### Successful Bundling


                        Stencil CLI will display `ok` confirmations, or `not ok`
                        errors, or `warnings` for individual substeps in
                        bundling and uploading your theme. If bundling is
                        successful, you will next see a `Processing` progress
                        bar to track the upload.
                      header:
                        anchor: bundling_uploading-your-theme
                    - type: image
                      data: >-
                        //s3.amazonaws.com/user-content.stoplight.io/6116/1539055887301
                    - type: text
                      data: >-
                        ### Successful Upload


                        Upon a successful upload, you will be prompted: `Would
                        you like to apply your theme to your store at
                        <storehash>? (y/N)` Any response except `y` or `Y` will
                        be processed as "No." You can always apply the theme
                        later through the control panel.


                        ### Apply Which Variation?


                        If you chose to apply the newly uploaded theme, you will
                        be prompted: `Which variation would you like to apply?
                        (Use arrow keys)`
                    - type: image
                      data: >-
                        //s3.amazonaws.com/user-content.stoplight.io/6116/1539055910721
                    - type: text
                      data: >-
                        Use your arrow keys to move the selection
                        caret/highlight to the variation you want, and then
                        press `Enter`.


                        Stencil CLI will then confirm which variation is active
                        on the storefront.
                    - type: image
                      data: >-
                        //s3.amazonaws.com/user-content.stoplight.io/6116/1539055915081
                    - type: text
                      data: '---'
                    - type: text
                      data: >+
                        ## Theme Quota Warning


                        If you run `stencil push` when your store's `My Themes`
                        section has reached its [maximum of 20 themes](), you
                        will be prompted to select at least one existing theme
                        for deletion.

                      header:
                        anchor: bunding_theme-quota
                    - type: image
                      data: >-
                        //s3.amazonaws.com/user-content.stoplight.io/6116/1539055988142
                    - type: text
                      data: >+
                        Custom themes – which are available for selection – will
                        have a circle to their left. Marketplace themes and the
                        store's active theme – all of which are protected from
                        deletion – will be flagged `(Disabled)`.


                        Use your arrow keys to move the selection caret to each
                        theme/version that you want to select. Then press the
                        spacebar to select it. (Filled circles will indicate
                        your selected themes/versions.)


                        If you are certain of your selections, you can next
                        press `Enter` to delete the themes.

                    - type: callout
                      data:
                        body: >-
                          Once you press `Enter`, the selected themes will be
                          deleted immediately, with no further confirmation.


                          If you have any doubts – especially about deleting
                          multiple themes/versions – it is safest to delete them
                          through the control panel GUI. This GUI allows you to
                          compare uploaded versions, and to inspect their
                          metadata.
                        title: ' Select Carefully – No Confirmation'
                        type: error
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Other Bundling or Upload Errors


                        For any other `not ok` bundling or upload errors that
                        you receive, please refer to these debugging guidelines
                        Theme setup and sizing diagnostics in preceding sections
                        throughout this page, or the following article titled
                        [Troubleshooting Theme Uploads]().
                      header:
                        anchor: bundling_other-bundling
              - title: Adding ReCAPTCHA V2
                route:
                  path: /adding-recaptcha-v2
                data:
                  blocks:
                    - type: html
                      data: <h1>Adding ReCAPTCHA V2</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#adding-recaptcha_better-spam-deterrence\">Better Spam Deterrence</a></li>\n    <li><a href=\"#adding-recaptcha_themes\">Themes that Already Incorporate reCAPTCHA V2</a></li>\n    <li><a href=\"#adding-recaptcha_how-to-upgrade\">How to Upgrade</a></li>\n\t</ul>\n</div>\n\n\n\n\n"
                    - type: text
                      data: >-
                        ## Better Spam Deterrence


                        reCAPTCHA v1 was deprecated as of March 31, 2018.

                        To deter spam submission through storefront forms,
                        BigCommerce now supports Google reCAPTCHA v2 challenges,
                        to distinguish human customers/visitors from automated
                        bots. We recommend that all storefront themes take
                        advantage of this upgraded bot detection.
                      header:
                        anchor: adding-recaptcha_better-spam-deterrence
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Themes that Already Incorporate reCAPTCHA V2


                        If you have based your theme on a theme/version that
                        already incorporates reCAPTCHA v2, you do not need to
                        take any further action. Compliant themes/versions
                        currently include:


                        * Cornerstone 1.6.1 or higher

                        * 22 Savile Row (all versions)

                        * Arcade 1.13.0 or higher

                        * Atelier 1.10.1 or higher

                        * Bazaar 1.0.1 or higher

                        * Capacity 1.12.0 or higher

                        * Chelsea 1.12.0 or higher

                        * Diamond 1.0.5 or higher

                        * Exhibit 1.10.4 or higher

                        * Flagship 1.10.6 or higher

                        * Fortune 1.12.1 or higher

                        * Foundry 1.10.1 or higher

                        * Geneva 1.10.1 or higher

                        * Hero 1.11.1 or higher

                        * Lookbook 1.10.3 or higher

                        * Merchant 1.12.0 or higher

                        * Mogul 1.0.7 or higher

                        * Parts Warehouse (all versions)

                        * Peak 1.11.4 or higher

                        * Prosper 1.10.2 or higher

                        * Queen 1.0.3 or higher

                        * Runway 1.11.2 or higher

                        * Scales 1.0.2 or higher

                        * Showroom 1.12.0 or higher

                        * Soho 1.11.1 or higher

                        * Solo 1.10.3 or higher

                        * Spotlight 1.11.0 or higher

                        * Supermarket (all versions)

                        * Touch 1.0.1 or higher

                        * Venture 1.11.4 or higher


                        However, if your theme is built on an earlier version of
                        these themes, or on a different base theme, follow the
                        updating instructions in How to Upgrade below.
                      header:
                        anchor: adding-recaptcha_themes
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## How to Upgrade


                        To add reCAPTCHA v2 support to a theme, you will need to
                        update script references in three template files:


                        * [Create-Account
                        Template](https://github.com/bigcommerce/cornerstone/pull/951/files#diff-ecbae6e2b7d5bbf5c950d68878e79d99)

                        * [Write-Review
                        Template](https://github.com/bigcommerce/cornerstone/pull/951/files#diff-945a5d7f1563068188ae39df568cfd43)

                        * [Contact-Us
                        Template](https://github.com/bigcommerce/cornerstone/pull/951/files#diff-5351402159301e1c225752f03d9f1f8e)


                        See [PR #951 on the Cornerstone Github
                        Repository](https://github.com/bigcommerce/cornerstone/pull/951/files)
                        to see differential for each of the files that need to
                        be modified and how.
                      header:
                        anchor: adding-recaptcha_how-to-upgrade
              - title: Troubleshooting Theme Uploads
                route:
                  path: /troubleshooting-theme-uploads
                data:
                  blocks:
                    - type: html
                      data: <h1>Troubleshooting Theme Uploads</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#troubleshooting-theme-uploads_restrictions\">Restrictions</a></li>\n    <li><a href=\"#troubleshooting-theme-uploads_error-codes\">Error Codes</a></li>\n    <li><a href=\"#troubleshooting-theme-uploads_warnings\">Warnings</a></li>\n    <li><a href=\"#troubleshooting-theme-uploads_workarounds\">Workarounds and Further Info</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >-
                        ## Restrictions


                        Custom theme uploads must meet these restrictions:


                        * You may upload a maximum of 20 custom themes at a time
                        to the control panel's `Store Design` > `My Themes`
                        section.


                        * If you reach this maximum, you can delete custom
                        themes to make room for more uploads.


                        * Before uploading, you must package custom themes into
                        a Stencil-specific `.zip` file format, using Stencil
                        CLI's `stencil bundle` command.


                        * A theme's `.zip` file must be no larger than 50 MB. If
                        your file exceeds that size, please use either a WebDAV
                        or a CDN upload to exclude large static assets.
                      header:
                        anchor: troubleshooting-theme-uploads_restrictions
                    - type: text
                      data: |
                        ## Error Codes

                        <table>
                          <tr>
                            <th>Error Code</th>
                            <th>Meaning</th>
                          </tr>
                          <tr>
                            <td>TR-100, -101, -700, -1200, -1300</td>
                            <td>A server error occurred.</td>
                          </tr>
                          <tr>
                            <td>TR-200</td>
                            <td>Problem uploading the theme.</td>
                          </tr>
                          <tr>
                            <td>TR-300</td>
                            <td>Invalid .zip file. (Among other possible root causes, this can indicate an included <code>bundle.js.map</code> source-map file that exceeds its size limit of 5 MB. As a workaround, move this file outside your theme directory before re-running <code>stencil bundle</code>).</td>
                          </tr>
                          <tr>
                            <td>TR-301</td>
                            <td>Failed to unzip file.</td>
                          </tr>
                          <tr>
                            <td>TR-400</td>
                            <td>The .zip contains restricted/invalid file(s) - e.g., a file with an invalid extension.</td>
                          </tr>
                          <tr>
                            <td>TR-500</td>
                            <td>The .zip file is larger than the 50MB limit.</td>
                          </tr>
                          <tr>
                            <td>TR-600</td>
                            <td>The .zip file is missing a required file (<code>theme-name/templates/pages/home.html</code>).</td>
                          </tr>
                          <tr>
                            <td>TR-601</td>
                            <td>The .zip file is missing some parsed template file(s); or, one or more non-<code>.html</code> files are present in the <code>theme-name/templates/</code></nobr> subdirectory.</td>
                          </tr>
                          <tr>
                            <td>TR-800</td>
                            <td>There was a problem processing the contained config.json file. <b>Please check the config.json documentation for required keys and for keys that require values.</b></td>
                          </tr>
                          <tr>
                            <td>TR-900</td>
                            <td>The contained config.json file is missing required developer information.</td>
                          </tr>
                          <tr>
                            <td>TR-901</td>
                            <td>A theme variation defined in the contained config.json file is missing its required external ID.</td>
                          </tr>
                          <tr>
                            <td>TR-902</td>
                            <td>Two or more theme variations defined in the contained config.json file share a external ID. All external IDs must be unique.</td>
                          </tr>
                          <tr>
                            <td>TR-1000</td>
                            <td>There was a problem processing the contained <a href="/docs/schemajson-metadata-for-theme-editor">schema.json</a> file.</td>
                          </tr>
                          <tr>
                            <td>TR-1001</td>
                            <td>The theme is missing its required <a href="/docs/schemajson-metadata-for-theme-editor">schema.json</a> file.</td>
                          </tr>
                          <tr>
                            <td class="">TR-1400</td>
                            <td class="">There was a problem processing template <a href="/docs/using-yaml-front-matter">front matter</a>.</td>
                          </tr>
                          <tr>
                            <td>TR-1401</td>
                            <td>There was a database validation error when saving <a href="/docs/using-yaml-front-matter">front matter</a> to the database.</td>
                          </tr>
                          <tr>
                            <td>TR-1500</td>
                            <td>There was a problem uploading your files, due to multi-threading (multiple simultaneous uploads). Please try again.</td>
                          </tr>
                          <tr>
                            <td>TR-1600</td>
                            <td>There was a temporary problem on our system. Please try again.</td>
                          </tr>
                          <tr>
                            <td>TR-1601</td>
                            <td>There was a problem processing screenshots.</td>
                          </tr>
                          <tr>
                            <td>TR-1700, -1800, -1801, -1802, -1803</td>
                            <td>System error, possibly temporary. Please try again.</td>
                          </tr>
                          <tr>
                            <td>TR-3402</td>
                            <td>You are not allowed to edit your active theme. [Please select <code>Make a Copy</code>, then edit the resulting copy of your theme.]</td>
                          </tr>
                          <tr>
                            <td>TR-4400</td>
                            <td>One or more values in the <code>config.json</code> file exceed the 64-character limit. (Can also indicate string lengths that exceed their limits in other JSON files.)</td>
                          </tr>
                         </table>
                      header:
                        anchor: troubleshooting-theme-uploads_error-codes
                    - type: text
                      data: >-
                        ## Warnings


                        Warnings will not block a theme's upload, but these
                        onscreen and/or log messages notify you of problems
                        within the zipped theme. Here are the warnings and their
                        meanings:


                        | Warning |

                        |---|

                        | (These messages do not have numeric codes) |

                        | Issue in processing this theme's thumbnail screenshot
                        (`composed_image`). |

                        | Issue in processing this theme's full-size screenshot
                        (`desktop_screenshot`). |

                        | Issue in processing this theme's mobile
                        [screenshot](/docs/configjson-reference#config-var-meta)
                        (`mobile_screenshot`). |

                        | Missing file: This theme does not support Theme
                        Editor, as it is missing its required `[schema.json]`
                        file. |

                        | One or more of this theme's screenshots are not image
                        files. |

                        | Theme is missing a valid thumbnail image
                        `composed_image`). |

                        | Theme is missing a valid full-size image
                        `desktop_screenshot`). |

                        | Theme is missing a valid mobile image
                        (`mobile_screenshot`). |

                        | One or more of this theme's images is not of a
                        supported file type. Valid filetypes are: `.jpg`,
                        `.jpeg`, `.png`, `.gif`. |

                        | Thumbnail (`composed_image`) image dimensions are not
                        right. Expected 600 x 760 pixels. |

                        | Full-size (`desktop_screenshot`) image dimensions are
                        not right. Expected 2048 x 2600 pixels. |

                        | Mobile (`mobile_screenshot`) image dimensions are not
                        right. Expected 304 x 540 pixels. |

                        | Too-large image file size for a theme screenshot
                        `composed_image` (thumbnails), `desktop_screenshot`, or
                        `mobile_screenshot`] . The maximum supported size is x,
                        but the file's actual size is y. |
                      header:
                        anchor: troubleshooting-theme-uploads_warnings
                    - type: text
                      data: >-
                        ## Workarounds and Further Info


                        If a custom theme does not render properly after you
                        upload and apply it to a storefront, make sure you have
                        created the theme's `.zip` file using the `stencil
                        bundle` command, on a Mac OS, Linux computer, or virtual
                        machine. This will exclude Windows-specific errors that
                        have occurred on some bundles.


                        If you repeatedly encounter the same error or warning
                        and neither this page nor our KB resolves the problem,
                        see support resources for theme developers in our
                        [Developer
                        Community](https://forum.bigcommerce.com/s/group/0F913000000HLjECAW/bigcommerce-developers).
                      header:
                        anchor: troubleshooting-theme-uploads_workarounds
      blocks:
        - type: html
          data: |-
            <div class="docs-landing bg-bclightblue">        
            <div class="cBrLandingTiles">
                      <div class="ui-widget">
                        <div>
                          <div style="padding: 62px 0px 0px;">
                            <div class="container">
                              <h1 class="h1 panel-title__text-dark">Stencil Documentation</h1>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div><!-- landing tiles -->
                    <div class="cBrLandingTiles" style="margin-bottom: 5%;">
                      <div data-region-name="landingTiles">
                        <div class="ui-widget">
                          <div class="lift-content">
                            <div>
                              <div>
                                <div class="row row--pad">
                                  <div class="column-md-12 column-lg-6 column--pad m-bottom-25">
                                    <div class="panel-media doc-landing">
                                      <div class="panel-media__wrap-icon">
                                        <div class="panel-media__icon">
                                          <img alt="" src="https://store-qtmbtj.mybigcommerce.com/template/images/Github-Branch.svg">
                                        </div>
                                      </div>
                                      <div class="panel-media__wrap-content">
                                        <h4 class="h4 panel-media__title"><a href="https://github.com/bigcommerce/cornerstone">Contribute to Cornerstone</a></h4>
                                        <p class="panel-media__text type--sm">Get involved. Join a community of open-source developers and contribute to Cornerstone. View source code, fork the project, or submit a pull request.</p>
                                      </div>
                                    </div>
                                  </div>
                                  <div class="column-md-12 column-lg-6 column--pad m-bottom-25">
                                    <div class="panel-media doc-landing">
                                      <div class="panel-media__wrap-icon">
                                        <div class="panel-media__icon">
                                          <img alt="" src="https://store-qtmbtj.mybigcommerce.com/template/images/Install-Stencil.svg">
                                        </div>
                                      </div>
                                      <div class="panel-media__wrap-content">
                                        <h4 class="h4 panel-media__title"><a href="/stencil-docs/getting-started/installing-stencil">Installing Stencil</a></h4>
                                        <p class="panel-media__text type--sm">Start here. Set up your local development environment and begin developing a custom theme.</p>
                                      </div>
                                    </div>
                                  </div>
                                  <div class="column-md-12 column-lg-6 column--pad m-bottom-25">
                                    <div class="panel-media doc-landing">
                                      <div class="panel-media__wrap-icon">
                                        <div class="panel-media__icon">
                                          <img alt="" src="https://store-qtmbtj.mybigcommerce.com/template/images/Getting-Started.svg">
                                        </div>
                                      </div>
                                      <div class="panel-media__wrap-content">
                                        <h4 class="h4 panel-media__title"><a href="/stencil-docs/theme-development-quickstart/customizing-a-theme">Customization Quick Start</a></h4>
                                        <p class="panel-media__text type--sm">Learn the ropes. Start customizing your storefront design fast with our hands-on Quick Start.</p>
                                      </div>
                                    </div>
                                  </div>
                                  <div class="column-md-12 column-lg-6 column--pad m-bottom-25">
                                    <div class="panel-media doc-landing">
                                      <div class="panel-media__wrap-icon">
                                        <div class="panel-media__icon">
                                          <img alt="" src="https://store-qtmbtj.mybigcommerce.com/template/images/Handlebars.svg">
                                        </div>
                                      </div>
                                      <div class="panel-media__wrap-content">
                                        <h4 class="h4 panel-media__title"><a href="/stencil-docs/handlebars-syntax-and-helpers/handlebars-helpers-reference">Handlebars Helpers Reference</a></h4>
                                        <p class="panel-media__text type--sm">Power up your code. Make your theme dynamic with Handlebars logic.</p>
                                      </div>
                                    </div>
                                  </div>
                                  <div class="column-md-12 column-lg-6 column--pad m-bottom-25">
                                    <div class="panel-media doc-landing">
                                      <div class="panel-media__wrap-icon">
                                        <div class="panel-media__icon">
                                          <img alt="" src="https://store-qtmbtj.mybigcommerce.com/template/images/Stencil-Object-Reference.svg">
                                        </div>
                                      </div>
                                      <div class="panel-media__wrap-content">
                                        <h4 class="h4 panel-media__title"><a href="/stencil-docs/stencil-object-model-reference
            ">Object Model Reference</a></h4>
                                        <p class="panel-media__text type--sm">Access all the data Stencil has to offer. Browse our reference for store objects and properties available via Handlebars.</p>
                                      </div>
                                    </div>
                                  </div>
                                  <div class="column-md-12 column-lg-6 column--pad">
                                    <div class="panel-media doc-landing">
                                      <div class="panel-media__wrap-icon">
                                        <div class="panel-media__icon">
                                          <img alt="" src="https://store-qtmbtj.mybigcommerce.com/template/images/Front-Matter.svg">
                                        </div>
                                      </div>
                                      <div class="panel-media__wrap-content">
                                        <h4 class="h4 panel-media__title"><a href="/stencil-docs">Front Matter Reference</a></h4>
                                        <p class="panel-media__text type--sm">Declare page resources. Adjust layouts, create performant storefronts, and reference front matter expressions for each page type.</p>
                                      </div>
                                    </div>
                                  </div>
                                </div>
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
              </div>
theme:
  background: '#3550b6'
logo: >-
  https://cdn6.bigcommerce.com/s-qtmbtj/product_images/uploaded_images/bigcommerce-logomark-darkbg.png
