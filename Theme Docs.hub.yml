title: Dev Center
header:
  nav:
    left:
      - title: API Docs
        path: /api-docs
      - title: Stencil Docs
        path: /stencil-docs
      - title: Tools & Resources
        path: /tools-resources
      - title: Changelog
        path: /changelog
    center: []
    right:
      - title: My Apps
        path: ''
      - title: Create Account
        path: ''
pages:
  /:
    title: ''
    data: {}
  /stencil-docs:
    title: Stencil Docs
    data:
      children:
        - title: Getting Started
          route:
            path: /getting-started
          data:
            children:
              - title: About Stencil
                route:
                  path: /about-stencil
                data:
                  blocks:
                    - type: html
                      data: <h1>About Stencil</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#what-is-stencil\"> What is Stencil?</a></li>\n\t\t<li><a href=\"#features-and-stack\"> Stencil Development Features and Technology Stack</a></li>\n\t\t<li><a href=\"#key-components\">Key Components (Video Demo)</a></li>\n\t\t<li><a href=\"#blueprint\"> Blueprint (Legacy Framework) Documentation </a></li>\n\t</ul>\n</div>\n"
                    - type: text
                      data: >-
                        ## What is Stencil?


                        Stencil is the theming engine for the BigCommerce
                        platform and for BigCommerce's Cornerstone theme, which
                        is the foundation a developer needs to quickly start
                        developing premium, custom themes with Stencil. 


                        [Cornerstone](https://github.com/bigcommerce/cornerstone)
                        is available on Github as an open source software, and
                        will be the Stencil engined theme we reference in this
                        documentation in order to demonstrate Stencil's
                        capabilities in a fully functioning storefront theme.
                        Here is a demo of the [BigCommerce Cornerstone
                        theme](http://cornerstone-light-demo.mybigcommerce.com/).


                        Stencil also provides features that allow merchants to
                        customize a storefront's look and feel with no coding,
                        making Stencil a powerful and useful engine for all
                        audiences.
                      header:
                        anchor: what-is-stencil
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Stencil Development Features and Technology Stack


                        Stencil's provides the following features, allowing
                        BigCommerce theme developers to create beautiful,
                        dynamic, and powerful storefronts.



                        ### Stencil Command Line Interface (Stencil CLI)


                        The Stencil CLI enables developers to locally develop
                        and customize on any Stencil theme with no impact on a
                        merchant's live storefront during the development
                        process. When locally developing, you will have access
                        to real-time Browsersync preview and testing across
                        desktop, mobile, and tablet devices/viewports.


                        Stencil CLI runs on the Node.js runtime environment.
                        Installing Node.js also provides the required npm
                        package manager.


                        ### Logic-Based Templates


                        Stencil's logic based templates allow BigCommerce
                        developers to customize storefront pages efficiently
                        with the lightweight templating languge, Handlebars.js. 
                        Handlebars allows you to efficiently embed dynamic and
                        conditional logic onto your storefront pages.


                        ### Sass/SCSS Support


                        Stencils Sass and SCSS support allows developers to nest
                        properties, variables, and mixins. Use the familiar
                        Foundation framework (provided) or substitute your
                        choice of framework.


                        Stencil's Cornerstone base theme uses a BigCommerce
                        pattern library called Citadel, which is built on top of
                        the ZURB Foundation framework, version 5.5.3. Stencil
                        does not support Foundation 6.x, due to breaking changes
                        introduced between versions 5.x and 6.x.


                        Foundation offers the framework for creating a
                        responsive theme. You have the option of swapping out
                        Foundation for another framework, although doing so
                        would require significant work.


                        Foundation assets bundled with Cornerstone are located
                        in these subdirectories: 


                        * `Cornerstone/assets/scss/settings/foundation/ `

                        * `Cornerstone/assets/scss/components/foundation/`


                        Citadel extends Foundation’s mixins and components to
                        provide Stencil’s own mixins, extensible components, and
                        utilities. These include drop-down lists, forms, and
                        similar resources. Citadel resources are named according
                        to BEM and SUIT CSS conventions. Classes are named
                        functionally, rather than based on visual presentation
                        or content. Our style guide is published here.

                        Citadel assets bundled with Cornerstone are located in
                        these Cornerstone subdirectories: 


                        * `Cornerstone/assets/scss/settings/citadel/`

                        * `Cornerstone/assets/scss/components/citadel/`


                        More detailed information about the Citadel and
                        Foundation SCSS components, and their naming conventions
                        will be covered in *Components and Design Patterns*.


                        ### Page-specific Resource Definition


                        Specify the dynamic content you want to be displayed on
                        your storefront pages with YAML formatted front matter.


                        ### Javascript Event Hooks


                        Your Stencil themes can access remote objects through
                        event hooks, using the hooks to trigger defined events
                        based on shopper behavior. This will allow you to
                        collect product data and optimize a shopper's
                        experience.


                        To facilitate theme-building, BigCommerce provides the
                        stencil-utils client-side JavaScript library for
                        managing event hooks.


                        ---


                        ## Stencil Theme Editor


                        The Stencil Theme Editor is a browser-based tool that
                        enables merchants to rapidly customize a theme's look
                        and feel with no coding. 


                        BigCommerce theme developers' configuration choices
                        determine which theme aspects merchants can customize,
                        and the range of choices for each aspect.


                        Stencil's Theme Editor graphical interface enables
                        merchants and store administrators to make styling
                        changes to the theme currently applied to their
                        storefront. 


                        As a theme developer, you have the capability to define
                        which style settings appear in the Stencil Theme Editor.
                        You can grant access to colors, fonts, display/hiding of
                        page features, and number of products/entries to display
                        per feature.


                        ### Stencil Theme Variations


                        Each Stencil theme can contain one to four variations.
                        You can optimize individual variations for specific
                        markets, audiences and styles – while still managing and
                        distributing all of these variations as one theme.

                        Cornerstone comes with 3 variations: Cornerstone Light,
                        Cornerstone Warm, and Cornerstone Bold.


                        ### Responsive, Mobile-Friendly Themes


                        BigCommerce stores powered by Stencil allow shoppers to
                        have a first class experience across any device.



                        _Note that this is simply a summary Stencil's core
                        features. Continue reading through the Stencil Developer
                        Documentation to learn about Stencil's full
                        capabilities._
                      header:
                        anchor: features-and-stack
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Key Components (Video Demo)


                        Watch Stencil senior developer's tour of Stencil's key
                        components:


                        <iframe width="560" height="315"
                        src="https://www.youtube.com/embed/p5SR8N0SeCg"
                        frameborder="0" allowfullscreen></iframe>
                      header:
                        anchor: video-demo
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Blueprint (Legacy Framework) Documentation


                        If you are looking for information on Blueprint,
                        BigCommerce's legacy theme framework, you can access
                        that below:


                        * [Themes
                        (Blueprint)](https://developer.bigcommerce.com/themes)

                        * [Stores API
                        reference](https://developer.bigcommerce.com/api)
                      header:
                        anchor: blueprint
              - title: Transitioning to Stencil
                route:
                  path: /transitionining-to-stencil
                data:
                  blocks:
                    - type: html
                      data: <h1>Transitioning to Stencil</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#choosing-dev-path\"> Choosing a Development Path</a></li>\n\t\t<li><a href=\"#front-matter-quick-start\">Front-Matter Quick Start</a></li>\n    <li><a href=\"#front-matter-quick-start\">Handlebars Quick Start</a></li>\n\t\t<li><a href=\"#seo-tips\">SEO Tips and Best Practices</a></li>\n\t\t<li><a href=\"#blueprint-to-stencil\">Blueprint to Stencil Features Map</a></li>\n    <li><a href=\"#interacting-with-api\">Interacting with the BigCommerce API</a></li>\n    <li><a href=\"#partnering-with-bc\">Partnering with BigCommerce</a></li>\n    <li><a href=\"#next-steps\">Next Steps</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >-
                        ## Choosing a Development Path


                        Are you approaching Stencil from a different theming
                        framework, like Blueprint, BigCommerce's legacy
                        framework? Or moving to the Stencil templating
                        environment from a pure HTML and CSS-based design?


                        You have four (non-mutually exclusive) options for
                        developing Stencil themes:


                        * Find a Design & Solutions Partner

                        * Light Customization using the Theme Editor

                        * Light Customization using HTML and CSS

                        * Adapting a Stencil Theme or Developing from Scratch


                        ###  Find a Design & Solutions Partner


                        If you prefer to have an expert collaborator customize
                        your theme, we recommend working with one of our
                        certified BigCommerce Design & Solutions Partners.
                        Reference the following resources to do so:


                        * [Partner
                        Directory](https://partners.bigcommerce.com/directory/search?i=75)

                        * [Working with a Design
                        Partner](https://support.bigcommerce.com/articles/Learning/Working-with-a-Design-Partner)
                        (Support Guide)


                        ### Light Customization with Stencil Theme Editor


                        Stencil can be customized without the use of any
                        specialized development tools or techniques by using of
                        the Stencil Theme Editor. The Stencil Theme Editor still
                        enables customization of a theme's colors, typography,
                        banners, headings, carousel, and footer. It also enables
                        customization of broader layout characteristics, such as
                        the number of products displayed in various panels,
                        category pages, and brand pages.


                        For details, please see:


                        * [Theme
                        Editor](https://support.bigcommerce.com/articles/Public/Using-the-Stencil-Theme-Editor/)
                        (Support article)

                        * [Stencil and the BigCommerce Control
                        Panel](https://www.youtube.com/watch?v=d2F6F8LJXzs&list=PLwTYtMwfzbe7EZiIWPAmPtuwRHkY7BG-0&index=2)
                        (Video introduction to Theme Editor)

                        * [Changing Your Store's
                        Theme](https://support.bigcommerce.com/articles/Learning/What-to-Consider-When-Changing-Your-Theme)
                        (Support guide)

                        * [Personalizing Your
                        Theme](https://support.bigcommerce.com/articles/Learning/Personalizing-your-New-Theme)
                        (Support guide)


                        ### Light Customization with HTML and CSS


                        If you are most comfortable working in HTML and CSS,
                        Stencil's *Edit Theme Files* feature allows you to
                        directly edit most of your theme's files from the
                        Control Panel. For details, please see:


                        * [Editing Stencil Theme
                        Files](https://support.bigcommerce.com/articles/Public/Editing-Stencil-Theme-Files)
                        (Support article)

                        * [Getting Started with the Stencil
                        Framework](https://www.youtube.com/watch?v=waJ1dg_dAh8&index=11&list=PLwTYtMwfzbe7EZiIWPAmPtuwRHkY7BG-0)
                        (Video overview of copying and editing a theme's files)


                        ### Adapt a Stencil Theme, or Develop from Scratch


                        For complete control over a theme's appearance and logic
                        – including the ability to edit _all_ theme
                        configuration files – you will want to use the Stencil
                        Command-line interface, also known as the Stencil CLI.


                        To learn Stencil CLI's templating conventions, see
                        Installing Stencil CLI. Also take a look at
                        BigCommerce's [Getting Started with the Stencil
                        Framework](https://www.youtube.com/playlist?list=PLwTYtMwfzbe7EZiIWPAmPtuwRHkY7BG-0)
                        video playlist.
                      header:
                        anchor: choosing-dev-path
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Front-Matter Quick Start


                        Stencil templates start with a section of "front matter"
                        where you can and concisely customize each page's design
                        and layout details. 


                        This front-matter section uses conventions from YAML, a
                        simple, widely used markup language. If you haven't used
                        these conventions before, refer to our [Front-Matter
                        Overview](https://stencil.bigcommerce.com/docs/using-yaml-front-matter).
                      header:
                        anchor: front-matter-quick-start
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Handlebars Quick Start


                        Stencil uses Handlebars.js to assemble dynamic content
                        into the storefront pages that are displayed to
                        shoppers. The dynamic content can be drawn from a few
                        sources, like the store's catalog.


                        Handlebars' syntax is quite simple, and it allows you to
                        accomplish powerful JavaScript operations with minimal
                        JavaScript code. To learn more about Handlebars.js, see
                        these third-party tutorials: 


                        * [Learn Handlebars in 10 Minutes or
                        Less](http://tutorialzine.com/2015/01/learn-handlebars-in-10-minutes/)

                        * [A Beginner’s Guide to
                        Handlebars](https://www.sitepoint.com/a-beginners-guide-to-handlebars/)

                        * [Getting Started with
                        Handlebars.js](http://blog.teamtreehouse.com/getting-started-with-handlebars-js)

                        * [Handlebars interactive
                        tutorial](http://tryhandlebarsjs.com/)
                      header:
                        anchor: handlebars-quick-start
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## SEO Tips and Best Practices


                        Search-engine optimization (SEO) helps translate an
                        elegant theme into a successful, high-conversion
                        storefront. Because so many shoppers reach online stores
                        through a search engine, a search-optimized site will be
                        more visible – attracting more traffic. 


                        The Stencil framework is [designed for high SEO
                        performance](https://www.bigcommerce.com/improve-organic-traffic/).
                        However, you will want to keep SEO in mind as you build
                        out each theme and storefront. For guidelines, please
                        see these BigCommerce support articles (which are a
                        series of intermediate to advanced chapters in our Guide
                        to SEO):


                        * [SEO Do's and
                        Don'ts](https://support.bigcommerce.com/articles/Learning/Things-to-Know/)

                        * [Developing a Keyword
                        Strategy](https://support.bigcommerce.com/articles/Learning/Developing-a-Keyword-Strategy/)

                        * [SEO Success
                        Essentials](https://support.bigcommerce.com/articles/Learning/Bigcommerce-SEO-Success-Essentials/)

                        * [Advanced SEO on
                        BigCommerce](https://support.bigcommerce.com/articles/Learning/Advanced-SEO-on-Bigcommerce/)


                        Also checkout our [Guide to Keyword
                        Research](https://support.bigcommerce.com/articles/Learning/Value-of-Keywords/).
                      header:
                        anchor: seo-tips
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Blueprint-to-Stencil Features Map 


                        This following resources are designed to help you
                        identify the Stencil counterparts to familiar Blueprint
                        components.


                        * What to Consider When Changing Your Theme (Support
                        article)

                        * Stencil and the BigCommerce Control Panel (Video tour
                        of Blueprint-to-Stencil  changes in the BigCommerce
                        control panel)
                      header:
                        anchor: blueprint-to-stencil
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Interacting with the BigCommerce API


                        Interacting with the BigCommerce API

                        BigCommerce's growing API resources enable application
                        developers to create private scripts or apps that
                        support a single store, or to create public apps offered
                        to multiple stores via BigCommerce's App Marketplace.


                        As a theme developer, you can rely on apps to enhance
                        your themes' capabilities, and to extend or complement
                        the storefront features built into the BigCommerce
                        platform. Popular app areas include inventory
                        management, email marketing, coupons, reviews, shipping,
                        tax accounting, and security. For more information, see
                        BigCommerce's:


                        * App Marketplace

                        * API documentation
                      header:
                        anchor: interacting-with-api
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Partnering with BigCommerce


                        Do we belong together? No formal business relationship
                        is required to develop themes on the BigCommerce
                        platform. However, consider applying to become a
                        BigCommerce Design & Solutions Partner (DSP), in order
                        to accelerate your development of new business and
                        revenue. For details, see our:


                        * Overview of BigCommerce Partnerships

                        * Design & Solutions Partners – basics and application
                        links

                        * Technology Partners – basics and application links

                        * Partnership Application
                      header:
                        anchor: partnering-with-bc
                    - type: text
                      data: |-
                        ## Next Steps

                        Proceed to: 

                        * Installation and Launch instructions
                        * Development Quick Start tutorial
                        * Front-matter overview of YAML conventions
                        * Front-matter attributes reference
                        * Handlebars overview
                      header:
                        anchor: next-steps
              - title: Supported Browsers
                route:
                  path: /supported-browsers
                data:
                  blocks:
                    - type: html
                      data: <h1>Supported Browsers</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#desktop-and-mobile\">Supported Desktop and Mobile Browsers</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >-
                        ## Supported Desktop and Mobile Browsers


                        The following browsers are supported for BigCommerce
                        storefronts that use Stencil-based themes. 


                        The browsers are sorted by popularity, beginning with
                        the most popular browsers. Please ensure that your theme
                        functions properly with all supported browsers.


                        ### Desktop Browsers


                        * Google Chrome (latest edition)

                        * Firefox (latest edition)

                        * Internet Explorer 10 and 11

                        * Safari (latest edition)

                        * Microsoft Edge (latest edition)


                        ### Mobile Browsers 


                        * Android Chrome browser (latest edition)

                        * iOS Safari browser (latest edition)
                      header:
                        anchor: desktop-and-mobile
                    - type: callout
                      data:
                        type: warning
                        body: >-
                          Browser support will cease to be offered if browser
                          usage falls below 2%.
                        title: Usage Support
              - title: Installing Stencil
                route:
                  path: /installing-stencil
                data:
                  blocks:
                    - type: html
                      data: <h1>Installing Stencil</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#installing_prerequisites\">Prerequisites by OS</a></li>\n    <li><a href=\"#installing_installing-the-cli\">Installing the Stencil Command Line Interface (CLI)</a></li>\n    <li><a href=\"#installing_video-demo\">Cloning The Cornerstone Theme Using Github</a></li>\n    <li><a href=\"#installing_video-demo\">Installing Stencil's Javascript Utilities</a></li>\n    <li><a href=\"#installing_video-demo\">Video Demo</a></li>\n\t</ul>\n</div>"
                    - type: tabs
                      data:
                        children:
                          - title: ' Mac OS Prerequisites'
                            blocks:
                              - type: html
                                data: <h1>Mac OS Prerequisites</h1>
                              - type: html
                                data: "<div class=\"otp\" id=\"no-index\">\n\t<h3>On This Tab</h3>\n\t<ul>\n    <li><a href=\"mac_xcode\">Installing Xcode</a></li>\n    <li><a href=\"mac_nodejs\">Installing Node.js</a></li>\n    <li><a href=\"mac_troubleshooting\">Troubleshooting</a></li>\n\t</ul>\n</div>\n"
                              - type: callout
                                data:
                                  body: >-
                                    These instructions have been tested on Mac
                                    OS X Yosemite. Dependencies for other
                                    platforms will be added upon further
                                    testing.
                                  title: Platform Support
                              - type: text
                                data: >-
                                  ## Installing Xcode 


                                  You must install the Xcode development tools
                                  (latest stable version).
                                header:
                                  anchor: mac_xcode
                              - type: text
                                data: '---'
                              - type: text
                                data: >-
                                  ## Node.js 


                                  Stencil requires the <a
                                  href="https://nodejs.org/">Node.js</a> runtime
                                  environment, version <a
                                  href="https://nodejs.org/en/blog/release/">6.x
                                  or later</a>. We have tested Stencil on
                                  selected Node.js versions, from <a
                                  href="https://nodejs.org/en/blog/release/v6.10.3/">6.10.3</a>
                                  to <a
                                  href="https://nodejs.org/en/blog/release/v7.9.0/">7.9.0</a>. 


                                  We recommend that you install or update
                                  Node.js using <a
                                  href="https://github.com/creationix/nvm#installation">nvm</a>.
                                  First install nvm, version <a
                                  href="https://github.com/creationix/nvm/tree/v0.31.0">0.31.0</a>,
                                  as follows:


                                  ```

                                  curl -o-
                                  https://raw.githubusercontent.com/creationix/nvm/v0.31.0/install.sh
                                  | bash

                                  ```


                                  Next, explicitly install a supported Node.js
                                  version, using this convention:<br>


                                  ```

                                  nvm install 6.4.0

                                  ```
                                header:
                                  anchor: mac_nodejs
                              - type: callout
                                data:
                                  body: >-
                                    You can choose to instead download the
                                    latest x.x version of Node.js from the
                                    Node.js Foundation's archives, using URLs of
                                    the form:
                                    https://nodejs.org/dist/latest-v6.x/,
                                    https://nodejs.org/dist/latest-v7.x/, etc.
                                    We recommend installing only LTS ("Long-Term
                                    Support"/"Mature and Dependable") versions.
                                  title: Notes on Dependencies
                              - type: text
                                data: '---'
                              - type: text
                                data: >
                                  ## Troubleshooting


                                  If you run into any problems with Stencil
                                  installation or launch, first consult
                                  [Troubleshooting Your Setup](). 


                                  If that does not resolve your issue, consult
                                  our [Support resources](), which include
                                  community and peer support via BigCommerce and
                                  Stack Overflow forums.
                                header:
                                  anchor: mac_troubleshooting
                          - title: Linux Prerequisites
                            blocks:
                              - type: html
                                data: <h1>Linux Prerequisites</h1>
                              - type: html
                                data: "<div class=\"otp\" id=\"no-index\">\n\t<h3>On This Tab</h3>\n\t<ul>\n    <li><a href=\"#linux_root\">Root Permissions</a></li>\n     <li><a href=\"#linux_git-client\">Git Client</a></li>\n     <li><a href=\"#linux_nodejs\">Node.js</a></li>\n      <li><a href=\"#linux_troubleshooting\">Troubleshooting</a></li>\n\t</ul>\n</div>"
                              - type: callout
                                data:
                                  body: >-
                                    These instructions have been tested on
                                    Linux/Ubuntu v.14.04.4. Dependencies for
                                    other platforms will be added upon further
                                    testing
                                  title: Platform Support
                              - type: text
                                data: >-
                                  ## Root Permissions


                                  You should have administrator/root permissions
                                  on your machine. (If not, you may need to
                                  precede some of the below commands with the
                                  `sudo` prefix.)
                                header:
                                  anchor: linux_root
                              - type: text
                                data: '---'
                              - type: text
                                data: >-
                                  ## Git Client


                                  You must have a [Git
                                  client](https://git-scm.com/downloads)
                                  installed.
                                header:
                                  anchor: linux_git-client
                              - type: text
                                data: '---'
                              - type: text
                                data: >-
                                  ## Node.js


                                  Stencil requires the Node.js runtime
                                  environment, version 6.x or later. We have
                                  tested Stencil on selected Node.js versions,
                                  from 6.10.3 to 7.9.0.


                                  We recommend that you install or update
                                  Node.js using nvm. First install nvm, version
                                  0.31.0, as follows:


                                  `curl -o-
                                  https://raw.githubusercontent.com/creationix/nvm/v0.31.0/install.sh
                                  | bash`


                                  Next, explicitly install a supported Node.js
                                  version, using this convention:


                                  `nvm install 6.4.0`
                                header:
                                  anchor: linux_nodejs
                              - type: text
                                data: '---'
                              - type: text
                                data: >-
                                  ## Troubleshooting


                                  If you run into any problems with Stencil
                                  installation or launch, please first see our
                                  Troubleshooting Your Setup page. Next, please
                                  consult our Support resources, which include
                                  community/peer support via BigCommerce and
                                  Stack Overflow forums.
                                header:
                                  anchor: linux_troubleshooting
                          - title: Windows Prerequisites
                            blocks:
                              - type: html
                                data: <h1>Windows Prerequisites</h1>
                              - type: html
                                data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Tab </h3>\n\t<ul>\n     <li><a href=\"#windows_root-permissions\">Root Permissions</a></li>\n     <li><a href=\"#windows_git-client\">Git Client and Git BASH</a></li>\n     <li><a href=\"#windows_python-installation\">Python Installation</a></li>\n     <li><a href=\"#windows_python-node-config\">Python/Node Configuration</a></li>\n     <li><a href=\"#windows_node-installation\">Node.js Installation</a></li>\n     <li><a href=\"#windows_compiler-options\">C++ Compiler Options</a></li>\n\t</ul>\n</div>"
                              - type: callout
                                data:
                                  body: >-
                                    The following instructions have been tested
                                    on Windows 8. Dependencies for other
                                    platforms will be added upon further
                                    testing.
                                  title: Platform Support
                              - type: text
                                data: >-
                                  ## Root Permissions


                                  You must have authorization to run Powershell
                                  "as administrator" on your machine.
                                header:
                                  anchor: windows_root-permissions
                              - type: text
                                data: '---'
                              - type: text
                                data: >-
                                  ## Git Client and Git BASH


                                  You must have a Git client installed. The Git
                                  for Windows distribution includes a Git
                                  client, and also provides the Git BASH
                                  emulator for command-line access. All commands
                                  should be run in Git Bash from here.
                                header:
                                  anchor: windows_git-client
                              - type: text
                                data: '---'
                              - type: text
                                data: >-
                                  ## Python Installation


                                  Install [Python 2.7.x for
                                  Windows](https://www.python.org/downloads/windows/).
                                  This is required for Visual Studio's Windows
                                  Build Tools, installed below. **Python 3.x is
                                  not supported.**


                                  In the installer dialog shown below, change
                                  the bottom default, so as to enable the `Add
                                  python.exe` to Path option. This provides
                                  global command-line access to Python.
                                header:
                                  anchor: windows_python-installation
                              - type: image
                                data: >-
                                  //s3.amazonaws.com/user-content.stoplight.io/6116/1539115629012
                              - type: text
                                data: '---'
                              - type: text
                                data: >-
                                  ## Node.js Installation


                                  Stencil requires the [Node.js]() runtime
                                  environment, version [6.x or later]().


                                  On Windows, we have tested Stencil CLI on
                                  selected Node.js version
                                  [7.10.0](https://nodejs.org/en/blog/release/v7.10.0/"7.10.0).
                                  We recommend that you install only an LTS
                                  ("Long-Term Support"/"Mature and Dependable")
                                  version, and that you download that version's
                                  `.msi` installer (not its `.exe` binary).


                                  **Note:** _You can choose to instead download
                                  the latest x.x version of Node.js from the
                                  Node.js Foundation's archives, using URLs of
                                  the form:
                                  [https://nodejs.org/dist/latest-v8.x/](https://nodejs.org/dist/latest-v8.x/),
                                  [https://nodejs.org/dist/latest-v8.x/](https://nodejs.org/dist/latest-v8.x/),
                                  etc. In all cases, we recommend installing
                                  only LTS ("Long-Term Support"/"Mature and
                                  Dependable") versions. However, please see the
                                  restriction on technical assistance in the
                                  Notes on Dependencies below._


                                  To verify your Node.js installation or
                                  reinstallation, this [blog
                                  post](http://blog.teamtreehouse.com/install-node-js-npm-windows)
                                  provides Windows-specific tips and tests.
                              - type: callout
                                data:
                                  body: >-
                                    You will need to restart your computer to
                                    complete Node.js installation.
                                  type: warning
                                  title: Restart Required
                              - type: text
                                data: >-
                                  ## Python/Node Configuration


                                  After installing both Python and Node.js,
                                  configure Python within the Node.js runtime
                                  environment by running this npm command:


                                  `npm config set python python2.7`
                                header:
                                  anchor: windows_python-node-config
                              - type: callout
                                data:
                                  body: >-
                                    The [node package
                                    manager](https://www.npmjs.com/) was
                                    installed as part of Node.js. As you proceed
                                    through Stencil CLI setup (and later
                                    refreshes), you will use this command-line
                                    utility to install packages/modules, and to
                                    configure and manage dependencies and their
                                    versions.
                                  title: About Node Package Manager (npm)
                              - type: text
                                data: >
                                  ## C++ Compiler Options


                                  Choose to either install Turbo C++ or Visual
                                  Studio for your C++ Compiler.


                                  ### Turbo C++


                                  You can install Turbo C++ as a lighter version
                                  instead of Visual Studio. The installation
                                  takes about 5 minutes. After installation, a
                                  box opens that highlights the features of
                                  Turbo C++. This box can be closed since it is
                                  not needed to complete installation. If you
                                  prefer using Visual Studio then use the steps
                                  below.


                                  ### Visual Studio Installation

                                  Install MicroSoft Visual Studio. Stencil
                                  requires a 2013 or later release, Community
                                  Edition (free) or higher.


                                  Be sure to install Visual Studio's "Common
                                  Tools" component. You can also add this
                                  component later in the window shown below.


                                  ### Visual Studio Version/Node Configuration

                                  Finally, configure Visual Studio within the
                                  Node.js runtime environment by running the
                                  following npm command.

                                  (Replace the 2015 parameter with 2013 or 2017,
                                  as needed, to match the Visual Studio release
                                  you have installed:)


                                  `npm config set msvs_version 2015`
                              - type: callout
                                data:
                                  title: Notes on Dependencies
                                  body: >-
                                    While alternate versions might also support
                                    Stencil, BigCommerce does not offer
                                    technical assistance on substitutions for,
                                    or customized versions of, the tested
                                    dependencies listed here.


                                    Once Stencil is fully installed, you can
                                    check dependencies' installed versions by
                                    examining your
                                    `<theme-name>/package.jsonfile`.
                              - type: text
                                data: >-
                                  ## Troubleshooting


                                  If you run into any problems with Stencil
                                  installation or launch, please first see our
                                  [Troubleshooting Your Setup]() article. If
                                  that doesn't solve the issue, try consulting
                                  our [Support
                                  resources](https://forum.bigcommerce.com/s/group/0F913000000HLjECAW/bigcommerce-developers).
                      header:
                        title: Stencil Prerequisites by OS
                        anchor: installing_prerequisites
                    - type: text
                      data: >-
                        ## Installing the Stencil Command Line Interface


                        The first step toward developing on Stencil is to
                        install the Stencil CLI. 


                        You can do this via the following command (_If you are
                        using Windows, you will need to run this command in git
                        bash._):


                        `npm install -g @bigcommerce/stencil-cli`


                        ### Items to Note


                        * The command above requires <a
                        href="https://www.npmjs.com/">npm</a> to be installed in
                        your local development environment.


                        * In Windows, this <span class="inline-code">npm</span>
                        command's execution might at times appear to freeze.
                        However, the installer is running. 

                        Give it several minutes to complete installation.


                        * On Mac OS machines with installed xcode, version 5.x,
                        this <span class="inline-code">npm</span> command has
                        generated errors of the form: 

                        <span class="inline-code">npm ERR! invalid:
                        string_decoder</span>. The workaround is to upgrade
                        xcode to the latest stable xcode version 

                        (7.3.1 as of this page's last revision). 


                        * If you receive a file-permissions error, and you did
                        not install Node.js via <a
                        href="https://github.com/creationix/nvm#installation">nvm</a>
                        (Node Version Manager), 

                        then either install nvm now, or follow one of the
                        workarounds on this external page: 
                          [https://docs.npmjs.com/getting-started/fixing-npm-permissions](https://docs.npmjs.com/getting-started/fixing-npm-permissions)
                    - type: callout
                      data:
                        body: >-
                          To ensure the Stencil CLI is compatible with all the
                          changes introduced in Cornerstone 2.0.0, you must
                          upgrade to the latest version of Stencil CLI (1.15.1)
                          if using Cornerstone 2.x.x.


                          Occasionally, you will receive a command line prompt
                          to run the installation command when you restart your
                          Stencil server. This occurs when BigCommerce publishes
                          a critical fix in Stencil CLI, to resolve an issue
                          like a newly discovered security exploit.
                        title: CLI Force Upgrade and Cornerstone 2.0.0
                        type: warning
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Cloning Cornerstone using Github


                        _Windows users need to run this in git bash._


                        Navigate to a directory where you would like to install
                        a subdirectory for your theme. You must have appropriate
                        write permissions in this directory. 


                        Execute the following command to clone Stencil's base
                        theme, Cornerstone, into a new subdirectory named
                        `.../cornerstone/`


                        `git clone
                        https://github.com/bigcommerce/cornerstone.git`
                          
                        If the above command fails, and you are accessing GitHub
                        anonymously, give the URL this alternate prefix:


                        `git clone git://github.com/bigcommerce/cornerstone.git`



                        <!-- Add a note here: If downloading a marketplace
                        theme, must install jspm, register your jspm instance,
                        and set up BitBucket access...  -->


                        <!-- If you are installing Stencil for the first time,
                        then in--> In the next step, you will install Stencil's
                        <a
                        href="/docs/stencil-docs/getting-started/installing-and-launching/javascript-utilities">JavaScript
                        utilities</a> to enable API access via Ajax.


                        /stencil-docs/getting-started/installing-and-launching/adding-a-base-theme
                    - type: callout
                      data:
                        body: >-
                          If you are reinstalling over a base theme on which you
                          have already begun development, first back up your
                          theme's `.stencil` file. This contains your store URL,
                          BigCommerce username and access tokens, and other
                          basic settings. Preserving those settings will speed
                          up initializing and launching the new version. If you
                          would like to allow for complete rollback, back up
                          your entire theme's directory.
                        type: error
                        title: Back Up before Reinstalling
                    - type: text
                      data: '---'
                    - type: text
                      data: "## Installing Stencil's Javascript Utilities\n\nStencil's Cornerstone theme provides utilities called `stencil-utils` to enable API usage (via Ajax) to BigCommerce's backend. \n\nYou will learn more about Stencil Utils in our Stencil Utils overview, but for now, you'll want to be sure you have it installed in your theme. \n\nYou must use [npm](https://www.npmjs.com/) to install the `stencil-utils` module in your theme during initial installation. You must run `npm install` after downloading and installing a refreshed Cornerstone version to ensure that all your dependencies are up to date.\n\n_Windows users need to run this in git bash._\n\nComplete the following steps:\n\nNavigate to your Stencil theme directory. This example assumes that this target directory has the default name `cornerstone`.\n\n`cd cornerstone`\n\nNext, execute the following command inside of that directory:\n\t\n`npm install`\n\nThis will install the required npm modules to properly leverage the Stencil event framework.\n\nNow that your installation is complete, start \n<a href=\"/docs/preparing-your-store-tokens\">preparing your store/tokens</a>."
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Video Demo


                        Watch a brief demonstration of the Stencil installation
                        and launch:


                        <iframe width="560" height="315"
                        src="https://www.youtube.com/embed/iWBrJalyM0A"
                        frameborder="0" allow="autoplay; encrypted-media"
                        allowfullscreen></iframe>
              - title: Authentication and Tokens
                route:
                  path: /authentication-and-tokens
                data:
                  blocks:
                    - type: html
                      data: <h1>Creating an API Account to Obtain OAuth Tokens</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#authentication_creating-an-api-account\">Creating an API Account</a></li>\n    <li><a href=\"#authentication_issuing-additional\">Issuing Additional Tokens</a></li>\n    <li><a href=\"#authentication_revoking-tokens\">Revoking Tokens</a></li>\n    <li><a href=\"#authentication_copying-oauth-tokens \">Copying OAuth Tokens</a></li>\n\t</ul>\n</div>"
                    - type: callout
                      data:
                        type: error
                        body: >-
                          If you've successfully installed Stencil you're ready
                          to create a BigCommerce API Account. 

                          _If you have not yet installed Stencil, see the
                          articles in "Installing and Launching Stencil._
                        title: Status Check
                    - type: text
                      data: >-
                        ## Creating an API Account 


                        Follow the steps below to create an API Account and
                        obtain your OAuth Tokens.


                        1. Using the store owner's credentials, log into the
                        control panel of the store for which you are
                        developing. 


                        2. From the left nav, select Advanced Settings > API
                        Accounts.


                        3. From the resulting Store API Accounts page, select
                        the `Create API Account` button.


                        4. Give your account a name that reflects its purpose.


                        _The BigCommerce platform does not validate this name,
                        however, we recommend naming accounts by purpose to help
                        you keep track of which accounts you need to keep
                        active. You should assign a name that will make the
                        account's purpose clear to you and other store
                        administrators._


                        5. Under OAuth Scopes, set the Themes selector to either
                        `modify` or `read-only`.


                        _The read-only scope is sufficient to
                        authorize/initialize a Stencil theme. However, the
                        modify scope will achieve the same goal, while also
                        authorizing this account to upload themes to the store
                        from the command line._


                        6. Click `Save`. 


                        _As outlined in [this support article](), doing so will
                        display a modal, from which you can copy your `Client
                        ID` and `Access Token` values. The modal will also
                        prompt your browser to download a .txt file that
                        contains your credentials. You will need these values to
                        authorize and initialize your Stencil theme. If you're
                        ready to do so now, move ahead to [Authorizing and
                        Initializing Stencil]()._
                      header:
                        anchor: authentication_creating-an-api-account
                    - type: callout
                      data:
                        type: warning
                        title: Reserved Role
                        body: >-
                          Currently, only the store owner can create an OAuth
                          API account according to the instructions below. Also,
                          note that each store is limited to 50 accounts at a
                          time.
                    - type: text
                      data: '---'
                    - type: text
                      data: >
                        ## Issuing Additional Tokens


                        To issue store tokens for additional themes or
                        developers, repeat the process outlined in Creating an
                        API Account.


                        (Even if you originally initialized your theme using a
                        legacy API [Basic-Auth] token, you will need to generate
                        any new tokens using the new OAuth flow.)


                        You can create up to 50 API accounts/tokens per store.
                        If you hit this limit and still need to create new
                        tokens, you will need to delete existing accounts.
                        Deleting an account will invalidate the corresponding
                        token, which will affect any developer using that token.
                      header:
                        anchor: authentication_issuing-additional
                    - type: text
                      data: >-
                        ## Revoking OAuth Tokens


                        **Note**: After completing the below process, there is
                        no undo. The following process completely deletes the
                        selected account(s), revoking the corresponding
                        token(s).


                        If you are completely sure you would like to revoke an
                        existing OAuth store token, delete the corresponding
                        Store API account with the following steps:


                        1. Navigate to the control panel's API Accounts page.


                        2. Select the trash-can button to the right of the
                        account that you want to delete.


                        _You can also use the check boxes at left to select
                        multiple accounts, and then delete them all at once._
                      header:
                        anchor: authentication_revoking-tokens
                    - type: image
                      data: >-
                        //s3.amazonaws.com/user-content.stoplight.io/6116/1537421464104
                    - type: text
                      data: >-
                        ## Copying OAuth Tokens 


                        To access an existing OAuth token to authorize your
                        theme:


                        1. Open the .txt file that the BigCommerce control panel
                        generated when you created the API account.


                        (If you did not retain this file, you will need to
                        generate a new token by repeating the Creating an API
                        Account procedure.)


                        2. Note the Client ID and Access Token hashes in the
                        file (or in the control-panel modal for your newly
                        created token).


                        3. If you are a merchant granting an outside theme
                        developer access to your store, provide these two values
                        to the developer. They will need them when [Authorizing
                        and Initializing Stencil]().


                        4. If you are developing a theme against your own store,
                        you will use the same two values in the same
                        [Authorizing and Initializing Stencil]() step, described
                        on the following page.
                      header:
                        anchor: 'authentication_copying-oauth-tokens '
              - title: Launching Stencil
                route:
                  path: /launching-stencil
                data:
                  children:
                    - title: Authorizing and Initializing Stencil
                      route:
                        path: /authorizing-and-initializing
                      data:
                        blocks:
                          - type: html
                            data: <h1>Authorizing and Initializing Stencil</h1>
                          - type: html
                            data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#authorizing_authorizing-oauth\">Authorizing with OAuth Tokens</a></li>\n\t</ul>\n</div>"
                          - type: callout
                            data:
                              body: >-
                                Even when you share a theme across storefronts,
                                we strongly recommend that you clone a separate
                                subdirectory (each containing its own .stencil
                                file) for each store. This helps isolate and
                                secure each merchant's data.


                                You can clone your .../cornerstone/ subdirectory
                                now to create your first isolated copy, and then
                                switch to the resulting new subdirectory to
                                continue. (Prior to March 2017, Stencil's
                                default subdirectory name was .../stencil/.)
                              title: ' Best Practice: Isolate Stores by Subdirectory'
                          - type: text
                            data: >+
                              ## Authorizing with OAuth Tokens


                              Use the following steps to authorize your theme
                              using an OAuth API account:


                              1. Have your store API account's Client ID and
                              Access Token hashes ready. 

                              (Refer back to the Copying a Token to Initialize
                              Stencil or Creating an API Account instructions.)


                              2. Starting from the subdirectory for the
                              appropriate theme (and store), initialize Stencil
                              CLI by running the following command (_Windows
                              users need to run this in git bash_):


                              `stencil init`


                              3. You will be prompted to provide the homepage
                              URL of the production store against which you want
                              to develop. This can be your own store, or a
                              client store that you are customizing.


                              4. Next, you will be prompted to enter the port
                              where you would like to run your store on your
                              local machine. This can be any port you like, but
                              we recommend using port 3000.


                              5. Next, you will be prompted: What is your
                              Stencil OAuth Client ID? Enter your store API
                              account's Client ID.


                              (If you used this Client ID when you last ran
                              stencil init, you'll see it hinted on the command
                              line, and can just confirm it.)


                              6. Finally, you will be prompted: What is your
                              Stencil OAuth Access Token? If you entered these
                              credentials when you last ran stencil init, you'll
                              see the token hinted in cleartext. If not, paste
                              your Access Token hash onto the command line. Then
                              press Enter.



                              Your terminal window should now confirm that you
                              have successfully initialized Stencil CLI on your
                              local machine. With Stencil CLI initialized, you
                              are ready to start Stencil and begin development.


                    - title: Running Stencil Locally
                      route:
                        path: /running-stencil-locally
                      data:
                        blocks:
                          - type: html
                            data: <h1>Running Stencil Locally</h1>
                          - type: html
                            data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#root-permissions\">Local Launch: Theme Only</a></li>\n    <li><a href=\"#node.js\">Local Launch: Theme and Theme Editor</a></li>\n    <li><a href=\"#next-steps\">Customizing Theme Editor's Port</a></li>\n    <li><a href=\"#next-steps\">Local Launch: Disabling Caching</a></li>\n\t</ul>\n</div>"
                          - type: text
                            data: >-
                              ## Local Launch: Theme Only


                              In order to run Stencil locally, issue the
                              following command in your initialized Stencil
                              theme directory (_Windows users need to run this
                              in git bash_):


                              `stencil start`


                              Assuming that you set Stencil to run on `port
                              3000`, when you navigate to http://localhost:3000,
                              you should see the storefront to which you pointed
                              your local instance – but with the stencil theme
                              applied to it.


                              ## Troubleshooting Token Errors


                              If you receive the following error message, 


                              `Unauthorized, please use a valid username/token`


                              then store token authentication has failed.


                              In this case, please track back and review the
                              following articles:


                              * [Creating an API
                              Account](creating-an-api-account): How to issue or
                              reissue tokens in the BigCommerce control panel.

                              * [Authorizing and Initializing
                              Stencil:](authorizing-and-initializing-stencil):
                              How to initialize Stencil with your username and
                              token.
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Troubleshooting Token Errors


                              If you receive the following error message, then
                              store token authentication has failed:


                              `Unauthorized, please use a valid username/token`


                              In this case, please review these steps:

                              * Creating an API Account: How to issue or reissue
                              tokens in the BigCommerce control panel.

                              * Authorizing and Initializing Stencil: How to
                              initialize Stencil with your username and token.
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Local Launch: Theme and Theme Editor


                              To run Stencil locally while also launching a
                              local version of Theme Editor, start in your theme
                              directory and run the following command, but
                              append the -e option:


                              `stencil start -e`


                              The Theme Editor server will run in parallel with
                              the stencil theme at
                              [http://localhost:8181](http://localhost:8181/).
                              The use case for this is a developer who is
                              reconfiguring the Theme Editor/Store Design (check
                              terminology) settings. It is important to note
                              this is a tool to understand the experience
                              changes when editing the schema.json file. Making
                              changes to your store on the Theme Editor/Using
                              store design on the local host port will not
                              affect your life store.
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Customizing Theme Editor's Port


                              You can override Theme Editor's default port by
                              appending the "--theme-editor-port [port]" option.
                              For example, to specify port 9000, you would
                              enter:


                              `stencil start -e --theme-editor-port 9000

                              `


                              To verify Theme Editor's launch, you would then go
                              to http://localhost:9000. Using this option, you
                              can specify any port between `1024` and `65535`.
                          - type: text
                            data: '---'
                          - type: text
                            data: >
                              ## Local Launch: Disabling Caching


                              By default, Stencil caches API resource data per
                              storefront page. This minimizes server traffic
                              while you develop your theme locally.

                              If you prefer to see your changes reflected
                              immediately in your live store, you can turn off
                              caching by appending the `--no-cache` or `-n`
                              option:


                              `stencil start --no-cache`

                              `stencil start -n`


                              ### To re-enable caching:


                              Kill the current Stencil server (_ctrl + c will do
                              the job_) and restart Stencil, this time omitting
                              the `--no-cache` or `-n` option.


                              `stencil start` 
                    - title: Troubleshooting Your Setup
                      route:
                        path: /troubleshooting-your-setup
                      data:
                        blocks:
                          - type: html
                            data: <h1>Troubleshooting Your Setup</h1>
                          - type: html
                            data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#desktop-and-mobile\">Unsupported Node Version</a></li>\n    <li><a href=\"#desktop-and-mobile\">npm install errors (\"Unmet Peer Dependency\")</a></li>\n    <li><a href=\"#desktop-and-mobile\">npm install/stencil init Errors/a></li>\n    <li><a href=\"#desktop-and-mobile\">npm install permissions Errors</a></li>\n    <li><a href=\"#desktop-and-mobile\">\"Uncaught TypeError: Illegal invocation\" error: Re-run npm install inside Theme Directory</a></li>\n    <li><a href=\"#desktop-and-mobile\">\"js/bundle\" Errors upon stencil init</a></li>\n    <li><a href=\"#desktop-and-mobile\">stencil init/stencil start Errors</a></li>\n    <li><a href=\"#desktop-and-mobile\">Mac OS:\"Xcode/iOS license...\" Errors upon Stencil Commands</a></li>\n\t</ul>\n</div>"
                          - type: callout
                            data:
                              title: First Check the Terminal Window
                              body: >-
                                For any unexpected behavior that you encounter
                                while developing your Stencil theme, first check
                                your terminal window where you started Stencil
                                CLI. 


                                In some cases, the terminal will provide a
                                verbose error message specifying where to look
                                for problems. In any case, it has the potential
                                to provide further insight on the issue.
                                Diagnostic suggestions are listed on this page
                                for error messages that may not be helpful in
                                revealing the issue you're experiencing.
                          - type: text
                            data: |
                              ## Unsupported Node Version
                          - type: text
                            data: >-
                              ## `npm install` Errors


                              If you get any `Unmet Peer Dependency` errors when
                              issuing the `npm install` command – or at other
                              times – make sure you are running the `npm
                              install` command **inside** your theme directory.


                              If running the `npm install ` command inside your
                              theme directory does not resolve the error, try
                              one of the following:


                              * Try removing your theme directory's
                              `/node_modules/` subdirectory, by running `rm -rf
                              node_modules`


                              * Run the `npm cache clean` command


                              * Re-run `npm install`
                          - type: text
                            data: >-
                              ## `npm install` and `stencil init` Errors


                              Please similarly check and adjust your Node.js
                              version – by following the Prerequisites link
                              above to see platform-specific recommendations –
                              if you get unexpected error messages when issuing
                              the npm install or stencil init commands.
                          - type: text
                            data: >
                              ## "Uncaught TypeError: Illegal invocation" error


                              If you receive an `Uncaught TypeError: Illegal
                              invocation` console error, and previously
                              installed Stencil using the original jspm-based
                              installation flow, then later switched to our
                              current webpack installation flow: Please remove
                              your theme's `/node_modules/` subdirectory, then
                              re-run `npm install` inside your theme's
                              directory.
                          - type: text
                            data: >+
                              ## "js/bundle" Errors upon `stencil init`


                              If you get errors of the following type upon
                              executing the stencil init command:


                              ```

                              Potentially unhandled rejection [6] TypeError:
                              Error loading "js/bundle" 

                              at
                              file:/Users/<username>/Desktop/Fortune-1.4.6/assets/js/bundle.js


                              Error evaluating
                              file:/Users/<username>/Desktop/Fortune-1.4.6/assets/js/bundle.js


                              Cannot read property 'createElement' of
                              undefined...

                              ```


                              try the following workaround:


                              1. Download and unzip a fresh copy of the theme.


                              3. Refresh theme dependencies by running `npm
                              install && jspm install`


                              3. Run `stencil init`.


                              *You will see the same error message as before,
                              but proceed.*


                              4. Delete the `<theme-name>/assets/js/bundle.js`
                              file.


                              5. Run `stencil init` again.

                              This should now execute properly.

                              6. Run `stencil start`


                              8. Verify your theme's launch at:
                              http://localhost:3000.

                          - type: text
                            data: >-
                              ## stencil init/stencil start Errors


                              If you get unexpected error messages or unexpected
                              results upon executing the `stencil init`,
                              `stencil start`, or other Stencil CLI commands,
                              make sure you are working in the subdirectory for
                              the specific theme you intend to launch. 


                              One way of checking what directory you are working
                              in is by running the `pwd` command in your
                              terminal.
                          - type: text
                            data: >-
                              ## stencil start/missing module Errors


                              If executing `stencil start` provokes errors like
                              the following


                              ```

                              module.js:327

                              throw err;

                              ^


                              Error: Cannot find module 'webpack'

                              at Function.Module._resolveFilename
                              (module.js:325:15)

                              at Function.Module._load (module.js:276:25)

                              at Module.require (module.js:353:17)

                              at require (internal/module.js:12:17)

                              at Object.
                              (/Users/jane.doe/themes/cornerstone/stencil.conf.js:2:15)

                              at Module._compile (module.js:409:26)

                              at Object.Module._extensions..js
                              (module.js:416:10)

                              at Module.load (module.js:343:32)

                              at Function.Module._load (module.js:300:12)

                              at Module.require (module.js:353:17)

                              ```


                              switch to your theme directory and run `npm
                              install`. Running this command will add the
                              missing JavaScript library dependencies.


                              If you receive the same error again after running
                              `npm install`, you should completely uninstall and
                              reinstall both the Stencil framework and Node.js.


                              ### Uninstalling and Reinstalling Stencil CLI


                              If you encounter persistent problems in
                              initializing or starting Stencil, you have the
                              option of completely removing Stencil CLI and
                              doing a fresh reinstall. You would do so as
                              follows:


                              1. From your command line, issue the command:

                              `npm uninstall -g @bigcommerce/stencil-cli`


                              2. Navigate back to the Installing and Launching
                              Stencil section and repeat all installation steps
                              to reinstall dependencies and restore your theme,
                              according to your development scenario.
                          - type: callout
                            data:
                              title: Alternative Options
                              body: >-
                                A more-drastic measure is to **also** uninstall
                                and reinstall Stencil CLI's Node.js
                                prerequisites (along with uninstalling Stencil
                                CLI). We do not recommend this, as it might
                                disable other Node.js applications on your local
                                machine.
                              type: error
                    - title: Stencil CLI Options and Commands
                      route:
                        path: /stencil-cli-options-and-commands
                      data:
                        blocks:
                          - type: html
                            data: <h1>Stencil CLI Options and Commands</h1>
                          - type: html
                            data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#stencil_basic-cli\">Basic CLI Options and Commands</a></li>\n    <li><a href=\"#stencil_stencil-start\">Stencil Start Options</a></li>\n    <li><a href=\"#stencil_stencil-push\">Stencil Push Options</a></li>\n\t</ul>\n</div>"
                          - type: text
                            data: >
                              ## Basic CLI Options and Commands


                              The syntax to run a basic Stencil CLI command is:
                              stencil <commands> [options] <parameter>.


                              To see the basic options and commands that the
                              Stencil CLI package supports, enter any of the
                              following forms of the help option on your command
                              line:


                              `stencil <command> [option] <parameter>`


                              To see the basic options and commands that the
                              Stencil CLI package supports, enter any of the
                              following forms of the help option on your command
                              line:


                              ```

                              stencil

                              stencil help

                              stencil --help

                              stencil -h

                              ```


                              Your terminal window will display options and
                              commands listed in the tables below. 
                            header:
                              anchor: '#stencil_basic-cli'
                          - type: html
                            data: "<table>\n  <tr>\n    <th>Option</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>-h, --help</td>\n    <td>Outputs usage information.</td>\n  </tr>\n  <tr>\n    <td>-V, --version</td>\n    <td>Outputs the version number (which is read from package.json file</span>).</td>\n  </tr>\n</table>\n\n<p></p>\n<table>\n  <tr>\n    <th>Command</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>init</td>\n    <td >Interactively creates a .stencil file, which configures how to run a BigCommerce store locally.</td>\n  </tr>\n  <tr>\n    <td>start</td>\n    <td>Starts up the BigCommerce store, using theme files in the current directory. \n\n<b>Note:</b> If stencil start generates an \"Unauthorized, please use a valid username/token error: Please make sure that the .stencil file contains the correct store URL and (for OAuth) the correct URL prefix). Also, verify that you have copied the correct credentials, as outlined here. If you continue to get the same error, please reissue tokens, as outlined here.\n    </td>\n  </tr>\n \n  \n  <tr>\n    <td>bundle</td>\n    <td>Bundles up the theme into a structured .zip file, which can be uploaded to BigCommerce. (Please see restrictions here).</td>\n  </tr>\n  \n  <tr>\n    <td></a>push</td>\n    <td>Bundles up the theme into a structured .zip file; then directly uploads (pushes) the .zip to BigCommerce.(Please see</nobr> usage instructions here. The same restrictions apply as for the bundle command.)</td>\n  </tr>\n  \n  <tr>\n    <td>release</td>\n    <td>Creates a new release in a theme's GitHub repository. Developers outside BigCommerce can use this for forks (not master) of Stencil's Cornerstone base theme, or for their own parallel themes independent of Cornerstone.</td>\n  </tr>\n    \n  <tr>\n    <td>help &lt;command&gt;</td>\n    <td>return all the options available to use for the specified command. For example, <code>stencil help bundle</code> will return the options that are available to use specifically with the stencil bundle command.\t\n    </td>\n  </tr>  \n  \n</table>"
                          - type: image
                            data: >-
                              //s3.amazonaws.com/user-content.stoplight.io/6116/1538055264839
                            header:
                              title: Basic Stencil CLI Options and Commands
                          - type: callout
                            data:
                              title: '''stencil start'' and ''stencil push'' Options'
                              body: >-
                                The `stencil start` and `stencil push` CLI
                                Commands have additional custom options that can
                                be used with the command, which are detailed
                                below.
                          - type: text
                            data: >
                              ## Stencil Start Options


                              To see Stencil CLI's additional options for the
                              `stencil start` command (described above), enter
                              the following on your command line:


                              `stencil help start` 


                              Your terminal screen should read similar to the
                              image below.
                            header:
                              anchor: '#stencil_stencil-start'
                          - type: image
                            data: >-
                              //s3.amazonaws.com/user-content.stoplight.io/6116/1538029681278
                            config:
                              maxWidth: '1300'
                              maxHeight: '1300'
                          - type: text
                            data: >-
                              ## Stencil Push Options


                              To see Stencil CLI's additional options for the
                              stencil push command (described above), enter the
                              following on your command line:


                              `stencil help push`


                              Your terminal screen should read similar to the
                              image below.
                          - type: image
                            data: >-
                              //s3.amazonaws.com/user-content.stoplight.io/6116/1538055086025
                            config:
                              maxHeight: '800'
                              maxWidth: '800'
                          - type: text
                            data: >+
                              You can use the `-f` or `--filename` option in
                              cases where you have already run `stencil bundle`
                              to bundle your theme, but the resulting .zip file
                              has not yet uploaded to BigCommerce. Use the
                              generated .zip file's **filename** as a parameter
                              to identify the generated file in your theme
                              directory. An example of the command is outlined
                              below.


                              `stencil push -f Cornerstone-2.3.2.zip`


                              In this example, `Cornerstone-2.3.2.zip` is the
                              name of the file that was generated after running
                              `stencil bundle`.


                              When you run `stencil push` with the `-f` or
                              `--filename` option, Stencil CLI skips all its
                              bundling steps and diagnostics. It proceeds
                              directly to uploading the specified file,
                              displaying its processing progress bar to show
                              upload status.

                    - title: Cornerstone File Structure
                      route:
                        path: /cornerstone-file-structure
                      data:
                        blocks:
                          - type: html
                            data: <h1>Cornerstone File Structure</h1>
                          - type: html
                            data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#cornerstone_cornerstone-file-structure\">The Cornerstone Theme File Structure</a></li>\n\t</ul>\n</div>"
                          - type: text
                            data: >
                              ## The Cornerstone Theme File Structure


                              Cornerstone is the base Stencil theme, and it is
                              also the default theme for all newly initialized
                              local storefronts. Cornerstone provides the
                              standard file structure, base design pattern, and
                              default file assets necessary to start developing
                              a custom storefront experience.


                              The Cornerstone file structure consists of four
                              main subdirectories. Within those subdirectories,
                              you'll be directed to specific files in the
                              Development Quick Start tutorial and in Stencil
                              reference material:


                              ### `template/pages`

                              `templates/pages` contains all the base template
                              pages used in a BigCommerce online storefront. The
                              pages are grouped by page category. In order to
                              prevent any rendering errors, please avoid
                              changing page names. For details, please see
                              Templates Required Directory > Pages Subdirectory.



                              ### `template/components`

                              `templates/components` Components consist of code
                              snippets and partials that can be reused
                              throughout your theme. This directory is grouped
                              by component type. For details, please see
                              Templates Required Directory > Component
                              Subdirectory.


                              ### `template/layout`

                              `templates/layout` define the overall structure
                              (header, footer, etc.) for your storefront. You
                              can implement multiple layouts here, for different
                              use cases – to make it easy to switch between
                              different look-and-feel variations for the same
                              theme. For details, please see Templates Required
                              Directory > Layout Subdirectory.


                              ### `assets/`

                              `assets/` (images, CSS and JavaScript files) will
                              be located in this directory. For details, please
                              see CSS, JavaScript, and Design Resources.


                              ### `lang/`

                              `lang/` contains translation files, including the
                              required `en.json`. For details, please see the
                              Internationalization/Localization section of the
                              documentation.


                              When developing in your local environment, all
                              files that you change in your Stencil theme
                              directory (/cornerstone/ in our default
                              installation) will be reflected immediately at
                              [http://localhost:3000](http://localhost:3000).
                            header:
                              anchor: cornerstone_cornerstone-file-structure
                  blocks: []
              - title: Advanced Installation Options
                route:
                  path: /advanced-installation-options
                data:
                  blocks: []
                  children:
                    - title: Navigating Your Setup Scenario
                      route:
                        path: /navigating-your-setup-scenario
                      data:
                        blocks:
                          - type: html
                            data: <h1>Navigating Your Setup Scenario</h1>
                          - type: html
                            data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#navigating_illustration\">Illustration of Stencil's Setup Options</a></li>\n    <li><a href=\"#navigating_initial\">Intial Cornerstone Setup</a></li>\n    <li><a href=\"#navigating_cornerstone-refresh\">Cornerstone Refresh</a></li>\n    <li><a href=\"#navigating_download-marketplace\">Download a Marketplace Theme</a></li>\n    <li><a href=\"#navigating_implementing-custom-build\">Implementing a Custom Build System</a></li>\n    <li><a href=\"#navigating_blueprint-store\">Blueprint Store Launched Before January 26th, 2016</a></li>\n\t</ul>\n</div>"
                          - type: callout
                            data:
                              type: warning
                              title: Notes on Dependencies
                              body: >
                                Our installation instructions have been tested
                                on Mac OS X Yosemite, Linux/Ubuntu v.14.04.4,
                                and Windows. Dependencies for other
                                platforms/releases will be added upon further
                                testing.
                          - type: text
                            data: >-
                              ## Illustration of Stencil's Setup Options


                              The diagram below visually illustrates _all_
                              currently supported workflows for setting up a
                              Stencil theme. You will choose one pathway to
                              setup Stencil for your store. The color codes for
                              each setup scenario are as follows: 


                              * [Black arrows: Initial setup with the default
                              Cornerstone theme.](#navigating_initial)


                              * [Orange arrows: Refresh Cornerstone from Theme
                              Marketplace.](#navigating_cornerstone-refresh)


                              * [Purple arrows: Customize a theme (_other than_
                              Cornerstone) downloaded from Theme
                              Marketplace.](#navigating_download-marketplace)


                              * [Green arrows: Configure a custom JavaScript
                              build
                              system](#navigating_implementing-custom-build)


                              * [Blue arrows: Adds onto any of the preceding
                              four scenarios. If developing for a BigCommerce
                              Blueprint production store launched before Jan.
                              26, 2016, you must add one extra step to enable
                              Stencil in the store's control
                              panel.](#navigating_blueprint-store)
                            header:
                              anchor: navigating_illustration
                          - type: image
                            data: >-
                              //s3.amazonaws.com/user-content.stoplight.io/6116/1538540242143
                            config:
                              centered: true
                              fluid: true
                              bordered: true
                          - type: callout
                            data:
                              title: Detailed Steps Described Below
                              body: >-
                                Continue reading to get a detailed description
                                and breakdown of the steps required for each
                                setup scenario.
                          - type: text
                            data: "## Initial Cornerstone Setup \n\nThis is the workflow to start developing based on BigCommerce's default Cornerstone theme. This workflow uses Webpack as the JavaScript build system. Steps required:\n\n* Install your necessary prerequisites\n\t* [Mac OS Prerequisites](/stencil-docs/getting-started/installing-and-launching/mac-os-prerequisites)\n\t* [Linux Prerequisites](/stencil-docs/getting-started/installing-and-launching/linux-prerequisites)\n\t* [Windows Prerequisites](/stencil-docs/getting-started/installing-and-launching/windows-prerequisites)\n* [Install Stencil CLI](/stencil-docs/getting-started/installing-and-launching/installing-the-stencil-cli)\n* [Clone the Cornerstone theme using Github](/stencil-docs/getting-started/installing-and-launching/cloning-the-cornerstone-theme)\n* [Install JavaScript Utilities](stencil-docs/getting-started/installing-and-launching/installing-stencil-utils)\n* [Create an API Account to prepare store and tokens](stencil-docs/getting-started/installing-and-launching/creating-an-api-account)\n\n\nOnce you have completed these steps, proceed to the _Launching Stencil_ section."
                            header:
                              anchor: navigating_initial
                          - type: text
                            data: '---'
                          - type: text
                            data: "## Download and Install a New Version of Cornerstone \n\nIf you would like to download and install a **new** version of Cornerstone from BigCommerce's Theme Marketplace, perform the following steps:\n\n* Ensure all necessary prerequisites are installed\n\t* [Mac OS Prerequisites](/stencil-docs/getting-started/installing-and-launching/mac-os-prerequisites)\n\t* [Linux Prerequisites](/stencil-docs/getting-started/installing-and-launching/linux-prerequisites)\n\t* [Windows Prerequisites](/stencil-docs/getting-started/installing-and-launching/windows-prerequisites)\n* [Ensure Stencil CLI is installed](/stencil-docs/getting-started/installing-and-launching/installing-the-stencil-cli)\n* [Download a new Cornerstone .zip file](/stencil-docs/advanced-installation-options/downloading-cornerstone)\n* [Reinstall JavaScript Utilities](stencil-docs/getting-started/installing-and-launching/installing-stencil-utils)\n* Repeat steps in _Launching Stencil_"
                            header:
                              anchor: navigating_cornerstone
                          - type: text
                            data: '---'
                          - type: text
                            data: "## Download a Marketplace Theme \n\nIf you would like to customize a theme _other than_ Cornerstone, follow the required steps to download a theme from BigCommerce's Theme Marketplace. This workflow requires BitBucket. Some earlier theme versions will also require additional steps for the jspm JavaScript build system. Steps required:\n\n* Install all necessary prerequisites\n\t* [Mac OS Prerequisites](/stencil-docs/getting-started/installing-and-launching/mac-os-prerequisites)\n\t* [Linux Prerequisites](/stencil-docs/getting-started/installing-and-launching/linux-prerequisites)\n\t* [Windows Prerequisites](/stencil-docs/getting-started/installing-and-launching/windows-prerequisites)\n* [Install Stencil CLI](/stencil-docs/getting-started/installing-and-launching/installing-the-stencil-cli)\n* [Set up BitBucket and Download the Marketplace theme's .zip file](/stencil-docs/advanced-installation-options/downloading-a-marketplace-theme)\n* [Install JavaScript Utilities](stencil-docs/getting-started/installing-and-launching/installing-stencil-utils)\n* [Create an API Account to Prepare Your Store and Tokens](stencil-docs/getting-started/installing-and-launching/creating-an-api-account)\n* Complete the steps outlined in _Launching Stencil_"
                            header:
                              anchor: navigating_download-marketplace
                          - type: text
                            data: '---'
                          - type: text
                            data: "## Implement a Custom JavaScript Build System \n\nThe Stencil framework currently uses Webpack 4 as its default Javascript Build system (jspm for older versions), but if you prefer, you can substitute this for a custom JavaScript build system such as Grunt. Steps recommended:\n\n* Install all necessary prerequisites\n\t* [Mac OS Prerequisites](/stencil-docs/getting-started/installing-and-launching/mac-os-prerequisites)\n\t* [Linux Prerequisites](/stencil-docs/getting-started/installing-and-launching/linux-prerequisites)\n\t* [Windows Prerequisites](/stencil-docs/getting-started/installing-and-launching/windows-prerequisites)\n* [Install Stencil CLI](/stencil-docs/getting-started/installing-and-launching/installing-the-stencil-cli)\n* [Clone the Cornerstone theme using Github](/stencil-docs/getting-started/installing-and-launching/cloning-the-cornerstone-theme)\n* [Install JavaScript Utilities](stencil-docs/getting-started/installing-and-launching/installing-stencil-utils)\n* [Configure your custom build system](/stencil-docs/getting-started/installing-and-launching/configuring-webpack-or-custom-build)\n* [Create an API Account to Prepare Your Store and Tokens](stencil-docs/getting-started/installing-and-launching/creating-an-api-account)\n* Proceed to _Launching Stencil_"
                            header:
                              anchor: navigating_custom-build
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Blueprint Store Launched before January 26th,
                              2016


                              If your store is **both**:

                              * running on a Blueprint theme

                              * was launched before Jan. 26th, 2016 


                              and you would like to enable Stencil development
                              on it, you must perform the following steps:


                              * Follow the installation path above that
                              corresponds to your development scenario

                              * Enable Stencil in the store’s control panel
                            header:
                              anchor: navigating_blueprint-store
                    - title: Downloading the Cornerstone Theme
                      route:
                        path: /downloading-the-cornerstone-theme
                      data:
                        blocks:
                          - type: html
                            data: >-
                              <h1>Downloading the Cornerstone Theme from the
                              BigCommerce Control Panel</h1>
                          - type: html
                            data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#downloading_downloading-cornerstone-zip\">Downloading the Cornerstone .zip file</a></li>\n    <li><a href=\"#downloading_reinstalling-dependencies\">Reinstalling Dependencies and Relaunching</a></li>\n    <li><a href=\"#downloading_next-steps\">Next Steps</a></li>\n\t</ul>\n</div>"
                          - type: callout
                            data:
                              type: error
                              title: Back Up Before Reinstalling
                              body: >-
                                If you are reinstalling over a base theme on
                                which you have already begun development, first
                                back up at least your theme's .stencil file.
                                This file contains your store URL, your
                                BigCommerce username and access tokens, and
                                other basic settings. Preserving those settings
                                will speed up initializing and launching the new
                                version. To allow complete rollback, back up
                                your whole theme directory. (In a current
                                default installation, this directory is named
                                `cornerstone`. Prior to March 2017, this
                                directory's name defaulted to `stencil`).
                          - type: text
                            data: "## Downloading the Cornerstone .zip file from the Control Panel\n\n_If you have not yet added Cornerstone to your store, navigate to `Storefront` > `Themes Marketplace` and add the Cornerstone theme to your store._\n\nUse these steps to download a the Cornerstone theme from the store Control Panel: \n\n**Note:** The steps below are required only if you are downloading a refreshed copy of Stencil's default Cornerstone theme, specifically from the BigCommerce Theme Marketplace. \n\nIf you are downloading a Marketplace theme (other than Cornerstone) for customization, you must follow the workflow outlined in Downloading a Marketplace Themes.\n    \n* Go to `Storefront` -> `My Themes`.\n\n* Click the Cornerstone theme's thumbnail:\n\t* If Cornerstone is the store's currently active theme, click its image thumbnail at the top of the page, under the `Current Theme` heading.\n\t* If Cornerstone is _not_ the current theme, scroll down below the lower My Themes subheading, find, and click the Cornerstone thumbnail.\n\n_The Cornerstone theme's description should zoom to full-page and display a Theme Options drop-down list at the upper right._\n\n* From the `Theme Options` drop-down list, select `Download theme file` to download this Cornerstone release as it was refreshed on Theme Marketplace. \n\n* Unpack the zipped theme to a working directory. This can either be the directory where you have been developing your theme or a new directory.\n"
                            header:
                              anchor: '#downloading_downloading-cornerstone-zip'
                          - type: text
                            data: '---'
                          - type: text
                            data: >
                              ## Reinstalling Dependencies and Relaunching


                              * Ensure that your theme includes all current
                              dependencies by repeating the [Stencil Utils
                              installation.](stencil-docs/getting-started/installing-and-launching/installing-stencil-utils) 


                              * To relaunch, repeat the steps listed in the
                              _Launching Stencil_ section.
                            header:
                              anchor: '#downloading_reinstalling-dependencies'
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Next Steps


                              When you are ready to upload your custom theme to
                              a store, follow the instructions in Bundling and
                              Submitting a Theme and Troubleshooting Theme
                              Uploads.
                            header:
                              anchor: '#downloading_next-steps'
                          - type: callout
                            data:
                              body: >-
                                Distribution of Cornerstone-based themes is
                                subject to BigCommerce's Cornerstone license,
                                including the mandatory incorporation of
                                BigCommerce's copyright statement.
                              title: Distribution of Cornerstone-based Themes
                              type: error
                    - title: Downloading a Marketplace Theme
                      route:
                        path: /downloadining-a-marketplace-theme
                      data:
                        blocks:
                          - type: html
                            data: >-
                              <h1>Downloading a Marketplace Theme from the
                              BigCommerce Control Panel</h1>
                          - type: html
                            data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#downloading_setting-up-bitbucket\">Setting Up BitBucket SSH Keys</a></li>\n    <li><a href=\"#downloading_downloading-a-marketplace-theme\">Downloading a Marketplace Theme for Customization</a></li>\n    <li><a href=\"#downloading_checking-theme-version\">Checking the Theme's Version</a></li>\n    <li><a href=\"#downloading_jspm-steps\">jspm Steps for Earlier Versions</a></li>\n    <li><a href=\"#downloading_installing-modules\">Installing Modules (Webpack themes)</a></li>\n    <li><a href=\"#downloading_next-steps\">Next Steps</a></li>\n    </ul>\n</div>"
                          - type: callout
                            data:
                              body: >-
                                BitBucket registry access is required for all
                                Marketplace themes (excluding Cornerstone). jspm
                                Extra Steps (to enable jspm and jspm-git) are
                                required only for theme versions earlier than
                                v1.2.1, as outlined on this article.
                              title: BitBucket Registry Access
                              type: warning
                          - type: text
                            data: >+
                              ## Setting Up BitBucket SSH Keys


                              To set up Stencil CLI for themes other than
                              Cornerstone, you must authorize communication
                              among your local system, the BitBucket registry,
                              and GitHub.


                              **Note:** _Steps beyond this point require that
                              you have active accounts on both BitBucket and
                              GitHub._


                              To authorize ongoing communication, you must set
                              up a secure shell (SSH) key that is shared between
                              BitBucket and GitHub. This is a multi-step
                              process, which is beyond the scope of this
                              documentation. However, we have tested the
                              following instructions and found them to be
                              reliable:


                              * [Setting up SSH for Git on BitBucket](

                              https://confluence.atlassian.com/bitbucket/set-up-ssh-for-git-728138079.html)


                              _Follow the default instructions to create a key
                              in your `~/.ssh/config`_


                              * [Setting up SSH on GitHub (a series of linked
                              steps)](

                              https://help.github.com/articles/connecting-to-github-with-ssh/)

                          - type: callout
                            data:
                              body: >-
                                Marketplace themes other than Cornerstone must
                                be purchased in order to be downloadable.


                                You are entitled to customize a free or
                                purchased theme for a store that you support.
                                However, the theme's original creator retains
                                rights to that theme's design. So, except for
                                Cornerstone-based themes, you may not upload a
                                derived theme to a public theme marketplace
                                (whether BigCommerce's or third-party), nor sell
                                it privately.
                              title: ' Theme Access, Copyright/Ownership, and Distribution'
                          - type: text
                            data: "## Downloading a Marketplace Theme for Customization\n\nUse these steps to download a theme (other than Cornerstone) available in the store control panel's Storefront Design area. \n\n1. If you have not yet added the theme to your store, start at Storefront Design > Themes Marketplace, and add the theme.\n\n2. Go to Storefront Design > My Themes.\n\n3. Click the theme's thumbnail:\n\t \n\t* To download the store's currently active theme, click the image thumbnail at the top of the page, under the Current Theme heading.\n\t\n\t* To download an inactive theme, scroll down below the lower My Themes subheading, and click the appropriate theme's thumbnail.\n\nYour selected theme will zoom up to a full-page description and display a Theme Options drop-down list at the upper right.\n\n4. Note the version number displayed under the theme's title and credits. At Checking the Theme's Version below, you will use this number to choose between two installation flows.\n\n5. From the Theme Options drop-down list, select the appropriate Download option. (The options visible depend on your theme's current state:)\n\n\t* Download current theme: Download the theme version that is now active on the storefront. (This option appears only if you selected the Current Theme.)\n\n\t* Download your latest customizations: Download the theme's most recently saved version. (This option appears only for themes that have been customized for this store.)\n\n\t* Download theme file: Download the theme as it was originally uploaded to Theme Marketplace. \n\n6. Unpack the zipped theme to a working directory.\n(In the remainder of this documentation, substitute this working directory's name for the default `stencil` path or the `theme-name` placeholder.)"
                          - type: image
                            data: >-
                              //s3.amazonaws.com/user-content.stoplight.io/6116/1538543505088
                            header:
                              title: Theme Options
                              subtitle: 'Dropdown list options as related to step #5'
                            config:
                              centered: true
                              fluid: true
                              bordered: true
                              maxWidth: '300'
                              maxHeight: '300'
                          - type: callout
                            data:
                              body: >-
                                Some versions of the BigCommerce control panel
                                offer you shortcuts for steps 3–5 above,
                                removing the need to click the theme
                                card/thumbnail:


                                * For your store's currently active theme, look
                                for a version number to the right of the
                                thumbnail. You can select the Advanced drop-down
                                list to display options similar to those at step
                                5 above.


                                * For inactive themes, look for a version number
                                at the theme card's lower left. Also, you can
                                select the "..." menu at the theme card's lower
                                right to display options similar to those at
                                step 5 above.
                              title: Theme Download Shortcuts
                          - type: text
                            data: >
                              ## Checking the Theme's Version


                              Refer to the theme's version number that you noted
                              above at Downloading a Theme for Customization:


                              * If the version number is 1.10.0 or higher, the
                              theme uses Webpack as its JavaScript build system.
                              Skip ahead to the simplified installation
                              instructions in Installing Modules (Webpack
                              Themes).


                              * If the theme's version number is lower than
                              1.10.0, the theme uses jspm as its JavaScript
                              build system. Follow the steps outlined on [jspm
                              Steps for Earlier Versions]()
                          - type: callout
                            data:
                              body: >-
                                For version numbers below 1.10.0, consider using
                                the options within control panel > My Themes to
                                download a newer version of the same theme. This
                                will allow you to jump ahead to the streamlined
                                instructions below at Installing Modules
                                (Webpack Themes).


                                **Note**: These version numbers do not apply to
                                the Cornerstone theme. All currently supported
                                Cornerstone versions use Webpack, and can be
                                refreshed using the even simpler refresh
                                instructions in [Downloading the Cornerstone
                                Theme]().
                              title: Consider Updating Your Theme
                              type: warning
                          - type: text
                            data: |-
                              ## jspm Steps for Earlier Versions

                              link to legacy article
                          - type: text
                            data: >-
                              ## Installing Modules (Webpack themes)


                              For Marketplace themes whose version number is
                              1.10.0 or higher, simply use npm to install the
                              modules required to access Stencil JavaScript
                              events:


                              1. Navigate to your theme directory. This example
                              assumes that this target directory has the default
                              name Cornerstone:


                              `cd cornerstone`


                              2. Within that directory, install the
                              stencil-utils module to ensure that all your
                              dependencies are up to date:


                              `npm install`
                          - type: text
                            data: >
                              ## Next Steps


                              To authorize, initialize, and launch your theme,
                              follow the steps in the _Launching Stencil_
                              section.


                              Later, when you are ready to upload your
                              customized theme to a store, you should follow the
                              zipping and uploading instructions in Bundling and
                              Submitting a Theme and Troubleshooting Theme
                              Uploads.
                          - type: callout
                            data:
                              body: >-
                                When you issue the `stencil init` command to
                                authorize and initialize Stencil, you might
                                receive error messages about resolving BitBucket
                                as an SSH host. These errors occur when you have
                                not recently logged into BitBucket.


                                When prompted, enter the BitBucket password you
                                used in Setting Up BitBucket SSH Keys above.
                                This will clear the errors and allow you to
                                proceed.
                              type: warning
                              title: BitBucket Reauthentication
                    - title: Theme Updates and Version Control
                      route:
                        path: /theme-updates-and-version-control
                      data:
                        blocks:
                          - type: html
                            data: <h1>Theme Updates and Version Control</h1>
                          - type: html
                            data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#theme-updates_isolating\">Customizing Strategically for Easier Updates</a></li>\n    <li><a href=\"#theme-updates_synchronizing-cornerstone\">Synchronizing Your Theme With Cornerstone's Updates</a></li>\n    <li><a href=\"#theme-updates_synchronizing-multiple\">Synchronizing Updates for Multiple Themes</a></li>\n\t</ul>\n</div>"
                          - type: callout
                            data:
                              title: Distributed Version Control via Git
                              body: >-
                                Many techniques discussed below rely on GitHub's
                                _distributed version control_ model and
                                features. For the underlying principles, please
                                see [Git's own
                                documentation](https://git-scm.com/book/en/v2/Getting-Started-About-Version-Control).
                          - type: text
                            data: >-
                              ## Customizing Strategically for Easier Updates


                              In order to keep your store and Stencil theme
                              performant, it's crucial to know the best way to
                              set up your customized Stencil theme in order to
                              smoothly incorporate future bug fixes,
                              enhancements, and updates that are applied to the
                              base theme. 
                          - type: text
                            data: '---'
                          - type: text
                            data: "## GoRuck's Best Practices for Handling Theme Updates\n\nThe guidelines provided are from Web Developement team from the BigCommerce client, [GoRuck](https://www.goruck.com/). \n\nGoRuck's scenario addresses maintaining a single custom theme that is based on a third-party Marketplace theme (a theme other than Cornerstone). These guidelines can also apply to maintaining a custom theme based on Stencil's default Cornerstone theme.\n\n### Handling and Managing Theme Updates\n\n_We've made significant changes to our theme, and one principle that I've found successful is isolating my changes as much as possible. I try to put my changes into their own files, whether they're changes to templates, JavaScript, or SCSS._\n\n_I also name all my files, CSS classes and identifiers, and JavaScript methods and classes with a `gr-` prefix (as an abbreviation for our company, GORUCK LLC). Also, any changes I make to standard theme files are identified with a comment, such as:_\n\n`//Go Ruck Customization`\n\t\t\n_For example, I have a file in `assets/scss/` named `gr-theme.scss`. All of the styles I've added to the theme are either in this file, or imported by this file. So for styling, my only changes to the theme itself are in a handful of places where I had to change an existing theme style (identified with a comment), plus this one line in `templates/layout/base.html`:_\n\n`{{{stylesheet '/assets/css/gr-theme.css'}}}`\n\n_I've found that this approach provides several advantages:_\n\n* It makes it easier to distinguish my custom code from code supplied by the default theme.\n* It makes it less likely that my code will get intermingled with the standard theme code. This, in turn, prevents my code from unexpectedly being affected by theme updates.\n* It makes it easier to merge base-theme updates into my theme code.\n\n### Comparing and Merging Theme Updates\n\n_Having isolated my changes as much as I can, I identify theme changes and updates by comparing base themes, rather than by comparing base themes to my customized theme. When a new version of the theme is released, I download the .zip file from the BigCommerce Control Panel._\n\n_I then use a desktop diff tool (Beyond Compare) to \ncompare the new version to the .zip file of the theme's previous release. I ignore changes in the .zip file's\n `meta/` and `parsed/` folders, and to its `manifest.json`, and do a `Compare Contents` on the rest of the files._\n\nUltimately, I need to examine the changes carefully, to identify any changes that might affect, or be affected by, my customizations. And I need to test thoroughly. But comparing the stock themes to each other reduces the number of changes I have to examine. \n\nAlso, because I isolate my changes, most of the theme changes can be copied directly into the corresponding file in my customized theme. In practice, this means that I can limit my testing to the areas affected by changes in the standard theme, rather than having to re-test all my own changes.\n\nI personally find that it is also helpful to migrate *every* theme update into my customized version, as the update is released. If I were to wait, and to allow changes to accumulate and become more substantial, I think it would be more difficult to adequately test – and correctly integrate – the changes. Similarly, I'm grateful to the developer of our base theme (Pixel Union) for updates that have always made small, incremental changes.\n\n### Dynamic Content Injection\n\n_We've also come up with a variety of techniques for dynamically placing content on a page. For example, we can dynamically add tabs to a product page, using content stored on our WebDAV. Similarly, we can inject content from an external file into the body of a page. This allows us to put something that appears in many places, like a sizing chart, in a single place where it can be easily updated._\n\n_Or, we can use the BigCommerce control panel's various HTML editors – for Products, Categories, and Content > Web Pages – to inject content into predefined \"dropzones\" (custom div's). This allows us to generate a wide variety of content pages using a single custom template._\n\nAll of these techniques minimize the complexity of merging base-theme updates into our customized theme. For further details and examples on how we implement these techniques, see [Dynamic Content Rendering on Stencil Storefronts]()."
                          - type: text
                            data: '---'
                          - type: text
                            data: >+
                              ## Synchronizing Your Theme With Cornerstone's
                              Updates


                              This section addresses two methods that will allow
                              you to keep your customized Stencil theme up to
                              date with Cornerstone's updates, enhancements, and
                              bug fixes


                              Updating Lightly Customized Themes

                              Updating Heavily Customized Themes


                              We've adapted these tips from a Stencil
                              developer's titled Stencil Version Control Best
                              Practices? on the BigCommerce Community forums.


                              ### Updating Lightly Customized Themes


                              In this scenario, you can use Git's cherry-pick
                              option to merge in specific Cornerstone commits.


                              Use the Stencil Framework Release Notes to look up
                              specific updates' commit hashes on the Cornerstone
                              repository.


                              See this Stack Overflow explanation of how to use
                              the cherry-pick option.


                              ### Updating Highly Customized Themes


                              Here, unexpected errors from automatic merges can
                              be time-consuming to undo. So, consider this
                              handtooled approach:


                              Use GitHub's Web interface to inspect each
                              Cornerstone commit (change) of interest. Each
                              commit will show you – for all changed files – a
                              diff view highlighting any deletions (left/red)
                              and any insertions (right/green).


                              For changes that you want to incorporate into your
                              theme, access the source code.


                              As illustrated below, you can either access
                              individual files via Github's Raw view, or you can
                              download a .zip of the whole Cornerstone repo in
                              order to access all files locally.


                              Manually edit the changes into your theme's
                              affected files.


                              ### Accessing Individual Files


                              In the file-by-file approach: For each commit that
                              you would like to incorporate into your custom
                              theme, do the following for each of the commit's
                              changed files.


                              In GitHub's diff view, click the View button at
                              the upper right. (We show it highlighted with a
                              red border and a tooltip.) You will see the file's
                              full contents, as shown below.


                              Click the Raw button at the upper right (which we
                              show highlighted in red). This will reveal the
                              file's full contents as plaintext – allowing you
                              to copy and paste without picking up the table
                              metadata used to display line numbering.


                              ### Downloading the Cornerstone Repository


                              This approach downloads all theme files at once,
                              allowing you to copy/paste their relevant contents
                              locally.


                              1. Navigate to the [Cornerstone Github
                              Repository](https://github.com/bigcommerce/cornerstone).

                              2. On the right hand side of the page, click the
                              green `Clone or download` button, and select
                              Download ZIP.



                    - title: Configuring Webpack or a Custom Build System
                      route:
                        path: /configuring-webpack-or-custom-build
                      data:
                        blocks:
                          - type: html
                            data: >-
                              <h1>Configuring Webpack or a Custom Build
                              System</h1>
                          - type: html
                            data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#configuring_webpack-jspm-other\">Webpack, jspm, or Other JavaScript Managers</a></li>\n    <li><a href=\"#configuring_webpack-specific\">Webpack-Specific Configuration</a></li>\n    <li><a href=\"#configuring_downloaded\">Build-System Configuration File</a></li>\n    <li><a href=\"#configuring_custom-build\">Watched Folders: watchOptions Object</a></li>\n    <li><a href=\"#configuring_blueprint-store\">JavaScript Rebundling: development Function</a></li>\n    <li><a href=\"#configuring_blueprint-store\">Theme Packaging: production Function</a></li>\n\t</ul>\n</div>\n\n\n\n\n"
                          - type: text
                            data: >-
                              ## Webpack, jspm, or Other JavaScript Managers


                              Stencil themes are Node.js applications, and
                              therefore contain dependencies on other JavaScript
                              libraries. For the default Cornerstone theme, we
                              provide the
                              [Webpack](https://webpack.github.io/docs/) build
                              manager to handle these dependencies. 


                              As you develop and customize a theme based on
                              Cornerstone, you have option to reconfigure
                              Webpack's watched folders, and to even substitute
                              a different build system. These options are
                              explained below.


                              All themes in the BigCommerce Theme Marketplace
                              use Webpack. However, older versions of certain
                              themes used the jspm JavaScript dependency manager
                              instead of Webpack. Please see this page to
                              determine (by version number) whether you are
                              developing based on one of these earlier versions,
                              and to find the required jspm setup procedures.
                          - type: callout
                            data:
                              type: info
                              body: >-
                                The steps below are required only if you plan to
                                modify or override the default Webpack-based
                                workflow that installs with Stencil's default
                                Cornerstone theme or and current theme in the
                                BigCommerce Theme Marketplace. If you do not
                                require these advanced configuration options,
                                you can safely skip this page.
                              title: Optional Workflow
                          - type: text
                            data: >-
                              ## Webpack-Specific Javascript Diagnostics


                              The following Webpack configuration options can
                              aid in troubleshooting.


                              If JavaScript errors in your browser's developer
                              tools are not reporting filenames and line
                              numbers, try changing your `webpack.conf.js`
                              file's
                              [sourcemap](https://webpack.js.org/guides/build-performance/#devtool)
                              entry from:


                              ```

                              devtool: 'source-map'

                              ```

                              to:


                              ```

                              devtool: 'eval-source-map'

                              ```


                              The `eval-source-map` option is slower, but more
                              verbose. This [Webpack Devtool
                              Configuration](https://webpack.js.org/configuration/devtool/)
                              article provides an overview of all devtool
                              options and details regarding each.
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Build-System Configuration File


                              To take advantage of automatic JavaScript bundling
                              and browser refresh, Stencil themes require the
                              [`stencil.conf.js`](https://github.com/bigcommerce/cornerstone/blob/master/stencil.conf.js)
                              file. If you would like to enable a custom build
                              system, you will need to edit this file.


                              Within `stencil.conf.js`, Stencil CLI looks for
                              the exported `watchOptions` object, and
                              `development` and `production` callbacks, shown
                              below. 


                              Continue reading to take a closer look at each of
                              these three references.
                          - type: text
                            data: >-
                              ## Watched Folders: watchOptions Object


                              The `watchOptions` object defines directories for
                              the [Browsersync](https://browsersync.io/docs)
                              preview engine to watch or ignore, in two
                              respective lists. You are free to edit these
                              lists:


                              ```

                              var watchOptions = {
                                  // If files in these directories change, reload the page.
                                  files: [
                                      '/templates',
                                      '/lang'
                                  ],

                                  //Do not watch files in these directories
                                   ignored: [
                                      '/assets/scss',
                                      '/assets/less',
                                      '/assets/css',
                                      '/assets/dist',
                                  ]
                              };

                              ```
                          - type: text
                            data: >-
                              ### JavaScript Rebundling: `development` Function


                              Upon the command-line instruction `stencil start`,
                              Stencil CLI will look for and call the
                              `development` function. 


                              In the base Cornerstone theme, we have created a
                              Webpack watcher to trigger a browser reload
                              whenever theme edits cause JavaScript to be
                              rebundled to the theme's `bundle.js` file. This
                              watcher uses options configured in the
                              `webpack.conf.js` file passed by `webpackConfig`.
                              So a JavaScript rebuild will refresh the browser:


                              ```

                              function development() {
                                  webpack(webpackConfig).watch({}, err => {
                                      if (err) {
                                          console.error(err.message, err.details);
                                      }

                                      process.send('reload');
                                  });
                              }

                              ```
                          - type: text
                            data: >-
                              ## Theme Packaging: `production` Function 


                              When you issue the command-line instruction
                              `stencil bundle`, to process and package a
                              completed theme for upload to a store, Stencil CLI
                              will look for and call the `production` function.
                              This function passes a callback as its first
                              argument to support asynchronous builds. 


                              The callback must be invoked somewhere inside the
                              `production` function to notify Stencil CLI that
                              the theme-specific build has completed and is
                              ready to package:


                              ```

                              function production() {
                                  webpackConfig.watch = false;
                                  webpackConfig.devtool = false;
                                  webpackConfig.plugins.push(new webpack.LoaderOptionsPlugin({
                                      minimize: true,
                                  }));
                                  webpackConfig.plugins.push(new webpack.optimize.UglifyJsPlugin({
                                      comments: false,
                                      compress: {
                                          warnings: true,
                                      },
                                      sourceMap: false, // Toggle to turn on source maps.
                                  }));

                                  webpack(webpackConfig).run(err => {
                                      if (err) {
                                          console.error(err.message, err.details);
                                          throw err;
                                      }

                                      process.send('done');
                                  });
                              }


                              if (process.send) {
                                  // running as a forked worker
                                  process.on('message', message => {
                                      if (message === 'development') {
                                          development();
                                      }

                                      if (message === 'production') {
                                          production();
                                      }
                                  });

                                  process.send('ready');
                              }

                              ```
            blocks: []
        - title: Theme Development Quickstart
          route:
            path: /development-quickstart
          data:
            children:
              - title: Configuring Your Custom Theme
                route:
                  path: /new-subpage-4
                data:
                  blocks:
                    - type: html
                      data: <h1>Configuring Your Custom Theme</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#configuring_before\">Before You Begin</a></li>\n\t\t<li><a href=\"#configuring_config-json\">Configuring config.json Keys</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >-
                        ## Before You Begin


                        Before you begin developing on your Stencil theme, note
                        that you may decide to either:


                        * directly modify the theme that you installed when
                        completing the steps in _Getting Started_

                        * create a **copy** of the theme you installed in
                        _Getting Started_ and develop on the copy, leaving the
                        original installed theme in its default state. This
                        allows you to retain a local copy of the default theme.
                      header:
                        anchor: configuring_before
                    - type: callout
                      data:
                        type: warning
                        body: >-
                          If you decide to copy your theme's directory
                          structure, you must reissue both the `stencil init`
                          and `stencil start` command-line instructions from
                          **inside** your newly created directory.
                        title: Reissue Stencil Commands
                    - type: text
                      data: "## Configuring config.json Keys\n\n**Note:** these instructions will refer to the top-level theme directory as _cornerstone_.\n\nThe first thing you must do when beginning theme developement is configure certain values in the [cornerstone/config.json file](https://github.com/bigcommerce/cornerstone/blob/master/config.json). For example, here are the first few key/value sets in Cornerstone's config.json:\n\n```\n{\n\"name\": \"Cornerstone\",\n\"version\": \"1.0.0\",\n\"meta\": {\n  \"price\": 0,\n   \"documentation_url\": \t\t\n   \"https://support.bigcommerce.com/articles/Public/Cornerstone-\n   \tTheme-Manual\",\n  ...\n  }\n}\n```\n\nFor further details about config.json settings and a breakdown of each key/value set, please see the [in-depth config.json reference](). \n\nThe next code block shows how you might change these values to reflect your own theme’s name, version number, price on Theme Marketplace, and documentation URL:\n\n```\n{\n\"name\": \"MyTheme\",\n\"version\": \"1.1.2\",\n\"meta\": {\n  \"price\": 10000,\n  \"documentation_url\": \"https://www.mywebsite.com/theme-docs/my-theme.html\",\n  ...\n  }\n}\n```"
                      header:
                        anchor: configuring_config-json
                  children: []
              - title: config.json Resource Interactions
                route:
                  path: /config-json-resource-interactions
                data:
                  blocks:
                    - type: html
                      data: <h1><code>config.json</code> Interactions</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"\">New Products Example</a></li>\n    <li><a href=\"\">Changing Page Layout using Local Front Matter</a></li>\n    <li><a href=\"\">Retrieving Specific config.json Values through Sass</a></li>\n    <li><a href=\"\">Adding/Removing Components</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: '## New Products Example'
                    - type: text
                      data: '## Changing Page Layout Using Local Front Matter'
                    - type: text
                      data: '## Retrieving Specific config.json Values through Sass'
                    - type: text
                      data: '## Adding/Removing Components'
              - title: config.json Metadata
                route:
                  path: /config-json-metadata
                data:
                  blocks:
                    - type: html
                      data: <h1><code>config.json</code> Metadata</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#config_choosing\">Choosing a Development Path</a></li>\n\t\t<li><a href=\"#config_front-matter\">Front-Matter Quick Start</a></li>\n    <li><a href=\"#front-matter-quick-start\">Handlebars Quick Start</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >
                        ## config.json Reference


                        Below is a table of all the the key/value pairs in the
                        config.json file with example values included for
                        reference.
                    - type: html
                      data: "<table>\n  <tr>\n    <th>Property</th>\n    <th>Format</th>\n    <th>Default/Examples</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>name</td>\n    <td>String</td>\n    <td>\"Stencil\"</td>\n    <td>Theme’s name, as it will appear in the Theme Marketplace.<br><br>\n\n(<b>Note:</b> Theme names should be composed of only the following characters: a-z, A-Z, 0-9, hyphen.)</td>\n  </tr>\n  <tr>\n    <td>version</td>\n    <td><a href=\"http://semver.org/\">SemVer</a></td>\n    <td>\"1.0.0\"</td>\n    <td>Theme’s version number, formatted as <span class=\"inline-code\">major.minor.patch</span>.</td>\n  </tr>\n  <tr>\n    <td><a name=\"config-theme-meta\"></a>meta</td>\n    <td class=\"\">Object</td>\n    <td class=\"\"></td>\n    <td class=\"\">BigCommerce will use this metadata to list themes in Theme Marketplace.<br><br>\n      \n(Theme variations also have their <a href=\"#config-var-meta\">own metadata collections</a>.)</td>\n  </tr>\n  <tr>\n    <td class=\"\">         <span class=\"indent1\">price</span></td>\n    <td class=\"\">Number</td>\n    <td class=\"\">15000</td>\n    <td class=\"\">Price, in cents, to purchase this theme in Theme Marketplace.</td>\n  </tr>\n\n  <tr>\n    <td class=\"\">    <span class=\"indent1\">documentation_url</span></td>\n    <td class=\"\">String</td>\n    <td class=\"\">\"https://support.bigcommerce.com/articles/Public/Cornerstone-Theme-Manual\"</td>\n    <td class=\"\">URL of theme developer’s documentation site.<br><br>\n\n(<b>Note: For a successful theme upload to BigCommerce, this key is required to have a value.</b>)</td>\n  </tr>\n  \n  <tr>\n    <td class=\"\">    <span class=\"indent1\">author_name</span></td>\n    <td class=\"\">String</td>\n    <td class=\"\">\"eCommerce Themes, Inc.\"</td>\n    <td class=\"\">Name of the developer or partner creating the theme.<br><br>\n\n(<b>Note: For a successful theme upload to BigCommerce, this key is required to have a value.</b>)</td>\n  </tr>\n  \n  <tr>\n    <td class=\"\">    <span class=\"indent1\">author_email</span></td>\n    <td class=\"\">String</td>\n    <td class=\"\">\"support@example.com\"</td>\n    <td class=\"\">Contact/support email address for the developer or partner creating the theme.<br><br>\n\n(<b>Note: For a successful theme upload to BigCommerce, this key is required to have a value.</b>)</td>\n  </tr>\n  \n  <tr>\n    <td class=\"\">    <span class=\"indent1\">author_support_url</span></td>\n    <td class=\"\">String</td>\n    <td class=\"\">\"http://example.com/contactus\"</td>\n    <td class=\"\">Contact form/support URL for the developer or partner creating the theme.<br><br>\n\n(<b>Note: For a successful theme upload to BigCommerce, this key is required to have a value.</b>)</td>\n  </tr>    \n  \n  <tr>\n    <td class=\"\"><span class=\"indent1\">composed_image</span></td>\n    <td class=\"\">String</td>\n    <td class=\"\">\"composed_image.png\"</td>\n    <td class=\"\">File name for a composed/mosaic screenshot of all variations of the theme, to appear on the \"My Themes\" page of purchased themes.<br><br>\n\nThe file-name value is arbitrary, but it must match the name of a file located in the <span class=\"inline-code\">&lt;theme‑name&gt;/meta/</span> subdirectory.\n\nThe actual file’s resolution must be 600 x 760 pixels (horizontal x vertical).</td>\n  </tr>\n  <tr>\n    <td class=\"\"> <span class=\"indent1\" id=\"features\">features</span></td>\n    <td class=\"\">Array</td>\n    <td class=\"\">[<NOBR>\"fully_responsive\"</nobr>, <NOBR>\"mega_navigation\"</nobr>, <NOBR>\"multi_tiered_sidebar_menu\"</nobr>, <NOBR>\"masonry_design\"</nobr>, <NOBR>\"frontpage_slideshow\"</nobr>, <NOBR>\"quick_add_to_cart\"</nobr>, <NOBR>\"switchable_product_view\"</nobr>, <NOBR>\"product_comparison_table\"</nobr>, <NOBR>\"complex_search_filtering\"</nobr>, <NOBR>\"customizable_product_selector\"</nobr>, <NOBR>\"cart_suggested_products\"</nobr>, <NOBR>\"free_customer_support\"</nobr>, <NOBR>\"free_theme_upgrades\"</nobr>, <NOBR>\"high_res_product_images\"</nobr>, <NOBR>\"product_filtering\"</nobr>, <NOBR>\"advanced_quick_view\"</nobr>, <NOBR>\"product_showcase\"</nobr>, <NOBR>\"persistent_cart\"</nobr>, <NOBR>\"one_page_check_out\"</nobr>, <NOBR>\"customized_check_out\"</nobr>, <NOBR>\"product_videos\"</nobr>]</td>\n    <td class=\"\">Array of exact feature names supported in this theme. <NOBR>The \"Default/Examples\"</nobr> column lists the complete namespace. At least one of the values listed there must be present. <br><br>\n\nThese values are used as metadata for <NOBR>Theme Marketplace</nobr> searches. <br><br> \n      The <span class=\"inline-code\">\"customized_check_out\"</span> value has a second function: It must be present if you want to enable <a href=\"https://support.bigcommerce.com/articles/Public/Optimized-Single-Page-Checkout\" target=\"_blank\">Optimized One-Page Checkout</a> for your theme.</td>\n  </tr>\n  <tr>\n    <td class=\"\">css_compiler</td>\n    <td class=\"\">String</td>\n    <td class=\"\">\"scss\"</td>\n    <td class=\"\">CSS preprocessor; defaults to SCSS.</td>\n  </tr>\n  <tr>\n    <td class=\"\">autoprefixer_cascade</td>\n    <td class=\"\">Boolean</td>\n    <td class=\"\">true</td>\n    <td class=\"\">Whether to enable the Autoprefixer CSS postprocessor, to add vendor prefixes to CSS rules.</td>\n  </tr>\n  <tr>\n    <td class=\"\">autoprefixer_browsers</td>\n    <td class=\"\">Array</td>\n    <td class=\"\">[\"last 3 versions\"]</td>\n    <td class=\"\">Which legacy browsers <a href=\"https://github.com/postcss/autoprefixer\">Autoprefixer</a> should support, specified in <a href=\"https://github.com/ai/browserslist\">Browserslist</a> query format.</td>\n  </tr>\n  \n<!-- jspm object removed here:\n\t<tr>\n    <td class=\"\">jspm</td>\n    <td class=\"\">Object</td>\n    <td class=\"\"></td>\n    <td class=\"\">Configuration options for optional <a href=\"http://jspm.io/\">jspm</a> JavaScript transpiler/package manager.</td>\n  </tr>\n  <tr>\n    <td class=\"\">         <span class=\"indent1\">dev</span></td>\n    <td class=\"\">Object</td>\n    <td class=\"\"></td>\n    <td class=\"\">Specifies development rules.</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\">&nbsp; &nbsp; &nbsp; dep_location</span></td>\n    <td class=\"\">String</td>\n    <td class=\"\">\"assets/js/dependency-bundle.js\"</td>\n    <td class=\"\">Specifies <span class=\"inline-code\">.../assets/...</span> path to a bundle combining all vendors’ JS modules. jspm can preload this for faster page loads in development mode.</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\">&nbsp; &nbsp; &nbsp;  bootstrap</span></td>\n    <td class=\"\">String</td>\n    <td class=\"\">\"js/app\"</td>\n    <td class=\"\">Path to the <span class=\"inline-code\">app.js</span> bootstrap file – relative to the <span class=\"inline-code\">...&lt;theme‑name&gt;/assets/</span> directory, and omitting the file’s <span class=\"inline-code\">.js</span> extension.</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\">&nbsp; &nbsp; &nbsp; bundle_location</span></td>\n    <td class=\"\">String</td>\n    <td class=\"\">\"assets/js/bundle.js\"</td>\n    <td class=\"\">Running the jspm bundle will minify/mangle all your JavaScript into this one file, which you point to in production. (Specify the path relative to your theme’s top-level directory.)</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\">&nbsp; &nbsp; &nbsp; jspm_packages_path</span></td>\n    <td class=\"\">String</td>\n    <td class=\"\">\"assets/jspm_packages\"</td>\n    <td class=\"\">Path where jspm installs its packages. (Specify the path relative to your theme’s top-level directory.)</td>\n  </tr> \n :jspm object removed here -->\n  \n  <tr>\n    <td class=\"\"><a name=\"config-theme-settings\"></a>settings</td>\n    <td class=\"\"></td>\n    <td class=\"\"></td>\n    <td class=\"\">Display-oriented key names, and values, that you can arbitrarily set for your theme. Handlebars accesses the combined settings as the context variable <span class=\"inline-code\">{{theme_settings}}</span>.<br><br>\n      \nVariations also have their <a href=\"#config-var-settings\">own </a> <span class=\"inline-code\">settings</span> sections. Values that you set at the variation level will override global values that you set here (for corresponding key names, and within the scope of that variation).<br><br>\n\nIf you want to create a custom variable to use in Handlebars, either add it here within this theme-level <span class=\"inline-code\">settings</span> section, or add it down in a <a href=\"#config-var-settings\">variation-level</a> <span class=\"inline-code\">settings</span> section.<br><br>\n\nYou would access your arbitrarily named custom variable in Handlebars as <span class=\"inline-code\">{{theme_settings.&lt;variablename&gt;}}</span>.\n\nHere is an example of a custom variable in the default theme’s <span class=\"inline-code\">config.json</span>:<br><br>\n\n<span class=\"inline-code\">\"settings\": { \"homepage_featured_products_count\": 6,\n}</span><br><br>\n\nHere is the corresponding front matter in <span class=\"inline-code\">home.html</span> that calls this variable. (Note that this is pure YAML – the <span class=\"inline-code\">{{...}}</span> used to reference <span class=\"inline-code\">config.json</span> variables within pages’ front matter do not constitute a Handlebars statement:)<br><br>\n\n<pre>\n---\nproducts:\n  featured:\n      limit: {{theme_settings.homepage_featured_products_count}}\n---\n</pre></td>\n  </tr>\n  \n  <tr>\n    <td class=\"\"><span class=\"indent1\">homepage_new_products_count</span></td>\n    <td class=\"\">Number</td>\n    <td class=\"\">12</td>\n    <td class=\"\">Number of products to include in home page’s New Products section.</td>\n  </tr>\n  \n  <tr>\n    <td class=\"\"><NOBR><span class=\"indent1\">homepage_&lt;section-name&gt;_count,</span></nobr><br> <NOBR><span class=\"indent1\">homepage_&lt;section-name&gt;_column_count</span></nobr></td>\n    <td class=\"\">Number</td>\n    <td class=\"\">[Varies]</td>\n    <td class=\"\">Number of products, or columns, to include in the specified home-page section.</td>\n  </tr>\n  \n  <tr>\n    <td class=\"\"><NOBR><span class=\"indent1\">productpage_&lt;section-name&gt;_count</span></nobr></td>\n    <td class=\"\">Number</td>\n    <td class=\"\">[Varies]</td>\n    <td class=\"\">Number of products to include in the specified section of product-details pages.</td>\n  </tr>\n  \n  <tr>\n    <td class=\"\"><NOBR><span class=\"indent1\">categorypage_products_per_page,</span></nobr><br> <NOBR><span class=\"indent1\">brandpage_products_per_page,</span></nobr><br> <NOBR><span class=\"indent1\">searchpage_products_per_page</span></nobr></td>\n    <td class=\"\">Number</td>\n    <td class=\"\">12</td>\n    <td class=\"\">Number of products to include on each specified page type.</td>\n  </tr>\n  \n\t<tr>\n    <td class=\"\"> <span class=\"indent1\">homepage_show_carousel</span></td>\n    <td class=\"\">Boolean</td>\n    <td class=\"\">true</td>\n    <td class=\"\">Defines whether to display an image carousel on the home page.</td>\n  </tr>  \n\n\t<tr>\n    <td class=\"\"> <span class=\"indent1\">show_product_quick_view</span></td>\n    <td class=\"\">Boolean</td>\n    <td class=\"\">true</td>\n    <td class=\"\">Defines whether to offer customers product Quick View modal windows.</td>\n  </tr>  \n\n\t<tr>\n    <td class=\"\"> <span class=\"indent1\">show_powered_by</span></td>\n    <td class=\"\">Boolean</td>\n    <td class=\"\">true</td>\n    <td class=\"\">Defines whether to display a \"Powered by BigCommerce\" credit in the sitewide footer.</td>\n  </tr>  \n  \n\t<tr>\n    <td class=\"\"> <span class=\"indent1\"><NOBR>show_accept_amex,</nobr></span><br>\n      <span class=\"indent1\"><NOBR>show_accept_visa,</nobr></span><br> <span class=\"indent1\">etc.</span>\n    </td>\n    <td class=\"\">Boolean</td>\n    <td class=\"\">false</td>\n    <td class=\"\">Each of these keys displays or hides a payment-method icon in the sitewide footer. The icons respectively identify credit-card issuers, PayPal, etc. If these keys are defined in <a href=\"/docs/schemajson-metadata-for-theme-editor\">schema.json</a>, merchants can use the <a href=\"/docs/what-is-theme-editor\">Theme Editor</a> GUI to toggle each payment icon's visibility.</td>\n  </tr>\n  \n  <tr>\n    <td class=\"\"><span class=\"indent1\">product_list_display_mode</span></td>\n    <td class=\"\">String</td>\n    <td class=\"\">\"grid\"</td>\n    <td class=\"\">Default display mode for product lists. A <span class=\"inline-code\">\"grid\"</span> value specifies grid format. Other entries trigger list format.</td>\n  </tr>\n   \n  <tr>\n    <td class=\"\"><span class=\"indent1\">logo-position</span></td>\n    <td class=\"\">String</td>\n    <td class=\"\">\"center\", \"left\", \"right\"</td>\n    <td class=\"\">Sets (horizontal) display alignment for store logo throughout the theme.</td>\n  </tr>\n \n<!-- Begin images section/intro: -->\n  <tr>\n    <td class=\"\"> <span class=\"indent1\"> <a name=\"config-images\"></a> [images]</td>\n    <td colspan=\"3\">\n    The following keys' values define storewide dimensions for named sizes. The <span class=\"inline-code\">{{getImage}}</span> Handlebars helper can use member keys’ values to dynamically resize any images, up to a maximum target size of 4096x4096 pixels.<br><br>\n    \n<!--The <span class=\"inline-code\">_images</span> key name is reserved. Child key--> Key names like <span class=\"inline-code\">\"logo_size\"</span> and <span class=\"inline-code\">\"thumb_size\"</span> are arbitrary.<br><br>\n\nFor example, this Handlebars expression:<br>\n\n<span class=\"inline-code\">{{getImage product.image \"thumb_size\"}}</span><br><br>\n\n...will output the path to a 100x100-pixel image (assuming the <span class=\"inline-code\">\"thumb_size\"</span> key retains its default value of <span class=\"inline-code\">\"100x100\"</span>).<br><br>\n\nBy defining or redefining these named sizes' values, in the format outlined below, you can automatically replicate the new sizes throughout your theme.</td>\n  </tr>\n  <!-- :End images intro: -->\n  \n  <tr>\n    <td class=\"\"><span class=\"indent1\">logo_size</span></td>\n    <td class=\"\">String</td>\n    <td class=\"\">250x100</td>\n    <td class=\"\">Key/value pair defining global (storewide) display dimensions for the store logo. The value is a string defining the width and height &ndash; in that order &ndash; in pixels.</td>\n  </tr>\n  \n  <tr>\n    <td class=\"\"><span class=\"indent1\">gallery_size</span></td>\n    <td class=\"\">String</td>\n    <td class=\"\">300x300</td>\n    <td class=\"\">Key/value pair defining storewide display dimensions for blog images (also available for other uses).</td>\n  </tr>\n\n  <tr>\n    <td class=\"\"><span class=\"indent1\">productgallery_size</span></td>\n    <td class=\"\">String</td>\n    <td class=\"\">300x300</td>\n    <td class=\"\">Key/value pair defining storewide display dimensions for product-gallery images.</td>\n  </tr>\n\n  <tr>\n    <td class=\"\"><span class=\"indent1\">product_size</span></td>\n    <td class=\"\">String</td>\n    <td class=\"\">500x659</td>\n    <td class=\"\">Key/value pair defining storewide display dimensions for standard/medium-sized product images.</td>\n  </tr>\n  \n  <tr>\n    <td class=\"\"><span class=\"indent1\">productthumb_size</span></td>\n    <td class=\"\">String</td>\n    <td class=\"\">100x100</td>\n    <td class=\"\">Key/value pair defining storewide display dimensions for product-image thumbnails on the product details page.</td>\n  </tr>\n\n  <tr>\n    <td class=\"\"><span class=\"indent1\">thumb_size</span></td>\n    <td class=\"\">String</td>\n    <td class=\"\">100x100</td>\n    <td class=\"\">Key/value pair defining storewide display dimensions for swatches, and for brand and category thumbnails.</td>\n  </tr>\n  \n  <tr>\n    <td class=\"\"><span class=\"indent1\">zoom_size</span></td>\n    <td class=\"\">String</td>\n    <td class=\"\">1280x1280</td>\n    <td class=\"\">Key/value pair defining storewide display dimensions for zoomable product images on the product details page.</td>\n  </tr>\n<!-- :End images section-->\n\n<!-- Begin image URLs section: -->    \n  <tr>\n    <td class=\"\"><span class=\"indent1\">product_list_display_mode</span></td>\n    <td class=\"\">String</td>\n    <td class=\"\">\"grid\"</td>\n    <td class=\"\">Default display mode for product lists. A <span class=\"inline-code\">\"grid\"</span> value specifies grid format. Other entries trigger list format.</td>\n  </tr>\n\n  <tr>\n    <td class=\"\"> <span class=\"indent1\"> default_image_brand</td>\n    <td class=\"\">String</td>\n    <td class=\"\">/assets/img/BrandDefault.gif</td>\n    <td class=\"\">Relative path to a default image representing brands.</td>\n  </tr>\n\n  <tr>\n    <td class=\"\"> <span class=\"indent1\"> default_image_product</td>\n    <td class=\"\">String</td>\n    <td class=\"\">/assets/img/ProductDefault.gif</td>\n    <td class=\"\">Relative path to a default image representing products.</td>\n  </tr>\n\n  <tr>\n    <td class=\"\"> <span class=\"indent1\"> default_image_gift_certificate</td>\n    <td class=\"\">String</td>\n    <td class=\"\">/assets/img/GiftCertificate.png</td>\n    <td class=\"\">Relative path to a default image representing gift certificates.</td>\n  </tr>\n<!-- :End image URLs section -->    \n  \n<!-- Begin fonts section: -->\n  <tr>\n    <td class=\"\">         <a name=\"config-json-fonts\"></a><span class=\"indent1\">body-font</span></td>\n    <td class=\"\">String</td>\n    <td class=\"\">\"Google_Karla_400\"</td>\n    <td class=\"\">Font-family keys, with corresponding values.\nKeys are named by display purpose, and keys' names should end in <span class=\"inline-code\">-font</span>. But naming is otherwise arbitrary. So you can freely define additional font families for your theme.<br>\n\n      <p></p>Values should follow the format:<br> \n<pre>&lt;ProviderName&gt;_&lt;Font+FamilyName&gt;\n    _&lt;OptionalWeightNumber&gt;\n</pre>\n\n<!--      <span class=\"inline-code\">&lt;ProviderName&gt;_&lt;Font+FamilyName&gt;_&lt;OptionalWeightNumber&gt;</span><br><br> -->\n\nAs in this example:<br>\n      <pre>Google_Open+Sans_700</pre>\n\n<!--      <span class=\"inline-code\">Google_Open+Sans_700</span><br><br> -->\n\n      ...which specifies <span class=\"inline-code\">Google Fonts</span> as the Provider, <span class=\"inline-code\">Open Sans</span> as the Font Family, and <span class=\"inline-code\">800</span> as the (optional) Weight attribute.<br><br>\n\n(<b>Note:</b> The Provider &ndash; also called \"Foundry\" &ndash; is currently limited to Google Fonts.)<br><br>\n      \nStencil’s <a href=\"/docs/custom-sass-functions#FontFamily\">custom Sass functions</a> can process these keys’ values. E.g., to <span class=\"inline-code\">stencilFontFamily</span>, you could pass the (arbitrary) key name <span class=\"inline-code\">\"body-font\"</span>, and the function would process the value.<br><br>\n      \nNote that Sass requires explicit typing of inputs and outputs – e.g., <span class=\"inline-code\">stencilNumber</span> defaults to pixels – so you must specify any other units. Thus, for a<br><p></p>\n\n      <pre>\"font‑size\" = 3</pre>\n      <p></p>\n\n<!--      <span class=\"indent1\"><span class=\"inline-code\">\"font‑size\" = 3</span></span><br> -->\n\n...this statement:<br><p></p>\n\n    <pre>stencilNumber(\"font-size\",\"rem\")\n    * 3</pre><p></p>\n\n<!--    <span class=\"indent1\"><span class=\"inline-code\">stencilNumber(\"font-size\",\"rem\")</span></span><br>   \n    <span class=\"indent1\"><span class=\"inline-code\">* 3</span></span><br> -->\n\n...will output:<br><p></p>\n\n    <pre>9rem</pre>\n    <p></p>\n\n<!--    <span class=\"indent1\"><span class=\"inline-code\">9rem</span></span><br><br> -->\n\n      (<b>Note:</b> To enable merchants to customize your themes' fonts via <NOBR>Theme Editor</nobr>, we recommend that you rely on Google Fonts, with no more than 25 typefaces per theme.)</td>\n  </tr>\n  <tr>\n    <td class=\"\">         <span class=\"indent1\">headings-font</span></td>\n    <td class=\"\">String</td>\n    <td class=\"\">\"Google_Montserrat_400\"</td>\n    <td class=\"\">Arbitrary key name, and value, for a font family and (optional) weight that can be applied to headings.</td>\n  </tr>\n  <tr>\n    <td class=\"\">         <span class=\"indent1\">logo-font</span></td>\n    <td class=\"\">String</td>\n    <td class=\"\">\"Google_Oswald_300\"</td>\n    <td class=\"\">Arbitrary key name, and value, for a font family and (optional) weight for logo text.</td>\n  </tr>\n  \n  <tr>\n    <td class=\"\">         <span class=\"indent1\"><NOBR>fontSize-root,</nobr></span><br> <span class=\"indent1\"><NOBR>fontSize-h1</nobr>..</span><NOBR>fontSize-h6,</nobr><br> <span class=\"indent1\">etc.</span> </td>\n    <td class=\"\">Number</td>\n    <td class=\"\">14</td>\n    <td class=\"\">Font-size keys, with corresponding values.<br><br>\n      \nThese keys' values provide defaults for options selectable in the Theme Editor GUI. Also, Stencil’s <a href=\"#CustomSassFn\">custom Sass functions</a> can process these values.<br><br> \n      \n      Here again, these keys are named by display purpose, but arbitrarily. So you can freely define additional font sizes for your theme.</td>\n  </tr>\n\n  <!--\n  <tr>\n    <td class=\"\">         <span class=\"indent1\">fontFamily-serif</span></td>\n    <td class=\"\">Integer[? Number?]</td>\n    <td class=\"\">\"Georgia, serif\"</td>\n    <td class=\"\">\"</td>\n  </tr>\n  <tr>\n    <td class=\"\">         <span class=\"indent1\">fontFamily-mono</span></td>\n    <td class=\"\">String</td>\n    <td class=\"\">\"Menlo, monospace\"</td>\n    <td class=\"\">\"</td>\n  </tr>\n  <tr>\n    <td class=\"\">         <span class=\"indent1\">fontFamily-headings</span></td>\n    <td class=\"\">String</td>\n    <td class=\"\">\"Montserrat, sans-serif\"</td>\n    <td class=\"\">\"</td>\n  </tr>\n  <tr>\n    <td class=\"\">         <span class=\"indent1\">fontFamily-hero</span></td>\n    <td class=\"\">String</td>\n    <td class=\"\">\"Oswald, sans-serif\"</td>\n    <td class=\"\">\"</td>\n  </tr>\n-->\n<!-- :End fonts section -->\n  \n  \n<!--Begin colors section:-->  \n  <tr>\n    <td class=\"\">\n      <span class=\"indent1\"><NOBR>color-textBase</nobr></span>\n    </td>\n    <td class=\"\">String</td>\n    <td class=\"\">\"#4f4f4f\"</td>\n    <td class=\"\">Color definitions, with corresponding hex values. These keys' values provide defaults for options selectable in the Theme Editor GUI.<br><br> \n      \n      Also, Stencil’s <a href=\"#CustomSassFn\">custom Sass functions</a> can process these values. E.g., to <span class=\"inline-code\">stencilColor</span>, you could pass the key name <span class=\"inline-code\">\"color-textBase\"</span>, and the function would return the <span class=\"inline-code\">\"#4f4f4f\"</span> value defined here.<br><br>\n      \n      The keys are named by display purpose &ndash; defining consistent colors for various parts of the theme in different states. But the keys are also named arbitrarily. So you can freely name and define new color keys for your theme.<br><br> \n      \n      (<b>Note:</b> Only a subset of the default <span class=\"inline-code\">config.json</span> file’s color definitions are listed here.) </td>\n  </tr>\n\n  <tr>\n    <td class=\"\">   <span class=\"indent1\"><NOBR>color-textBase--hover,</nobr></span> <span class=\"indent1\"><NOBR>color-textBase--active,</nobr></span><br> <span class=\"indent1\">..</span><br> <span class=\"indent1\"><NOBR>color-textLink--active,</nobr></span><br> <span class=\"indent1\"><NOBR>color-textHeading,</nobr></span><br> <span class=\"indent1\">etc.</span></td>\n    <td class=\"\">String</td>\n    <td class=\"\">[Varies]</td>\n    <td class=\"\">\"</td>\n  </tr>\n\n  <tr>\n    <td class=\"\">   <span class=\"indent1\">color-primary</span></td>\n    <td class=\"\">String</td>\n    <td class=\"\">\"#4f4f4f\"</td>\n    <td class=\"\">\"</td>\n  </tr>\n  \n  <tr>\n    <td class=\"\">         <span class=\"indent1\">color-primaryDark</span></td>\n    <td class=\"\">String</td>\n    <td class=\"\">\"#454545\"</td>\n    <td class=\"\">\"</td>\n  </tr>\n  <tr>\n    <td class=\"\">         <span class=\"indent1\">color-primaryDarker</span></td>\n    <td class=\"\">String</td>\n    <td class=\"\">\"#2d2d2d\"</td>\n    <td class=\"\">\"</td>\n  </tr>\n  <tr>\n    <td class=\"\">         <span class=\"indent1\">color-primaryLight</span></td>\n    <td class=\"\">String</td>\n    <td class=\"\">\"#a5a5a5\"</td>\n    <td class=\"\">\"</td>\n  </tr>\n  <tr>\n    <td class=\"\">         <span class=\"indent1\">color-secondary</span></td>\n    <td class=\"\">String</td>\n    <td class=\"\">\"#ffffff\"</td>\n    <td class=\"\">\"</td>\n  </tr>\n  <tr>\n    <td class=\"\">         <span class=\"indent1\">color-secondaryDark</span></td>\n    <td class=\"\">String</td>\n    <td class=\"\">\"#f2f2f2\"</td>\n    <td class=\"\">\"</td>\n  </tr>\n  <tr>\n    <td class=\"\">         <span class=\"indent1\">color-secondaryDarker</span></td>\n    <td class=\"\">String</td>\n    <td class=\"\">\"#f2f2f2\"</td>\n    <td class=\"\">\"</td>\n  </tr>\n<!-- :End colors section -->\n\n<!-- Begin Optimized checkout subsection/intro: -->\n  <tr>\n    <td class=\"\"> <span class=\"indent1\"> <a name=\"config-uco\"></a> [Optimized Checkout]</td>\n    <td colspan=\"3\">\n    The following are examples of keys that define default style properties for the Optimized Checkout page. Each key/value pair here corresponds to a class in the <span class=\"inline-code\">&lt;theme‑name&gt;/assets/scss/optimized-checkout.scss</span> file.\n\t</td>\n  </tr>\n  <!-- :End Optimized Checkout intro. -->\n  \n  <tr>\n    <td class=\"\"><span class=\"indent1\">optimizedCheckout-header-backgroundColor</span></td>\n    <td class=\"\">String</td>\n    <td class=\"\">#f7f7f7</td>\n    <td class=\"\">Key/value pair defining default background color for the Optimized Checkout page's header.</td>\n  </tr>\n  \n  <tr>\n    <td class=\"\"><span class=\"indent1\">optimizedCheckout-show-backgroundImage</span></td>\n    <td class=\"\">Boolean</td>\n    <td class=\"\">false</td>\n    <td class=\"\">Key/value pair defining whether to display a background image on the Optimized Checkout page.</td>\n  </tr>\n\n  <tr>\n    <td class=\"\"><span class=\"indent1\">optimizedCheckout-backgroundImage</span></td>\n    <td class=\"\">String</td>\n    <td class=\"\"> &ndash; </td>\n    <td class=\"\">Key/value pair containing file name of background image for the Optimized Checkout page.</td>\n  </tr>\n\n  <tr>\n    <td class=\"\"><span class=\"indent1\">optimizedCheckout-backgroundImage-size</span></td>\n    <td class=\"\">String</td>\n    <td class=\"\">1000x400</td>\n    <td class=\"\">Key/value pair defining display size for background image on the Optimized Checkout page.</td>\n  </tr>\n\n  <tr>\n    <td class=\"\"><span class=\"indent1\">optimizedCheckout-show-logo</span></td>\n    <td class=\"\">enum</td>\n    <td class=\"\">none</td>\n    <td class=\"\">Key/value pair defining whether to show logo on the Optimized Checkout page.</td>\n  </tr>\n\n  <tr>\n    <td class=\"\"><span class=\"indent1\">optimizedCheckout-logo</span></td>\n    <td class=\"\">String</td>\n    <td class=\"\"> &ndash; </td>\n    <td class=\"\">Key/value pair containing file name of background image for the Optimized Checkout page.</td>\n  </tr>\n\n  <tr>\n    <td class=\"\"><span class=\"indent1\">[...]</span></td>\n    <td class=\"\">[...]</td>\n    <td class=\"\"> [...] </td>\n    <td class=\"\">[...]<br> \n      (Multiple similar key/value pairs. For a more-complete list of the classes available, please see <a href=\"/docs/optimized-checkout-customization\">Optimized One-Page Checkout Customization</a>.)</td>\n  </tr>\n<!-- :end Optimized checkout subsection -->  \n\n<!-- Begin read-only subsection-->\n  <tr>\n    <td class=\"\"><span class=\"indent1\" id=\"readonly\">read_only_files</span></td>\n    <td class=\"\">String array</td>\n    <td class=\"\"> \"/assets/scss/components/citadel\",<br> \"/assets/scss/components/foundation\",<br> \"/assets/scss/components/vendor\",<br> \"/assets/scss/vendor\",<br> \"/assets/scss/settings/citadel\",<br> \"/assets/scss/settings/foundation\",<br> \"/assets/scss/settings/vendor\",<br> \"/assets/scss/settings/normalize\" </td>\n    <td class=\"\">Files and paths specified in this array will be viewable in the <a href=\"/docs/what-is-theme-editor\">Theme Editor</a> GUI, but not editable. Add any theme files/paths that you want to make read-only for store administrators using that editor.</td>\n  </tr>\n<!-- :end read-only subsection -->\n  \n<!-- Begin resources: section -->\n  <tr>\n    <td class=\"\">resources</td>\n    <td class=\"\"></td>\n    <td class=\"\"></td>\n    <td class=\"\">Global resources, inherited by all pages located directly within your <span class=\"inline-code\">&lt;theme‑name&gt;/templates/pages/</span> <a href=\"#Pages-Subdir\">subdirectory</a>.<br><br>\n\n(This inheritance spares you from having to define them in front matter on every page. Here, the resources are defined in JSON rather than YAML format.)<br><br>\n\nYou are free to add more global resources here – for example: <span class=\"inline-code\">\"brands\": true</span> to display a brands list; or\n<span class=\"inline-code\">\"blog\": \"posts\": \"limit\": 3</span> to display the top 3 blog posts. For syntax, see <a href=\"/docs/front-matter-variables#Front-ref-global\">Front-Matter Global Attributes</a>.</td>\n  </tr>\n  <tr>\n    <td class=\"\">         <span class=\"indent1\">cart</span></td>\n    <td class=\"\">Boolean</td>\n    <td class=\"\">true</td>\n    <td class=\"\">Defines whether to retrieve/display cart data <!--to display a shopping-cart icon/link--> in pages' chrome.</td>\n  </tr>\n  <tr>\n    <td class=\"\">         <span class=\"indent1\">shop_by_brand</span></td>\n    <td class=\"\">Boolean</td>\n    <td class=\"\">true</td>\n    <td class=\"\">Defines whether to include a quick-navigation list of brands in the footer. Adding this optional filter defines how many brands to load:<br>\n        <span class=\"inline-code\">limit: &lt;number&gt;</span></td>\n  </tr>\n    \n  <tr>\n    <td class=\"\"><a name=\"config-variations\"></a>variations</td>\n    <td class=\"\">Object</td>\n    <td class=\"\"></td>\n    <td class=\"\">Collection of variation objects. Each contained object defines one variation on this overall theme. (A theme must contain at least one variation, and may contain up to four.)</td>\n  </tr>\n  <tr>\n    <td class=\"\">         <span class=\"indent1\">name</span></td>\n    <td class=\"\">String</td>\n    <td class=\"\">\"Light\", \"Bold\",\"Warm\" (etc.)</td>\n    <td class=\"\">An arbitrary name for this variation. This name is used in the Themes Marketplace and Theme Editor.</td>\n  </tr>\n  <tr>\n    <td class=\"\">         <span class=\"indent1\">id</span></td>\n    <td class=\"\">String</td>\n    <td class=\"\">\"light\", \"bold\", \"warm\" (etc.)</td>\n    <td class=\"\">A string ID for this variation. Arbitrarily named, but must be unique to this variation.\nThe Stencil framework’s database uses this unique ID to identify and process updates to variations.<br><br> \n\nWhen you submit an updated version of your theme to BigCommerce, IDs and settings for previously submitted variations must match those in previous submissions of your theme. You may add, but not remove, variations and settings in such resubmissions. You may rename variations for clarity.\n</td>\n  </tr>\n  <tr>\n    <td class=\"\">         <span class=\"indent1\"><a name=\"config-var-settings\"></a>settings</span></td>\n    <td class=\"\"></td>\n    <td class=\"\"></td>\n    <td class=\"\">Variation-level counterpart to this theme’s <a href=\"#config-theme-settings\">theme-level</a> <span class=\"inline-code\">\"settings\"</span> object.<br><br>\n\nValues that you set here will override <a href=\"#config-theme-settings\">theme-wide</a> values for corresponding key names,  within the scope of this variation.<br><br>\n\nYou can also create custom variables here, whose scope will be limited to this variation. Syntax is the same as for <a href=\"#config-theme-settings\">theme-wide</a> custom variables.</td>\n  </tr>\n  <tr>\n    <td class=\"\">         <span class=\"indent1\"><a name=\"config-var-meta\"></a>meta</span></td>\n    <td class=\"\">Object</td>\n    <td class=\"\"></td>\n    <td class=\"\">Variation-level counterpart to this theme’s <a href=\"#config-theme-meta\">top-level</a> <span class=\"inline-code\">\"meta\"</span> collection.\nBigCommerce will similarly use this collection’s values when listing themes in Theme Marketplace and Theme Editor.</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent2\"> \"desktop_screenshot\"</span></td>\n    <td class=\"\">String</td>\n    <td class=\"\">\"desktop_screenshot.png\"</td>\n    <td class=\"\">File name for a screenshot of this variation’s large-format layout.\nThe key name is fixed. The file-name value is arbitrary, but it must match the name of a file located in the <span class=\"inline-code\">&lt;theme‑name&gt;/meta/</span> subdirectory. <NOBR>(If you</nobr> are updating a variation, be sure to match this value to the intended file name.) The screenshot’s required dimensions are 2048 x 2600 pixels.</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent2\"> \"mobile_screenshot\"</span></td>\n    <td class=\"\">String</td>\n    <td class=\"\">\"mobile_screenshot.png\",</td>\n    <td class=\"\">File name for a screenshot of this variation’s mobile-format layout.\nThe key name is fixed. The file-name value is arbitrary, but it must match the name of a file located in the <span class=\"inline-code\">&lt;theme‑name&gt;/meta/</span> subdirectory. <NOBR>(If you</nobr> are updating a variation, be sure to match this value to the intended file name.) The screenshot’s required dimensions are 304 x 540 pixels.</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent2\"> \"description\" </span></td>\n    <td class=\"\">String</td>\n    <td class=\"\">\"This is the light style of the Stencil Theme\"</td>\n    <td class=\"\">Arbitrary text description for this variation. This description will appear in Themes Marketplace and <NOBR>Theme Editor.</nobr></td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent2\"> \"demo_url\"</span></td>\n    <td class=\"\">String</td>\n    <td class=\"\">\"https://stencil-light.mybigcommerce.com\"</td>\n    <td class=\"\">URL of your demo store, as set up on bigcommerce.com.</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent2\"> \"optimized_for”</span></td>\n    <td class=\"\">Array</td>\n    <td class=\"\">[<NOBR>\"arts_crafts\",</nobr> <NOBR>\"animals_pets\",</nobr> <NOBR>\"automotive_industrial\",</nobr> <NOBR>\"electronics_computers\",</nobr> <NOBR>\"fashion_jewelry\",</nobr> <NOBR>\"food_beverage\",</nobr> <NOBR>\"gifts_specialty\",</nobr> <NOBR>\"health_beauty\",</nobr> <NOBR>\"home_garden\",</nobr> <NOBR>\"books_entertainment\",</nobr> <NOBR>\"sports_recreation\",</nobr> <NOBR>\"toys_games\",</nobr> <NOBR>\"multi_purpose\",</nobr> <NOBR>\"chrome_firefox_safari_ie_10\",</nobr> <NOBR>\"mobile_tablet_desktop\",</nobr> <NOBR>\"sales_discounts\",</nobr> <NOBR>\"wholesale\",</nobr> <NOBR>\"single_product\",</nobr> <NOBR>\"large_catalog\",</nobr> <NOBR>\"mobile\",</nobr> <NOBR>\"clothing\",</nobr> <NOBR>\"cosmetics\",</nobr> <NOBR>\"home_appliances\",</nobr> <NOBR>\"home_furnishings\",</nobr> <NOBR>\"movies\",</nobr> <NOBR>\"music\",</nobr> <NOBR>\"digital_downloads\",</nobr> <NOBR>\"outdoor_sports\",</nobr> <NOBR>\"hunting_fishing\",</nobr> <NOBR>\"video_games\"]</nobr></td>\n    <td class=\"\">Array of metadata for Theme Marketplace searches &ndash; exact names of storefront types compatible with this theme. <NOBR>The \"Default/Examples\"</nobr> column lists the complete namespace. At least one of the values listed there must be present.</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent2\"> “industries\"</span></td>\n    <td class=\"\">Array</td>\n    <td class=\"\">[<NOBR>\"arts_crafts\",</nobr> <NOBR>\"animals_pets\",</nobr> <NOBR>\"automotive_industrial\",</nobr> <NOBR>\"electronics_computers\",</nobr> <NOBR>\"fashion_jewelry\",</nobr> <NOBR>\"food_beverage\",</nobr> <NOBR>\"gifts_specialty\",</nobr> <NOBR>\"health_beauty\",</nobr> <NOBR>\"home_garden\",</nobr> <NOBR>\"books_entertainment\",</nobr> <NOBR>\"sports_recreation\",</nobr> <NOBR>\"toys_games\"]</nobr></td>\n    <td class=\"\">Array of optional metadata for <NOBR>Theme Marketplace,</nobr> where these values will be used to support faceted searches. You may submit up to four values from the complete namespace listed in the \"Default/Examples\"</nobr> column.</td>\n  </tr>\n</table>"
              - title: Editing Your Theme
                route:
                  path: /editing-your-theme
                data:
                  blocks:
                    - type: html
                      data: <h1>Editing Your Theme's Template Files</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#editing_editing-video\">Editing Your Theme: Video Demo</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >-
                        <iframe width="560" height="315"
                        src="https://www.youtube.com/embed/9Rk4qWgia5Y"
                        frameborder="0" allow="autoplay; encrypted-media"
                        allowfullscreen></iframe>
                      header:
                        anchor: editing_editing-video
              - title: Making Basic Design and Layout Changes
                route:
                  path: /new-subpage-3
                data:
                  blocks:
                    - type: html
                      data: <h1>Making Basic Design and Layout Changes</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#choosing-dev-path\"> Choosing a Development Path</a></li>\n\t\t<li><a href=\"#front-matter-quick-start\">Front-Matter Quick Start</a></li>\n    <li><a href=\"#front-matter-quick-start\">Handlebars Quick Start</a></li>\n\t</ul>\n</div>"
              - title: Customizing Javascript
                route:
                  path: /new-subpage-1
                data:
                  blocks:
                    - type: html
                      data: <h1>Hello World!</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#choosing-dev-path\"> Choosing a Development Path</a></li>\n\t\t<li><a href=\"#front-matter-quick-start\">Front-Matter Quick Start</a></li>\n    <li><a href=\"#front-matter-quick-start\">Handlebars Quick Start</a></li>\n\t</ul>\n</div>"
              - title: Rendering HTML with Ajax
                route:
                  path: /new-subpage
                data:
                  blocks:
                    - type: html
                      data: <h1>Rendering HTML with Ajax</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#choosing-dev-path\"> Choosing a Development Path</a></li>\n\t\t<li><a href=\"#front-matter-quick-start\">Front-Matter Quick Start</a></li>\n    <li><a href=\"#front-matter-quick-start\">Handlebars Quick Start</a></li>\n\t</ul>\n</div>"
              - title: Testing and Debugging Your Theme
                route:
                  path: /new-subpage
                data:
                  blocks:
                    - type: html
                      data: <h1>HTesting and Debugging Your Theme</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#choosing-dev-path\"> Choosing a Development Path</a></li>\n\t\t<li><a href=\"#front-matter-quick-start\">Front-Matter Quick Start</a></li>\n    <li><a href=\"#front-matter-quick-start\">Handlebars Quick Start</a></li>\n\t</ul>\n</div>"
              - title: Managing Theme Variations
                route:
                  path: /new-subpage
                data:
                  blocks:
                    - type: html
                      data: <h1>Managing Theme Variations</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#choosing-dev-path\"> Choosing a Development Path</a></li>\n\t\t<li><a href=\"#front-matter-quick-start\">Front-Matter Quick Start</a></li>\n    <li><a href=\"#front-matter-quick-start\">Handlebars Quick Start</a></li>\n\t</ul>\n</div>"
        - title: Editing Your Theme's Template Files
          route:
            path: /templates-directory
          data:
            children:
              - title: Templates Directory Overview
                route:
                  path: /templates-directory-overview
                data:
                  children:
                    - title: Components Subdirectory
                      route:
                        path: /new-subpage-3
                      data: {}
                    - title: Layout Subdirectory
                      route:
                        path: /new-subpage-2
                      data: {}
                    - title: Pages Subdirectory
                      route:
                        path: /new-subpage-1
                      data: {}
                    - title: Stencil with Disqus
                      route:
                        path: /new-subpage
                      data: {}
              - title: Custom Templates
                route:
                  path: /components-and-compilation
                data:
                  children:
                    - title: 'Authoring, Testing, and Uploading Custom Templates'
                      route:
                        path: /new-subpage-2
                      data: {}
                    - title: Assigning Templates to Pages
                      route:
                        path: /new-subpage-1
                      data: {}
                    - title: Switching Themes with Custom Templates
                      route:
                        path: /new-subpage
                      data: {}
                    - title: Theme Updates with  Custom Templates
                      route:
                        path: /new-subpage
                      data: {}
                    - title: Limitations on Custom Templates
                      route:
                        path: /new-subpage-3
                      data: {}
              - title: Stencil Checkout
                route:
                  path: /new-subpage
                data:
                  children:
                    - title: Preparing Stencil for Optimized One-Page Checkout
                      route:
                        path: /new-subpage
                      data: {}
                    - title: Optimized One Page Checkout
                      route:
                        path: /new-subpage
                      data: {}
                    - title: Currency Conversion
                      route:
                        path: /new-subpage
                      data: {}
                    - title: Multi Language Checkout
                      route:
                        path: /new-subpage
                      data: {}
                    - title: Checkout/Confirmation Injection Options
                      route:
                        path: /new-subpage-1
                      data: {}
                    - title: Implement a Custom Checkout with React
                      route:
                        path: /implement-a-custom-checkout
                      data:
                        blocks:
                          - type: html
                            data: >-
                              <h1>Implementing a Custom React.js Checkout to
                              Cornerstone using the BigCommerce Checkout
                              SDK</h1>
                          - type: html
                            data: "<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"implement_tutorial-overview\">Tutorial Overview</a></li>\n    <li><a href=\"implement_steps\">Steps to Implement a Custom React Checkout</a></li>\n    <li><a href=\"implement_additional\">Additional Resources</a></li>\t\n</ul>\n</div>\n"
                          - type: text
                            data: >-
                              ## Tutorial Overview


                              This tutorial will take you through the steps to
                              implement a custom checkout built with React to
                              the Cornerstone Theme. The checkout will utilize
                              BigCommerce's Checkout SDK. This tutorial assumes
                              Cornerstone 2.4.0 as a starting point.
                            header:
                              anchor: implement_tutorial-overview
                          - type: callout
                            data:
                              type: error
                              body: >-
                                Please note that the provided checkout example
                                is a good starting and reference point, but is
                                **NOT production ready**. You should **not** use
                                this custom checkout in production as it stands.
                              title: Checkout Example NOT production ready!
                          - type: text
                            data: >-
                              ## Steps to Implement a Custom React Checkout in
                              Cornerstone


                              ### Tutorial Prerequisites


                              Before beginning this tutorial, you will need to
                              have the Stencil CLI installed.


                              If you do not yet have Stencil CLI installed,
                              complete the steps in [Installing the Stencil
                              CLI](stencil-docs/getting-started/installing-and-launching/installing-the-stencil-cli).


                              ### Install Dependencies


                              The React app used to demonstrate the Checkout SDK
                              has a few additional dependencies.

                              In your theme directory (e.g.
                              /stencil/cornerstone), run the following command:


                              `npm install --save react react-dom
                              react-text-mask classnames accounting
                              babel-preset-react css-loader node-sass
                              sass-loader style-loader
                              @bigcommerce/checkout-sdk`



                              ### Update webpack.common.js


                              The React app includes .jsx files which will not
                              be resolved using the default webpack
                              configuration in Cornerstone. Additionally,
                              loaders must be registered for .jsx and .scss
                              files.


                              **Note:** _Cornerstone 2.0 and above uses Webpack
                              4 which does **not** use a `webpack.conf.js` file
                              like earlier Webpack versions. Instead, we will
                              modify `webpack.common.js`._


                              #### Register .jsx and .scss loaders


                              In webpack.common.js, add the following objects to
                              the `rules` array:


                              ```

                              {
                                test: /\.jsx$/,
                                exclude: /node_modules/,
                                use: {
                                    loader: "babel-loader",
                                    options: {
                                        presets: ['react'],
                                    },
                                }
                              },


                              {
                                test: /\.scss$/,
                                use:  [
                                    'style-loader',
                                    {
                                        loader: 'css-loader',
                                        options: {
                                            modules: true
                                        }
                                    },
                                    'sass-loader'
                                ],
                              },

                              ```


                              Next, in webpack.common.js, add the following
                              property to the `resolve` object:



                              `extensions: ['.js', '.jsx']`



                              ### Add React Checkout Components to Theme


                              1. Clone or download BigCommerce's [Checkout SDK
                              JS
                              Example](https://github.com/bigcommerce/checkout-sdk-js-example)
                              **outside** of your theme directory


                              `git clone
                              git@github.com:bigcommerce/checkout-sdk-js-example.git`


                              2. In your theme directory, navigate to
                              `/assets/js/` and create a `checkout-app`
                              directory (i.e. `/assets/js/checkout-app`)


                              3. Copy the contents of
                              `/checkout-sdk-js-example/src` into your new
                              `/assets/js/checkout-app` directory 



                              ### Import Dependencies


                              Edit `/assets/js/app.js` and add the following
                              lines toward the beginning with the other import
                              statements:


                              ```

                              import React from 'react';

                              import ReactDOM from 'react-dom';

                              import Checkout from
                              './checkout-app/Checkout/checkout';

                              ```


                              ### Define a Function to Initialize React


                              Edit `/assets/js/app.js` and add the following
                              lines to the end:


                              ```

                              window.initReact = function initReact() {
                                  ReactDOM.render(
                                      React.createElement(Checkout, null, null),
                                      document.getElementById('checkout-app')
                                  );
                              };

                              ```


                              ### Customize the Checkout Template


                              1. Edit `/templates/pages/checkout.html` and add
                              the following lines between `{{{ footer.scripts
                              }}}` and `{{/partial}}`


                              ```

                              <script src="{{cdn
                              'assets/dist/theme-bundle.main.js'}}"></script>
                               
                              <script type="text/javascript" defer>
                                  // Exported in app.js
                                  window.initReact();
                              </script>

                              ```


                              2. In `/templates/pages/checkout.html`, replace
                              `{{{ checkout.checkout_content }}}` with the
                              following:


                              ```<div id="checkout-app"></div>```


                              ### Congratulations!


                              You should now be able to view your example React
                              checkout by running the `stencil start` command in
                              your theme directory and navigating to your
                              storefront at
                              [http://localhost:3000](http://localhost:3000).


                              You can make further customizations to the
                              checkout by modifying the React components in
                              `/assets/js/checkout-app`.
                            header:
                              anchor: implement_steps
                          - type: tabs
                            data:
                              children:
                                - title: webpack.common.js
                                  blocks:
                                    - type: code
                                      data: >
                                        LodashPlugin =
                                        require('lodash-webpack-plugin'),

                                        path = require('path'),

                                        webpack = require('webpack');


                                        // Common configuration, with extensions
                                        in webpack.dev.js and webpack.prod.js.

                                        module.exports = {

                                        bail: true,

                                        context: __dirname,

                                        entry: {
                                          main: './assets/js/app.js',
                                        },

                                        module: {
                                          rules: [
                                              {
                                                  test: /\.js$/,
                                                  include: /(assets\/js|assets\\js|stencil-utils)/,
                                                  use: {
                                                      loader: 'babel-loader',
                                                      options: {
                                                          plugins: [
                                                              'dynamic-import-webpack', // Needed for dynamic imports.
                                                              'lodash', // Automagically tree-shakes lodash.
                                                              'transform-regenerator', // Transforms async and generator functions.
                                                          ],
                                                          presets: [
                                                              ['env', {
                                                                  loose: true, // Enable "loose" transformations for any plugins in this preset that allow them.
                                                                  modules: false, // Don't transform modules; needed for tree-shaking.
                                                                  useBuiltIns: true, // Tree-shake babel-polyfill.
                                                              }],
                                                          ],
                                                      },
                                                  },
                                              },
                                              {
                                                  test: /jquery-migrate/,
                                                  use: 'imports-loader?define=>false',
                                              },
                                              {
                                                  test: /\.jsx$/,
                                                  exclude: /node_modules/,
                                                  use: {
                                                      loader: "babel-loader",
                                                      options: {
                                                          presets: ['react'],
                                                      },
                                                  }
                                              },
                                              {
                                                  test: /\.scss$/,
                                                  use:  [
                                                      'style-loader',
                                                      {
                                                          loader: 'css-loader',
                                                          options: {
                                                              modules: true
                                                          }
                                                      },
                                                      'sass-loader'
                                                  ]
                                              }
                                          ],
                                        },

                                        output: {
                                          chunkFilename: 'theme-bundle.chunk.[name].js',
                                          filename: 'theme-bundle.[name].js',
                                          path: path.resolve(__dirname, 'assets/dist'),
                                        },

                                        plugins: [
                                          new CleanPlugin(['assets/dist'], {
                                              verbose: false,
                                              watch: false,
                                          }),
                                          new LodashPlugin, // Complements babel-plugin-lodash by shrinking its cherry-picked builds further.
                                          new webpack.ProvidePlugin({
                                              $: 'jquery',
                                              jQuery: 'jquery',
                                              'window.jQuery': 'jquery',
                                          }),
                                        ],

                                        resolve: {
                                          alias: {
                                              'jquery-migrate': path.resolve(__dirname, 'node_modules/jquery-migrate/dist/jquery-migrate.min.js'),
                                              jstree: path.resolve(__dirname, 'node_modules/jstree/dist/jstree.min.js'),
                                              lazysizes: path.resolve(__dirname, 'node_modules/lazysizes/lazysizes.min.js'),
                                              pace: path.resolve(__dirname, 'node_modules/pace/pace.min.js'),
                                              'slick-carousel': path.resolve(__dirname, 'node_modules/slick-carousel/slick/slick.min.js'),
                                              'svg-injector': path.resolve(__dirname, 'node_modules/svg-injector/dist/svg-injector.min.js'),
                                              sweetalert2: path.resolve(__dirname, 'node_modules/sweetalert2/dist/sweetalert2.min.js'),
                                          },
                                          extensions: ['.js', '.jsx'],
                                        },

                                        };
                                      header:
                                        title: webpack.common.js
                                - title: app.js
                                  blocks: []
                                - title: checkout.html
                                  blocks:
                                    - type: code
                                      data: >-
                                        {{#partial "head"}}
                                         
                                        {{{ checkout.checkout_head }}}

                                        {{{ stylesheet
                                        '/assets/css/optimized-checkout.css' }}}

                                        {{ getFontsCollection }}
                                         
                                        <script type="text/javascript">
                                            window.language = {{{langJson 'optimized_checkout'}}};
                                        </script>
                                         
                                        {{{head.scripts}}}
                                         
                                        {{/partial}}
                                         
                                        {{#partial "page"}}

                                        <header class="checkoutHeader
                                        optimizedCheckout-header">
                                            <div class="checkoutHeader-content">
                                                <h1 class="is-srOnly">{{lang 'checkout.title'}}</h1>
                                                <h2 class="checkoutHeader-heading">
                                                    <a class="checkoutHeader-link" href="{{urls.home}}">
                                                        {{#if checkout.header_image}}
                                                            <img alt="{{settings.store_logo.title}}" class="checkoutHeader-logo" id="logoImage" src="{{ checkout.header_image }}"/>
                                                        {{ else }}
                                                            <span class="header-logo-text">{{settings.store_logo.title}}</span>
                                                        {{/if}}
                                                    </a>
                                                </h2>
                                            </div>
                                        </header>
                                         
                                        <div id="checkout-app"></div>
                                         
                                        {{{ footer.scripts }}}

                                        <script src="{{cdn
                                        'assets/dist/theme-bundle.main.js'}}"></script>
                                         
                                        <script type="text/javascript" defer>
                                            // Exported in app.js
                                            window.initReact();
                                        </script>

                                        {{/partial}}
                                         
                                        {{> layout/empty}}
                                      header:
                                        title: checkout.html
                            header:
                              title: Examples of files after completing this tutorial
                          - type: text
                            data: >-
                              ## Additional Resources


                              * [www.reactjs.org](www.reactjs.org)

                              *
                              [www.reactjs.org/tutorial/tutorial.html](www.reactjs.org/tutorial/tutorial.html)
                              (Excellent tutorial on the basics of React)

                              *
                              [https://webpack.js.org/concepts/](https://webpack.js.org/concepts/)
                            header:
                              anchor: implement_additional"
                    - title: Styling the Apple Pay Button
                      route:
                        path: /new-subpage-3
                      data: {}
                    - title: Customizing Invoices and Packing Slips
                      route:
                        path: /new-subpage-4
                      data: {}
        - title: 'Using the Stencil Theme Editor '
          route:
            path: /theme-editor-configuration
          data:
            children:
              - title: Stencil Theme Editor Overview
                route:
                  path: /stencil-theme-editor-overview
                data:
                  blocks:
                    - type: html
                      data: <h1>Stencil Theme Editor Overview</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#stencil_stencil-theme-editor-overview\">Stencil Theme Editor</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >-
                        ## Stencil Theme Editor

                        [Stencil Theme
                        Editor](https://forum.bigcommerce.com/s/article/Stencil-Themes?_ga=2.258361674.1984523106.1539568940-967431010.1523308107)
                        is a friendly point-and-click interface that allows
                        BigCommerce merchants to modify their storefront's look
                        and feel without manually entering any code. Anyone
                        using Stencil Theme Editor can customize their
                        storefront theme by modifying characteristics from a
                        variety menu options such as Styles, Colors, Typography,
                        and more.


                        Furthermore, the Stencil Theme Editor is a useful
                        rapid-customization tool for developers. To work with
                        the Theme Editor GUI locally, run `stencil start -e` ,
                        and point your browser to `localhost:8181`, as described
                        here.


                        The remainder of this section guides you through
                        configuring your own theme options in order to
                        ultimately create a merchant-customized theme using the
                        Stencil Theme Editor.
                      header:
                        anchor: stencil_stencil-theme-editor-overview
                    - type: callout
                      data:
                        type: error
                        body: >-
                          Open only one instance of Theme Editor at a time
                          against each storefront. There is currently no
                          synchronization mechanism for configuration changes
                          made by multiple Theme Editor instances.
                        title: ' Single Instance per Storefront'
              - title: Configuring the Stencil Theme Editor
                route:
                  path: /configuring-the-stencil-theme-editor
                data:
                  blocks:
                    - type: html
                      data: <h1>Configuring the Stencil Theme Editor</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#configuring_configuration-files\">Configuration Files</a></li>\n    <li><a href=\"#configuring_managing-keys\">Managing Keys between Versions</a></li>\n    <li><a href=\"#configuring_persistent-settings\">Persistent Settings Storage</a></li>\n    <li><a href=\"#configuring_theme-upgrades\">Theme Upgrades and Settings</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >-
                        ## Configuration Files


                        Each theme contains two related JSON files of key-value
                        pairs: `config.json` and `schema.json`. These files'
                        keys provide the following features:


                        Keys that you include in `schema.json` – together with
                        their corresponding `config.json` default values –
                        define the settings that merchants can customize through
                        the Theme Editor graphical interface.

                        Other `config.json` keys contain metadata about the
                        theme, such as the theme's name, version, and resource
                        controls.

                        Keys located under the `config.json > variations` object
                        define variations of the theme. For example, a theme
                        might have a "Light" variation and a "Bold" variation,
                        each with different typography and colors. Each theme
                        can include as many variations as you like.

                        Keys located under both files' `settings` objects define
                        the theme's look, feel, and functionality.


                        For documentation on the principal keys included in
                        Stencil's reference Cornerstone theme, see this
                        section's [config.json Metadata]() and [schema.json
                        Metadata]() entries. For an introduction to the
                        graphical editor, see

                        [Stencil Theme Editor Overview]().
                      header:
                        anchor: configuring_configuration-files
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Managing Keys between Versions


                        To make sure revisions to your theme are
                        backward-compatibile, we generally recommend that you
                        manage keys in both your `config.json` and `schema.json`
                        files in an additive way. Specific recommendations:


                        Adding new keys is generally fine. (However, each key in
                        `schema.json` must have a matching default in
                        `config.json`, as outlined in [Enabling Theme
                        Editor]().)

                        * Use caution in deleting any key. Doing so can break
                        your new theme version's backward compatibility.

                        * We do not recommend renaming keys. Instead, we
                        recommend introducing a new key, while maintaining the
                        old key until it is no longer in use by anyone using an
                        older version of your theme.

                        * Each object within your `config.json` > [variations]()
                        object defines one theme variation. If you are adapting
                        an existing theme and consciously want to remove one or
                        more variations, you can do so by removing the
                        corresponding key(s).
                      header:
                        anchor: configuring_managing-keys
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Persistent Settings Storage


                        When store administrators use Theme Editor to customize
                        your theme for their store, the store's resulting
                        configuration settings are saved to a separate
                        configuration service at BigCommerce.
                      header:
                        anchor: configuring_persistent-settings
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Theme Upgrades and Settings


                        When a merchant upgrades your theme to a newer version,
                        all key-value pairs that were saved to the BigCommerce
                        configuration service are carried forward. For example,
                        assume this customization/upgrade scenario:


                        You release your Star Glow theme, version 1. This
                        theme's `config.json` includes a key named `logo_size`,
                        establishing a default value of 100x250. The combination
                        of the key and the value compose a `logo_size` setting.

                        The merchant uses Theme Editor to change the `logo_size`
                        setting to 175x275. This customized setting is stored in
                        the BigCommerce configuration service.

                        You release Star Glow, version 1.1. In this theme
                        revision, you have changed the `logo_size` to 300x300.

                        When the merchant applies Star Glow version 1.1 to their
                        store, their custom `logo_size` setting of 175x275
                        remains in effect.

                        If you the merchant creates a second store and applies
                        Star Glow version 1.1 to it, that store has no custom
                        `logo_size` setting – so it will default to the new
                        theme version's 300x300 value.
                      header:
                        anchor: configuring_theme-upgrades
              - title: config.json Metadata
                route:
                  path: /config.json-metadata
                data:
                  blocks:
                    - type: html
                      data: <h1><code>config.json</code> Metadata</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#config_stencil-theme-editor\"></a></li>\n\t</ul>\n</div>"
              - title: Preparing Thumbnail Images
                route:
                  path: /new-subpage
                data:
                  blocks:
                    - type: html
                      data: <h1>Preparing Thumbnail Images</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#preparing_where-and-how-merchants\"></a>Where and How Merchants See Your Theme's Thumbnail</li>\n    <li><a href=\"#preparing_-\"></a>General Image Requirements</li>\n    <li><a href=\"#preparing_-\"></a>Themewide Composite Image</li>\n    <li><a href=\"#preparing_-\"></a>Variations: Desktop/Mobile Screenshots\n</li>\n\t</ul>\n</div>"
                    - type: text
                      data: >-
                        ## Where and How Merchants See Your Theme's Screenshots


                        A complete Stencil theme includes screenshots to show
                        off the theme on cards that appear in two locations
                        within the BigCommerce Control Panel:


                        * `Storefront` > `My Themes`: Each individual card
                        displays a _themewide composite image_, which is an
                        image that contains combination of screenshots of the
                        theme's multiple variations. 

                        `Storefront` > `Themes Marketplace`: Each card displays
                        one variation of your theme. The three variations of
                        Cornerstone (Light, Warm, and Bold) are displayed across
                        three 
                      header:
                        anchor: preparing_where-and-how-merchants
                    - type: tabs
                      data:
                        children:
                          - title: Desktop View of 'My Themes'
                            blocks:
                              - type: image
                                data: >-
                                  //s3.amazonaws.com/user-content.stoplight.io/6116/1539624479145
                                header:
                                  title: Storefront > My Themes
                                config:
                                  centered: true
                                  fluid: true
                                  bordered: true
                                  maxWidth: '500'
                                  maxHeight: '800'
                          - title: Desktop View of Themes Marketplace
                            blocks:
                              - type: image
                                data: >-
                                  //s3.amazonaws.com/user-content.stoplight.io/6116/1539624737619
                                header:
                                  title: Storefront > Themes Marketplace
                          - title: Mobile View of Themes Marketplace
                            blocks: []
                      header:
                        title: >-
                          How your theme will appear in the Control Panel and
                          Theme Marketplace
                    - type: text
                      data: >-
                        ## General Image Requirements


                        Below are details about how to size and save these
                        images, to stage them within your theme's directory
                        structure, and to reference them in your config.json
                        file.


                        All screenshots described below must meet the following
                        specifications, in order for the stencil bundle command
                        to be able to process them:

                        Saved to a supported image file type: .jpg/.jpeg, .png,
                        or .gif.

                        Stored in your <theme‑name>/meta/ subdirectory.

                        Also note that all of these screenshots must be in
                        portrait aspect ratio, with specific resolutions listed
                        below.
                    - type: text
                      data: "## Themewide Composite Image\n\nThis composite image represents your theme in the control panel > Storefront Design > My Themes area, which shows merchants their currently available themes (including any custom uploaded themes). \nThis file will normally be a mosaic of screenshots from multiple variations within your theme. It must meet the following requirements, beyond the general specifications above:\nResolution of 600 x 760 pixels (horizontal x vertical).\nFile size smaller than 2 MB.\nArbitrary filename prefix, referenced in your config.json file as the \nmeta > composed_image key's value.\nHere is an example of a compliant file type and location:\n\n`<theme‑name>/meta/composed.png`\n\nHere is how you would reference this file within `config.json`:\n\n```\n{\n  [...]\n  \"meta\": {\n    [...]\n    \"composed_image\": \"composed.png\",\t\n    [...]\n}\n```"
                    - type: text
                      data: "## Variations: Desktop/Mobile Screenshots\n\nEach variation within your theme must be represented by two additional screenshots – if you want that variation to appear in the control panel > Storefront Design > Themes Marketplace area, which shows merchants themes available for them to download.\n\n### Desktop Screenshot\n\nDesktop Screenshot\nThe first screenshot, showing your theme on a desktop viewport, must meet the following requirements beyond the general specifications above: \nResolution of 2048 x 2600 pixels (horizontal x vertical).\nFile size smaller than 5 MB.\nArbitrary filename prefix, referenced in your config.json file as the \n<variation-name> > meta > desktop_screenshot key's value.\n\t\n### Mobile Screenshot\n\nThe second screenshot, showing your theme on a mobile viewport, must meet the following requirements beyond the general specifications above: \n* Resolution of 304 x 540 pixels (horizontal x vertical).\n* File size smaller than 1 MB.\n* Arbitrary filename prefix, referenced in your config.json file as the \n<variation-name> > meta > mobile_screenshot key's value.\nHere is an example showing two files of compliant types and location:\n\n* `<theme‑name>/meta/desktop_bright.png`\n* `<theme‑name>/meta/mobile_bright.png`\t\n\nHere is how you would reference these files within `config.json`, for a variation named `Bright`:\n\n```\n [...]\n  \"variations\": [\n    {\n      \"name\": \"Bright\",\n      \"id\": \"bright\",\n      \"meta\": {\n        \"desktop_screenshot\": \"desktop_bright.png\",\n        \"mobile_screenshot\": \"mobile_bright.jpg\",\n    [...]\n    }\n  ]\n```\n"
                    - type: text
                      data: ''
              - title: schema.json/Theme Editor Metadata
                route:
                  path: /new-subpage
                data:
                  blocks:
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#stencil_stencil-theme-editor\">Stencil Theme Editor</a></li>\n\t</ul>\n</div>"
              - title: Preparing Thumbnail Images
                route:
                  path: /new-subpage
                data:
                  blocks:
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#preparing_\">Stencil Theme Editor</a></li>\n\t</ul>\n</div>"
              - title: Theme Editor Troubleshooting
                route:
                  path: /new-subpage
                data:
                  blocks:
                    - type: html
                      data: <h1>Theme Editor Troubleshooting</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#theme-editor_\">Theme Editor Troubleshooting</a></li>\n\t</ul>\n</div>"
        - title: Front-Matter Attributes
          route:
            path: /front-matter-attributes
          data:
            children:
              - title: Front Matter Overview
                route:
                  path: /front-matter-overview
              - title: Front Matter Reference
                route:
                  path: /new-subpage
                data: {}
        - title: Handlebars Syntax and Helpers
          route:
            path: /handlebars-syntax-and-helpers
          data:
            children:
              - title: Handlebars Helpers Reference
                route:
                  path: /handlebars-helpers-reference
                data:
                  blocks:
                    - type: html
                      data: <h1>Handlebars Helpers Reference</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#basis_what-translates\">What Does and Doesn't Translate</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >
                        ## {{itemAt}}


                        _Block helper that returns the item at the specified
                        index._


                        #### Parameters


                        * `array` {Array}

                        * `idx` {Number}

                        * `returns` {any} `value`


                        #### {{itemAt}} Example


                        Given the array `['a', 'b', 'c']`:


                        ```

                        {{itemAt array 1}}

                        //=> 'b'


                        ```

                        ---


                        ## {{join}}


                        The `join` helper is custom to Stencil. It joins an
                        array of string items, with separators. It returns a
                        string. 


                        #### Parameters


                        - `values`: {Array}

                        - `separator`: {String}

                        - `limit=<number>`: An optional limit.


                        #### {{join}} Example


                        insert join example


                        ---


                        ### {{limit}}


                        The `limit` helper is custom to Stencil. It limits the
                        number of items returned from an array variable, and
                        returns a new array.


                        #### Parameters


                        - `data`: {Array}

                        - `limit`: {Number}


                        #### {{limit}} Example 


                        Assume that `{{cart.items}}` would return 10 items. You
                        could use this helper to limit that behavior to only the
                        first four items, by specifying: 


                        ```

                        {{limit cart.items 4}}

                        ```


                        ---


                        ### {{pluck}}


                        The `pluck` helper is custom to Stencil. For one or more
                        specified search key(s), it retrieves corresponding
                        values from some or all elements in a specified
                        collection. 


                        The `pluck` helper returns the retrieved values in a
                        comma-separated string. This helper's general form is:


                        ```

                        {{pluck ([limit] <collection> [<limit-value>])
                        '<search-key>'}}

                        ```


                        #### Parameters


                        - `limit`, `limit-value`: Optional parameters to limit
                        the number of results returned.

                        - `collection`: The collection to search.

                        - `search-key`: The string to search for.



                        #### {{pluck}} Example 1


                        Assume that the `categories` collection contains:


                        ```

                        categories: [
                          { "id": 1, "name": "Bakeware" },
                          { "id": 2, "name": "Cookware" },
                          { "id": 3, "name": "Cutlery" }
                        ]

                        ```


                        In this case, this Handlebars statement:


                        ```

                        {{pluck (limit categories 2) 'name'}}

                        ```


                        ...would return:


                        ```

                        "Bakeware,Cookware"

                        ```


                        #### {{pluck}} Example 2


                        If the `categories` themselves each contained an image
                        object, then you could use dot notation to access that
                        image object's children:


                        ```

                        categories: [
                          { "id": 1, "name": "Bakeware", "image": { "data": "http://...", "alt": "Bakeware image"} },
                          { "id": 2, "name": "Cookware" "image": { "data": "http://...", "alt": "Cookware image"} },
                          { "id": 3, "name": "Cutlery" "image": { "data": "http://...", "alt": "Cutlery image"} }
                        ]

                        ```


                        In this case, this Handlebars statement:


                        ```

                        {{pluck (limit categories 2) 'image.data'}}

                        ```


                        ...would return a comma-separated list of image URLs.


                        ---



                        ## <a name="array_std"></a> Standard Array Helpers


                        The following standard array helpers are supported on
                        the Stencil framework.


                        ### <a name="after"></a> {{after}}


                        Returns all of the items in an array after the specified
                        index. Opposite of [before](#before).


                        Given the array `['a', 'b', 'c']`:


                        #### Parameters


                        * `array` {Array}: Collection.

                        * `n` {Number}: Starting index (number of items to
                        exclude).

                        * `returns` {Array}: Array exluding `n` items.


                        #### Example


                        ```handlebars

                        {{after array 1}}

                        //=> '["c"]'

                        ```


                        ---


                        ## {{arrayify}}


                        Casts the given `value` to an array.


                        #### Parameters


                        * `value` {any}

                        * `returns` {Array}


                        #### {{arrayify}} Example


                        ```handlebars

                        {{arrayify "foo"}}

                        //=> '["foo"]'

                        ```

                        ---


                        ## <a name="before"></a> {{before}}


                        Returns all of the items in the collection before the
                        specified count. Opposite of [after](#after).


                        Given the array `['a', 'b', 'c']`:


                        #### Parameters


                        * `array` {Array}

                        * `n` {Number}

                        * `returns` {Array}: Array excluding items after the
                        given number.


                        #### {{before}} Example


                        ```handlebars

                        {{before array 2}}

                        //=> '["a", "b"]'

                        ```


                        ---


                        ## {{eachIndex}}


                        #### Parameters


                        * `array` {Array}

                        * `options` {Object}

                        * `returns` {String}


                        #### {{eachIndex}} Example


                        ```handlebars

                        {{#eachIndex collection}}
                          {{item}} is {{index}}
                        {{/eachIndex}}

                        ```


                        ---


                        ### {{filter}}


                        Block helper that filters the given array. Renders the
                        block for values that evaluate to `true`; otherwise,
                        returns the inverse block.


                        #### Parameters


                        * `array` {Array}

                        * `value` {any}

                        * `options` {Object}

                        * `returns` {String}


                        #### {{filter}} Example


                        ```handlebars

                        {{#filter array "foo"}}AAA{{else}}BBB{{/filter}}

                        //=> 'BBB

                        ```


                        ---


                        ## <a name="first"></a> {{first}}


                        Returns the first item, or first `n` items, of an array.


                        #### Parameters


                        * `array` {Array}

                        * `n` {Number}: Number of items to return, starting at
                        `0`.

                        * `returns` {Array}


                        #### {{first}} Example


                        Given the array `['a', 'b', 'c', 'd', 'e']`:


                        ```handlebars

                        {{first array 2}}

                        //=> '["a", "b"]'

                        ```


                        ---



                        ### {{forEach}}


                        Iterates over each item in an array, and exposes the
                        current item in the array as context to the inner block.
                        In addition to the current array item, the helper
                        exposes the following variables to the inner block:


                        * `index`

                        * `total`

                        * `isFirst`

                        * `isLast`


                        Also, `@index` is exposed as a private variable, and
                        additional private variables may be defined as hash
                        arguments.


                        #### Parameters


                        * `array` {Array}

                        * `returns` {String}


                        #### {{forEach}} Example


                        ```js

                        var accounts = [

                        {'name': 'John', 'email': 'john@example.com'},

                        {'name': 'Malcolm', 'email': 'malcolm@example.com'},

                        {'name': 'David', 'email': 'david@example.com'}

                        ];


                        // example usage

                        // {{#forEach accounts}}

                        //   <a href="mailto:{{ email }}" title="Send an email
                        to {{ name }}">

                        //     {{ name }}

                        //   </a>{{#unless isLast}}, {{/unless}}

                        // {{/forEach}}

                        ```


                        ---


                        ### {{inArray}}


                        Block helper that renders the block if an array has the
                        given `value`. Optionally, you can specify an inverse
                        block to render when the array does not have the given
                        value.


                        #### Parameters


                        * `array` {Array}

                        * `value` {any}

                        * `options` {Object}

                        * `returns` {String}


                        #### {{inArray}} Example


                        Given the array `['a', 'b', 'c']`:


                        ```handlebars

                        {{#inArray array "d"}}
                          foo
                        {{else}}
                          bar
                        {{/inArray}}

                        //=> 'bar'

                        ```


                        ---


                        ### {{isArray}}


                        Returns true if `value` is an es5 array.


                        #### Parameters


                        * `value` {any}: The value to test.

                        * `returns` {Boolean}


                        #### Example


                        ```handlebars

                        {{isArray "abc"}}

                        //=> 'false'

                        ```


                        ### <a name="last"></a> {{last}}


                        Returns the last item, or last `n` items, of an array.
                        Opposite of [first](#first).


                        #### Parameters


                        * `array` {Array}

                        * `n` {Number}: Number of items to return, starting with
                        the last item.

                        * `returns` {Array}


                        #### Example


                        Given the array `['a', 'b', 'c', 'd', 'e']`:


                        ```handlebars

                        {{last array 2}}

                        //=> '["d", "e"]'

                        ```


                        ### {{lengthEqual}}


                        Block helper that compares the length of the given array
                        to the number passed as the second argument. If the
                        array length is equal to the given `length`, the block
                        is returned. Otherwise, you have the option of returning
                        an inverse block.


                        #### Parameters


                        * `array` {Array}

                        * `length` {Number}

                        * `options` {Object}

                        * `returns` {String}


                        #### Example


                        Given the array `['a', 'b', 'c', 'd', 'e']`:


                        ```handlebars

                        {{#lengthEqual array 10}}AAA{{else}}BBB{{/lengthEqual}}

                        //=> 'BBB'

                        ```


                        ### {{map}}


                        Returns a new array, created by calling `function` on
                        each element of the given `array`.


                        #### Parameters


                        * `array` {Array}

                        * `fn` {Function}

                        * `returns` {String}


                        #### Example


                        Given an array `['a', 'b', 'c']`:


                        ```js

                        // register `double` as a helper

                        function double(str) {
                          return str + str;
                        }

                        // then used like this:

                        // {{map array double}}

                        //=> '["aa", "bb", "cc"]'

                        ```


                        ### {{some}}


                        Block helper that returns the block *if* the callback
                        returns true for some value in the given array.


                        #### Parameters


                        * `array` {Array}

                        * `cb` {Function}: Callback function.

                        * {Options}: Handlebars-provided options object.

                        * `returns` {Array}


                        #### Example


                        Given the array `[1, 'b', 3]`:


                        ```handlebars

                        {{#some array isString}}
                          Render me if the array has a string.
                        {{else}}
                          Render me if it doesn't.
                        {{/some}}

                        //=> 'Render me if the array has a string.'

                        ```


                        ### {{sort}}


                        Sorts the given `array`. If an array of objects is
                        passed, you may optionally pass (as the second argument)
                        a `key` to sort on. Alternatively, you may pass a
                        sorting function as the second argument.


                        #### Parameters


                        * `array` {Array}: The array to sort.

                        * `key` {String|Function}: The object key to sort by, or
                        a sorting function.


                        #### Example


                        Given an array `['b', 'a', 'c']`:



                        ```handlebars

                        {{sort array}}

                        //=> '["a", "b", "c"]'

                        ```


                        ### {{sortBy}}


                        Sorts an `array`. If an array of objects is passed, you
                        may optionally pass a `key` to sort on as the second
                        argument. You may alternatively pass a sorting function
                        as the second argument.


                        #### Parameters


                        * `array` {Array}: The array to sort.

                        * `props` {String|Function}: One or more properties to
                        sort by, or sorting functions to use.


                        #### {{sortBy}} Example


                        Given an array `[{a: 'zzz'}, {a: 'aaa'}]`:


                        ```handlebars

                        {{sortBy array "a"}}

                        //=> '[{"a":"aaa"}, {"a":"zzz"}]'

                        ```

                        ---


                        ### <a name="withAfter"></a> {{withAfter}}


                        Use the items in the array, _after_ the specified index,
                        as context inside a block. Opposite of
                        [withBefore](#withBefore).


                        #### Parameters


                        * `array` {Array}

                        * `idx` {Number}

                        * `options` {Object}

                        * `returns` {Array}


                        #### {{withAfter}} Example


                        Given the array `['a', 'b', 'c', 'd', 'e']`:


                        ```handlebars

                        {{#withAfter array 3}}
                          {{this}}
                        {{/withAfter}}

                        //=> "de"

                        ```


                        ### <a name="withBefore"></a> {{withBefore}}


                        Use the items in the array, _before_ the specified
                        index, as context inside a block. Opposite of
                        [withAfter](#withAfter).


                        #### Parameters


                        * `array` {Array}

                        * `idx` {Number}

                        * `options` {Object}

                        * `returns` {Array}


                        #### {{withBefore}} Example


                        Given the array `['a', 'b', 'c', 'd', 'e']`:


                        ```handlebars

                        {{#withBefore array 3}}
                          {{this}}
                        {{/withBefore}}

                        //=> 'ab'

                        ```


                        ### <a name="withFirst"></a> {{withFirst}}


                        Uses a collection's first item inside a Handlebars block
                        expression. Opposite of [withLast](#withLast).


                        #### Parameters


                        * `array` {Array}

                        * `idx` {Number}

                        * `options` {Object}

                        * `returns` {String}


                        #### {{withFirst}} Example


                        Given the array `['a', 'b', 'c']`:


                        ```handlebars

                        {{#withFirst array}}
                          {{this}}
                        {{/withFirst}}

                        //=> 'a'

                        ```
        - title: Stencil Object Model Reference
          route:
            path: /stencil-object-model-reference
          data:
            children:
              - title: Stencil Objects
                route:
                  path: /stencil-objects
                data:
                  children:
                    - title: Global Objects & Properties
                      route:
                        path: /global-objects
                      data:
                        children:
                          - title: Banners
                            route:
                              path: /banners
                            data:
                              blocks:
                                - type: html
                                  data: >-
                                    <b>Description: </b>Elements of marketing
                                    banners at page’s top and/or bottom<br>


                                    <b>Handlebars Expressions:</b> <span
                                    class="inline-code">{{banner}}</span>, <span
                                    class="inline-code">{{{banner}}}</span><br>


                                    <b>Object Properties:</b><br><br>


                                    <table>
                                      <tr>
                                        <td>Property</td>
                                        <td>Description</td>
                                      </tr>
                                      <tr>
                                        <td class="">banners</td>
                                        <td class="">Blocks of static HTML content to define banners</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1">top</span></td>
                                        <td class="">Array of HTML content/strings, for custom top-banner content; banners are populated from the BigCommerce control panel</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1">bottom</span></td>
                                        <td class="">Array of HTML content/strings, for custom bottom-banner content; banners are populated from the BigCommerce control panel</td>
                                      </tr>
                                    </table>
                                  header:
                                    anchor: Banner
                                  config: {}
                                - type: callout
                                  data:
                                    type: warning
                                    body: >-
                                      Where a banner contains HTML, the <span
                                      class="inline-code">banner</span> helper
                                      must be placed in triple braces, as in
                                      this 

                                      example: <span
                                      class="inline-code">{{{banner}}}</span>.
                                      (Double braces would escape the HTML.)
                                    title: Handlebars Formatting Exception
                          - title: Breadcrumbs
                            route:
                              path: /breadcrumbs
                            data:
                              blocks:
                                - type: html
                                  data: >-
                                    <b>Description:</b> Defines a page's
                                    breadcrumbs – available on virtually all
                                    pages that have a breadcrumb trail<br>


                                    <b>Handlebars Expression:</b> <span
                                    class="inline-code">{{breadcrumbs}}</span><br>


                                    <b>Object Properties:</b><br><br>


                                    <table>
                                      <tr>
                                        <td>Property</td>
                                        <td>Description</td>
                                      </tr>
                                      <tr>
                                        <td class="">name</td>
                                        <td class="">Displayed name of this breadcrumb element</td>
                                      </tr>
                                      <tr>
                                        <td class="">url</td>
                                        <td class="">URL of this breadcrumb element</td>
                                      </tr>
                                    </table>
                                  header:
                                    anchor: Stencil-Bread-ref
                          - title: Categories
                            route:
                              path: /categories
                            data:
                              blocks:
                                - type: text
                                  data: >-
                                    <A NAME="Categories"></a>

                                    <b>Description:</b> A list of all product
                                    categories shown in the current page
                                    context; default sorting is by category id,
                                    from lowest to highest<br>


                                    <b>Handlebars Expression:</b> <span
                                    class="inline-code">{{categories}}</span><br>


                                    <b>Object Properties:</b><br><br>


                                    <table>
                                      <tr>
                                        <td>Property</td>
                                        <td>Description</td>
                                      </tr>
                                      <tr>
                                        <td class="">id</td>
                                        <td class="">ID of the top-level category listed</td>
                                      </tr>
                                      <tr>
                                        <td class="">name</td>
                                        <td class="">Name of the top-level category</td>
                                      </tr>
                                      <tr>
                                        <td class="">description</td>
                                        <td class="">Description of the top-level category (optional &ndash; when requested in front matter)</td>
                                      </tr>
                                      <tr>
                                        <td class="">url</td>
                                        <td class="">URL to the category page</td>
                                      </tr>
                                      <tr>
                                        <td class="">count</td>
                                        <td class="">Number of products in this category</td>
                                      </tr>
                                      <tr>
                                        <td class="">children</td>
                                        <td class="">List of child categories for this top-level category</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1"> id</span></td>
                                        <td class="">ID of the child category</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1"> name</span></td>
                                        <td class="">Name of the child category</td>
                                      </tr>
                                        <tr>
                                        <td class=""><span class="indent1"> description</span></td>
                                        <td class="">Description of the child category (optional &ndash; when requested in front matter)</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1"> url</span></td>
                                        <td class="">URL of the child category</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1"> count</span></td>
                                        <td class="">Number of products in this child category</td>
                                      </tr>
                                    </table>
                          - title: Currency Selector
                            route:
                              path: /currency-selector
                            data:
                              blocks:
                                - type: html
                                  data: >-
                                    <b>Description:</b> A list of all supported
                                    currencies, and the currency that is
                                    actively in use in the storefront<br>


                                    <b>Handlebars Expression:</b> <span
                                    class="inline-code">{{currency_selector}}</span><br>


                                    <b>Object Properties:</b><br><br>


                                    <table>
                                      <tr>
                                        <td>Property</td>
                                        <td>Description</td>
                                      </tr>
                                      <tr>
                                        <td class="">active_currency_id</td>
                                        <td class="">ID of the currency actively in use in the storefront</td>
                                      </tr>
                                      <tr>
                                        <td class="">active_currency_flag</td>
                                        <td class="">Country flag used to represent the active currency</td>
                                      </tr>
                                      <tr>
                                        <td class="">active_currency_name</td>
                                        <td class="">Name of the active currency</td>
                                      </tr>
                                      <tr>
                                        <td class="">active_currency_code</td>
                                        <td class="">Code for the active currency</td>
                                      </tr>
                                      <tr>
                                        <td class="">currencies</td>
                                        <td class="">List of all the currencies supported for this storefront</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1"> is_active</span></td>
                                        <td class="">Boolean that indicates whether this currency is active for use in the storefront</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1"> switch_url</span></td>
                                        <td class="">The URL to invoke a switch to this currency</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1"> id</span></td>
                                        <td class="">ID of the currency</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1"> name</span></td>
                                        <td class="">Name of the currency</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1"> flag</span></td>
                                        <td class="">Country flag used to visually represent the currency</td>
                                      </tr>
                                    </table>
                                  header:
                                    anchor: CurrencySel
                          - title: Faceted Search
                            route:
                              path: /new-subpage-6
                            data:
                              blocks:
                                - type: html
                                  data: >-
                                    <A NAME="FacSearch"></a>

                                    <b>Description: </b>Faceted-search object
                                    for searching globally, by category, or by
                                    brand<br>


                                    <b>Handlebars Expression</b><b>:</b> <span
                                    class="inline-code">{{faceted_search}}</span><br>


                                    <b>Object Properties:</b><br><br>


                                    <table>
                                      <tr>
                                        <td>Property</td>
                                        <td>Description</td>
                                      </tr>
                                      <tr>
                                        <td class="">facets</td>
                                        <td class="">List of all search facets available</td>
                                      </tr>
                                      <tr>
                                        <td class="">selected</td>
                                        <td class="">Container for the selected search facets</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1">remove_all_url</span></td>
                                        <td class="">URL to remove all selected search restrictions</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1">items</span></td>
                                        <td class="">Currently enabled search facets</td>
                                      </tr>
                                    </table>
                                  header:
                                    anchor: FacetedSearch
                          - title: Featured Products
                            route:
                              path: /new-subpage-2
                            data:
                              blocks:
                                - type: html
                                  data: >-
                                    <b>Description:</b> A list of all the
                                    featured products for the BigCommerce
                                    storefront<br>


                                    <b>Handlebars Expression:</b> <span
                                    class="inline-code">{{products.featured}}</span><br>


                                    <b>Object Properties:</b> References the <a
                                    href="/docs/common-product-card-model">product
                                    card model</a>.
                                  header:
                                    anchor: FeatProducts
                                - type: text
                                  data: >-
                                    <b> Usage Example: </b>


                                    From Stencil's base Cornerstone theme, the
                                    example below displays the global
                                    `{{products.featured}}` object on the
                                    `<theme-name>/templates/pages/home.html`
                                    page template.


                                    First, to declare the object, the following
                                    [front
                                    matter](/docs/using-yaml-front-matter) must
                                    be placed at the top of this template. This
                                    particular declaration also limits the
                                    number of featured products to be displayed:


                                    ```

                                    ---

                                    products:
                                        [...]
                                        featured:
                                            limit: {{theme_settings.homepage_featured_products_count}}
                                    ---

                                    ```

                                    The `homepage_featured_products_count` limit
                                    is one of two relevant variables defined in
                                    Cornerstone's
                                    [`config.json`&#160;file](/docs/configjson-reference),
                                    here:


                                    ```
                                      "settings": {
                                        [...]
                                        "homepage_featured_products_count": 8,
                                        [...]
                                        "homepage_featured_products_column_count": 4,
                                        [...]    
                                    ```


                                    In the body of the `home.html` template, the
                                    following Handlebars conditional statement
                                    displays the featured-products object
                                    declared above:


                                    ```
                                        {{#if products.featured}}
                                            {{> components/products/featured products=products.featured columns=theme_settings.homepage_featured_products_column_count}}
                                        {{/if}}
                                    ```


                                    This statement formats the featured-products
                                    display according to the
                                    `homepage_featured_products_column_count`
                                    variable, also defined in the `config.json`
                                    excerpt above.
                          - title: Footer
                            route:
                              path: /footer
                            data:
                              blocks:
                                - type: html
                                  data: >-
                                    <b>Description: </b>The footer content for
                                    each storefront page<br>


                                    <b>Handlebars Expression:</b> <span
                                    class="inline-code">{{footer}}</span><br>


                                    <b>Object Properties:</b><br><br>


                                    <table>
                                      <tr>
                                        <td>Property</td>
                                        <td>Description</td>
                                      </tr>
                                      <tr>
                                        <td class="">sitemap_url</td>
                                        <td class="">The URL to the sitemap, based on store’s SEO setting</td>
                                      </tr>
                                      <tr>
                                        <td class="">scripts</td>
                                        <td class="">Scripts to be loaded after the HTML has loaded; includes performance metrics</td>
                                      </tr>
                                    </table>
                          - title: Home Slide Show
                            route:
                              path: /home-slide-show
                            data:
                              blocks:
                                - type: html
                                  data: >-
                                    <b>Description:</b> A list of images, text,
                                    and style assets for a storefront’s image
                                    slide show<br>


                                    <b>Handlebars Expression: </b><span
                                    class="inline-code">{{carousel}}</span><br>


                                    <b>Object Properties:</b><br><br>


                                    <table>
                                      <tr>
                                        <td>Property</td>
                                        <td>Description</td>
                                      </tr>
                                      
                                      <tr>
                                        <td class="">swap_frequency</td>
                                        <td class="">Indicates how often (in seconds) the slides will change; the value must be between 1 and 90,000 seconds</td>
                                      </tr>
                                      
                                      <tr>
                                        <td class="">slides</td>
                                        <td class="">Object containing properties for each slide in the slideshow</td>
                                      </tr>
                                      
                                      <tr>
                                        <td class=""><span class="indent1">image</span></td>
                                        <td class="">Path to the image file used on this slide</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1">alt_text</span></td>
                                        <td class="">Alt text for the image</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1">url</span></td>
                                        <td class="">URL to which the image will link</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1">heading</span></td>
                                        <td class="">Heading message defined by the merchant</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1">heading_color</span></td>
                                        <td class="">Color of the heading text</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1">text</span></td>
                                        <td class="">Subheading defined by the merchant</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1">text_color</span></td>
                                        <td class="">Color of the subheading text</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1">button_text</span></td>
                                        <td class="">Text displayed on a call-to-action button defined by the merchant</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1">button_text_color</span></td>
                                        <td class="">Color of the button</td>
                                      </tr>
                                    </table>
                                  header:
                                    anchor: SlideShow
                          - title: HTML Head
                            route:
                              path: /html-head
                            data:
                              blocks:
                                - type: html
                                  data: >-
                                    <b>Description: </b>Data to be included in
                                    the HTML &lt;head&gt; element<br>


                                    <b>Handlebars Expression:</b> <span
                                    class="inline-code">{{head}}</span><br>


                                    <b>Object Properties:</b><br><br>


                                    <table>
                                      <tr>
                                        <td>Property</td>
                                        <td>Description</td>
                                      </tr>
                                      <tr>
                                        <td class="">character_set</td>
                                        <td class="">The character set to specify</td>
                                      </tr>
                                      <tr>
                                        <td class="">meta_tags</td>
                                        <td class="">Meta tags to improve store SEO</td>
                                      </tr>
                                      <tr>
                                        <td class="">title</td>
                                        <td class="">Current page’s title</td>
                                      </tr>
                                      <tr>
                                        <td class="">stylesheets</td>
                                        <td class="">CSS files to be included</td>
                                      </tr>
                                      <tr>
                                        <td class="">scripts</td>
                                        <td class="">Scripts to be loaded in the &lt;head&gt; tag</td>
                                      </tr>
                                      <tr>
                                        <td class="">favicon</td>
                                        <td class="">The store’s favicon (Favorite icon)</td>
                                      </tr>
                                      <tr>
                                        <td class="">rsslinks</td>
                                        <td class="">RSS feeds to improve SEO</td>
                                      </tr>
                                      </tr>
                                    </table>
                          - title: Is_ajax
                            route:
                              path: /is-ajax
                            data:
                              blocks:
                                - type: html
                                  data: >-
                                    <b>Description: </b>Boolean; returns true if
                                    the current executing request is an Ajax
                                    request<br>


                                    <b>Handlebars Expression:</b> <span
                                    class="inline-code">{{is_ajax}}</span><br>
                                  header:
                                    anchor: IsAjax
                          - title: Login
                            route:
                              path: /login
                            data: {}
                    - title: Common Objects
                      route:
                        path: /common-objects
                      data:
                        children:
                          - title: Catalog Price Common Object
                            route:
                              path: /catalog-price-common-object
                          - title: Price Common Object
                            route:
                              path: /price-common-object
                          - title: Price Range Object
                            route:
                              path: /price-range-object
                          - title: Stencil Image Common Object
                            route:
                              path: /stencil-image-common-object
                          - title: Common Product Card Model
                            route:
                              path: /common-product-card-model
                    - title: Other Objects/Properties
                      route:
                        path: /new-subpage
                      data:
                        children:
                          - title: Product Objects
                            route:
                              path: /product-objects
                          - title: Category Objects
                            route:
                              path: /category-objects
                          - title: Brand Objects
                            route:
                              path: /brand-objects
                          - title: Cart Objects
                            route:
                              path: /cart-objects
                          - title: Customer Objects
                            route:
                              path: /customer-objects
                          - title: Blog Objects
                            route:
                              path: /new-subpage
                          - title: Forms Objects
                            route:
                              path: /forms-objects
            blocks:
              - type: html
                data: >-
                  <a name="Stencil-Obj-ref"></a>The entries in this section list
                  and describe the objects<!--, custom operators, and data
                  resources--> and properties that you can access
                  programmatically via Handlebars expressions:


                  <ul>
                    <!-- <li><a href="/docs/custom-handlebars-helpers">Stencil Custom Handlebars Helpers</a></li> -->
                   <li><a href="/stencil-object-model-reference/global-objects">Global Objects (subsection)</a></li>
                   <li><a href="/stencil-object-model-reference/common-object-formats">Common Objects</a></li>
                   <li><a href="/stencil-object-model-reference/product-resources">Product Objects</a></li>
                   <li><a href="/stencil-object-model-reference/category-resources">Category Objects</a></li>
                   <li><a href="/stencil-object-model-reference/brand-resources">Brand Objects</a></li>
                   <li><a href="/stencil-object-model-reference/cart-resources">Cart Objects</a></li>
                   <li><a href="/stencil-object-model-reference/customer-resources">Customer Objects</a></li>
                   <li><a href="/stencil-object-model-reference/blog-resources">Blog Objects</a></li>
                   <li><a href="/stencil-object-model-reference/forms-resources">Forms Objects</a></li>
                  </ul>
        - title: Event Hooks
          route:
            path: /event-hooks
          data:
            children:
              - title: Hook Examples
                route:
                  path: /hook-examples
                data: {}
              - title: Remote API Example
                route:
                  path: /remote-api-example
                data: {}
              - title: Data Tags/Event Hook Reference
                route:
                  path: /new-subpage-1
                data: {}
              - title: stencil-utils API Reference
                route:
                  path: /new-subpage-2
                data: {}
        - title: CSS And Design Assets
          route:
            path: /css-and-design-assets
          data:
            children:
              - title: Navigating Stencil Design Assets
                route:
                  path: /navigating-stencil-design-assets
                data: {}
              - title: Components/Design Patters
                route:
                  path: /components-design-patterns
                data: {}
              - title: Layouts Directory
                route:
                  path: /layouts-directory
                data: {}
              - title: Settings Directory
                route:
                  path: /settings-directory
                data: {}
              - title: Utilities Directory
                route:
                  path: /new-subpage-1
                data: {}
              - title: New Subpage
                route:
                  path: /new-subpage
                data: {}
        - title: 'Custom Javascript Implementations '
          route:
            path: /custom-javascript-implementations
          data:
            children:
              - title: Adding Javascript to Your Stencil Theme
                route:
                  path: /adding-javascript
                data:
                  blocks:
                    - type: html
                      data: <h1>Adding Javascript to Your Stencil Theme</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#adding_bundling-and-minification\">Bundling and Minification</a></li>\n    <li><a href=\"#adding_development-options\">Development Options</a></li>\n    <li><a href=\"#adding_using-npm\">Using npm (Node Package Manager)</a></li>\n    <li><a href=\"#adding_placing-modules\">Placing Modules in assets/js/</a></li>\n    <li><a href=\"#adding_theme-specific-js\">Theme-Specific JavaScript Modules</a></li>\n    <li><a href=\"#adding_mapping-page\">Mapping Page Types to JavaScript Modules</a></li>\n    <li><a href=\"#adding_mapping-custom\">Mapping Custom Templates to JavaScript Modules</a></li>\n    <li><a href=\"#adding_summary\">Summary</a></li>\n\t</ul>\n</div>\n\n\n\n\n\n\n\n"
                    - type: text
                      data: "## Bundling and Minification\n\nA small Web application, such as an ecommerce theme, can include rich user interactions that depend on many small JavaScript and CSS modules. If we were to embed each of the JavaScript modules in a template file with a separate `<script>` tag, the shopper's browser would need to make separate HTTP requests to retrieve each module.\n\t\nIn some cases, it would take longer to set up the HTTP request than to download the small JavaScript module – leading to slower load times. On mobile devices, slow load times can be especially frustrating.\n\n### Bundling\nTo solve this problem, Stencil – like other modern front-end frameworks – bundles all the JavaScript modules into a single file (a bundle), allowing the shopper's browser to make only a single HTTP request. After the browser has downloaded the bundle of JavaScript modules, the browser caches them, speeding up the rest of the shopper's session.\n\n### Minification\nBeyond reducing the number of HTTP calls required to fetch all the required JavaScript modules, we can reduce the size of the individual JavaScript modules through minification. JavaScript minification removes white space and comments, shortens variable and function names, removes dead code, and more. The goal, in all cases, is to reduce the amount of bandwidth necessary to transmit the JavaScript module to the browser."
                      header:
                        anchor: adding_bundling-and-minification
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Development Options


                        When you add JavaScript to a theme, use one of the
                        following techniques, so that Stencil will automatically
                        bundle and minify your modules:


                        * **Using npm:** Add third-party JavaScript modules to
                        your theme with npm where possible.


                        * **Place Modules in assets/js/:** For a JavaScript
                        module that is not distributed via npm, add this module
                        to your theme by creating a subdirectory within
                        assets/js/ that contains your module.


                        * **Theme-Specific JavaScript Modules:** Stencil themes
                        include their own custom JavaScript modules for most
                        page types. You can alter these page-type–specific
                        modules by editing the files in assets/js/theme/*.js.


                        These techniques are outlined in the following sections.
                      header:
                        anchor: adding_development-options
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Using npm (Node Package Manager)


                        Many third-party JavaScript components are distributed
                        with npm (Node Package Manager). When you use the npm
                        command-line utility to add a JavaScript component to
                        your theme, Stencil will automatically bundle and minify
                        the component. To enable this bundling/minification, run
                        each module's `npm install` command from the root
                        directory of your theme.


                        ### Taking Over from npm


                        npm facilitates managing third-party JavaScript
                        components by placing each JavaScript component – and
                        any of its dependencies – in the correct directories.
                        However, as a developer, you will still need to edit
                        your theme files to wire up the JavaScript component to
                        expose it on your storefront. You will find several
                        examples of this on the following pages.
                      header:
                        anchor: adding_using-npm
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Placing Modules in assets/js/


                        You can freely create subdirectories within
                        `assets/js/`, to contain new JavaScript modules. The
                        constraint is that all JavaScript files in each module
                        must use the `.js` file extension.
                      header:
                        anchor: adding_placing-modules
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Theme-Specific JavaScript Modules


                        In your theme's `assets/js/theme/` subdirectory, you
                        will find a tree of JavaScript files. Each file is a
                        JavaScript module. Some modules are for specific page
                        types. Others are common modules that can be used in
                        other modules. Still others are global modules that are
                        available on every page.
                      header:
                        anchor: adding_theme-specific-js
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Mapping Page Types to JavaScript Modules


                        To find the mapping from page types to modules in
                        `assets/js/theme/`, examine the `PageClasses` object in
                        the file: `assets/js/app.js`. Each `=>import(...)`
                        function within this class maps a page type to the entry
                        module for that page type. For example: When the `cart`
                        page type is loaded in the browser, the JavaScript
                        module named `cart` will be loaded.


                        ### Mapping Example in app.js


                        Here is an excerpt of mappings from the Cornerstone base
                        theme's `assets/js/app.js`:


                        ```

                        [...]

                        const pageClasses = {
                            account_orderstatus: getAccount,
                            account_order: getAccount,
                            account_addressbook: getAccount,
                            [...]
                            createaccount: getLogin,
                            getnewpassword: getLogin,
                            forgotpassword: getLogin,
                            blog: () => import('./theme/blog'),
                            blog_post: () => import('./theme/blog'),
                            brand: () => import('./theme/brand'),
                            brands: () => import('./theme/brand'),
                            cart: () => import('./theme/cart'),
                            [...]
                        }; 

                        ```


                        ### Mapping Example in cart.js


                        Inside the `cart` module (`assets/js/theme/cart.js`),
                        other modules are imported, and custom JavaScript
                        methods for the cart module are created in the `Cart`
                        class.


                        Here is an excerpt from Cornerstone's
                        `assets/js/theme/cart.js` file:


                        ```

                        import PageManager from './page-manager';

                        import $ from 'jquery';

                        import _ from 'lodash';

                        import giftCertCheck from
                        './common/gift-certificate-validator';

                        import utils from '@bigcommerce/stencil-utils';

                        import ShippingEstimator from
                        './cart/shipping-estimator';

                        import { defaultModal } from './global/modal';

                        import swal from 'sweetalert2';


                        export default class Cart extends PageManager {
                            loaded(next) {
                                this.$cartContent = $('[data-cart-content]');
                                this.$cartMessages = $('[data-cart-status]');
                                this.$cartTotals = $('[data-cart-totals]');
                                this.$overlay = $('[data-cart] .loadingOverlay')
                                    .hide(); // TODO: temporary until roper pulls in his cart components

                                this.bindEvents();

                                next();
                            }

                            cartUpdate($target) {
                                const itemId = $target.data('cart-itemid');
                                const $el = $(`#qty-${itemId}`);
                                const oldQty = parseInt($el.val(), 10);
                                const maxQty = parseInt($el.data('quantity-max'), 10);
                                const minQty = parseInt($el.data('quantity-min'), 10);
                                const minError = $el.data('quantity-min-error');
                                const maxError = $el.data('quantity-max-error');
                                const newQty = $target.data('action') === 'inc' ? oldQty + 1 : oldQty - 1;
                                [...]
                        ```
                      header:
                        anchor: adding_mapping-page
                    - type: text
                      data: '---'
                    - type: text
                      data: "## Mapping Custom Templates to JavaScript Modules\n\nIf you add [custom page templates]() to your theme, you can edit the same `assets/js/app.js` file to map each custom template to an appropriate JavaScript module.\n\nIn the example below, we have added the highlighted `if` statement to map a file called `my-custom-template`:\n\n```\nwindow.stencilBootstrap = function stencilBootstrap(pageType, contextJSON = null, loadGlobal = true) {\n    const context = JSON.parse(contextJSON || {});\n\n    return {\n        load() {\n            $(async () => {\n                let globalClass;\n                let pageClass;\n                let PageClass;\n\n\nif (context.template === 'pages/custom/page/my-custom-template') {\n           // do something, import a file, call a function ...\n}\n\n                [...] \n```\n\nIn the theme's `templates/layout/base.html` template, we've added the `{{inject 'template' template}}` just above `{{{snippet 'htmlhead'}}}` statement to inject the custom template:\n\n```\n<head>\n        <title>{{ head.title }}</title>\n        {{{ head.meta_tags }}}\n        {{{ head.config }}}\n\n        [...]\n\n        {{{head.scripts}}}\n        {{{head.rsslinks}}}\n\n        {{inject 'themeSettings' theme_settings}}\n        {{inject 'genericError' (lang 'common.generic_error')}}\n        {{inject 'maintenanceMode' settings.maintenance}}\n        {{inject 'urls' urls}}\n        {{inject 'template' template}} //injects the custom template\n        {{{snippet 'htmlhead'}}}\n    </head> \n\t\t\n\t\t```\n\n\n"
                      header:
                        anchor: adding_mapping-custom
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Summary


                        To review the basics of using JavaScript in your Stencil
                        theme:


                        * Stencil automatically bundles and minifies JavaScript
                        modules to optimize page performance.


                        * To insert custom JavaScript on a particular page in
                        your theme, edit the JavaScript module that corresponds
                        to the page's type.


                        * To add files from third-party JavaScript modules to a
                        theme, use npm, where possible.


                        * To add JavaScript modules not distributed via npm, you
                        can create new subdirectories within `assets/js/`.


                        * Theme-Specific JavaScript modules are provided in the
                        theme's `assets/js/theme/` subdirectory.


                        * To find the mapping between modules in
                        assets/js/theme/ and page types, examine the PageClasses
                        object contained in `assets/js/app.js`.


                        * You can map JavaScript modules to custom page
                        templates by editing the same `assets/js/app.js` file.
                      header:
                        anchor: adding_summary
              - title: Basic Non NPM Example
                route:
                  path: /basic-non-npm-example
                data:
                  blocks:
                    - type: html
                      data: <h1>Basic Non NPM Example</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#adding_locating-page\">Locating Page-Specific JavaScript</a></li>\n    <li><a href=\"#adding_adding-custom-js\">Adding Custom JS Functions</a></li>\n\t</ul>\n</div>\n\n\n\n"
                    - type: text
                      data: >-
                        ## Locating Page-Specific JavaScript 


                        In this example, let's say that we want to display Hello
                        world alerts when a shopper visits a blog page.


                        In Stencil's base Cornerstone theme, the JavaScript that
                        runs on the blog page can be found in

                        /cornerstone/assets/js/theme/blog.js. If we want to run
                        additional JavaScript on this page, we can add it to the
                        PageManager class in this file, which is empty by
                        default.
                      header:
                        anchor: adding_locating-page
                    - type: callout
                      data:
                        body: >-
                          Prior to March 2017, the Cornerstone's default path
                          name was `/stencil/`.
                        title: >-
                          Default Path Name Updated from "stencil" to
                          "cornerstone"
                    - type: text
                      data: >-
                        ## Adding Custom JS Functions 


                        In the code example below, we have added three custom
                        JavaScript functions (`blogHello`, `blogGreatday` and
                        `blogGoodbye`) to the page by populating `PageManager`.
                        Note how each function is called at a different time
                        during the page's life cycle:



                        ```

                        import PageManager from '../page-manager';


                        export default class Blog extends PageManager {
                            blogHello() {
                                alert('Hello world from blog.js');
                            }
                            blogGreatday() {
                                alert('Have a great day from blog.js');
                            }
                            blogGoodbye() {
                                alert('Goodbye world from blog.js');
                            }
                            before(next) {
                                this.blogHello();
                                next();
                            }
                            loaded(next) {
                                this.blogGreatday();
                                next();
                            }
                            after(next) {
                                this.blogGoodbye();
                                next();
                            }
                        }

                        ```
                      header:
                        anchor: adding_adding-custom-js
              - title: Basic NPM example
                route:
                  path: /new-subpage-2
                data:
                  blocks:
                    - type: html
                      data: <h1>Basic <code>npm</code> Example</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#basic_what-were-building\">What We're Building</a></li>\n    <li><a href=\"#basic_set-up\"></a>Set Up Your Store</li>\n    <li><a href=\"#basic_install-dependencies\"></a>Install Dependencies</li>\n    <li><a href=\"#basic_configure-webpack\"></a>Configure Webpack loaders in webpack.conf.js</li>\n    <li><a href=\"#basic_import-dependencies\"></a>Import Dependencies</li>\n    <li><a href=\"#basic_configured-loaded-method\"></a>Configure the loaded() Method</li>\n\t</ul>\n</div>\n\n\n\n\n\n\n\n"
                    - type: callout
                      data:
                        title: >-
                          Compatible with Cornerstone versions earlier than
                          2.x.x
                        body: >-
                          Because this example involves editing the
                          `webpack.conf.js` file, the way this example is
                          outlined will align with only with Cornerstone
                          versions earlier than 2.x.x. This is due to the
                          transition to Webpack 4 in Cornerstone 2.0.0, which
                          deprecated the `webpack.conf.js` file.
                        type: warning
                    - type: text
                      data: >-
                        ## What We're Building


                        This example will use the
                        [Foundation-datepicker.js](http://foundation-datepicker.peterbeno.com/#basic-example)
                        plugin to implement a datepicker for product pages'
                        Delivery/Event Date fields.
                    - type: image
                      data: >-
                        //s3.amazonaws.com/user-content.stoplight.io/6116/1539276603841
                      header:
                        title: Screenshot of final product
                      config:
                        bordered: true
                        maxWidth: '700'
                        maxHeight: '700'
                        centered: true
                        fluid: true
                    - type: text
                      data: >-
                        ## Set Up Your Store


                        To test this example, you'll want your (sandbox or
                        production) store to include at least a couple of
                        products that have a `Delivery/Event Date` configured.
                        (In production, you'd typically use this feature for
                        things like seasonally themed products, temporary
                        promotions, or event tickets.)


                        For product configuration steps in the BigCommerce
                        control panel, please see this support article.
                    - type: text
                      data: "## Install Dependencies\n\nUse the following command to install this example's required dependencies:\n\n`npm install --save-dev css-loader moment foundation-datepicker style-loader`\n\nThe above command's options are:\n\n* `--save-dev` saves the dependencies as `DevDependencies`; this flags them as required for development, but not at runtime. [This stack overflow thread](https://stackoverflow.com/questions/18875674/whats-the-difference-between-dependencies-devdependencies-and-peerdependencies) provides further context to this concept.\n\n* `css-loader` and `style-loader` are webpack loaders, used together:\n\t* [`css-loader`](https://github.com/webpack-contrib/css-loader) resolves `@import` and `url()` expressions in CSS files.\n\t* [`style-loader`](https://github.com/webpack-contrib/style-loader) generically loads stylesheets by injecting a `<style>` tag.\n\n* [`moment`](https://momentjs.com/) is a JavaScript component parses, validates, and displays dates and times.\n\n* `foundation-datepicker` specifies the datepicker package to install."
                    - type: text
                      data: >-
                        ## Configure Webpack loaders in webpack.conf.js


                        The [css]() and [style]() loaders are used to import CSS
                        and to inject it into the DOM, respectively:


                        ```

                        {
                            test: /\.css$/,
                            loader: 'style-loader!css-loader',
                        }

                        ```
                    - type: image
                      data: >-
                        //s3.amazonaws.com/user-content.stoplight.io/6116/1539280227448
                      header:
                        title: CSS and style loaders in context
                    - type: text
                      data: >-
                        ## Import the Dependencies


                        Import these new dependencies into
                        `<theme-name>/assets/js/theme/product.js`.


                        In `<theme-name>/assets/js/app.js`, notice that there is
                        a mapping between the product page and the `product.js`
                        script:


                        ```

                        const PageClasses = {
                            mapping: {
                                ...
                                'pages/product': product,
                        ```


                        That is, when a user navigates to the product page, the
                        `product.js` script is run. First its constructor will
                        be run, followed by the methods `before`, `loaded`, and
                        `after` – in that order.
                    - type: text
                      data: >-
                        ## Configure the loaded() Method


                        We'll use the `loaded` method to initialize our
                        datepicker widget:


                        ```

                        import $ from 'jquery';

                        import PageManager from '../page-manager';

                        import Review from './product/reviews';

                        import collapsibleFactory from './common/collapsible';

                        import ProductDetails from './common/product-details';

                        import videoGallery from './product/video-gallery';

                        import { classifyForm } from './common/form-utils';

                        import
                        'foundation-datepicker/js/foundation-datepicker.min.js';

                        import
                        'foundation-datepicker/css/foundation-datepicker.min.css';

                        import moment from 'moment';


                        ...


                        loaded(next) {
                            let validator;

                            // Init collapsible
                            collapsibleFactory();

                            this.productDetails = new ProductDetails($('.productView'), this.context);

                            videoGallery();

                            const $reviewForm = classifyForm('.writeReview-form');
                            const review = new Review($reviewForm);

                            $('body').on('click', '[data-reveal-id="modal-review-form"]', () => {
                                validator = review.registerValidation();
                            });

                            $reviewForm.on('submit', () => {
                                if (validator) {
                                    validator.performCheck();
                                    return validator.areAll('valid');
                                }

                                return false;
                            });

                            let $deliveryDateMth = $('#deliveryDateMth');
                            let $deliveryDateDay = $('#deliveryDateDay');
                            let $deliveryDateYr = $('#deliveryDateYr');
                            let earliestDate = moment(this.context.product.event_date.date_start, "MMM Do YYYY");
                            let latestDate = moment(this.context.product.event_date.date_end, "MMM Do YYYY");

                            $('#deliveryDate').fdatepicker({
                                leftArrow:'<<',
                                rightArrow:'>>',
                                onRender: function (date) {
                                    return moment(date).isBetween(earliestDate, latestDate, null, '[]') ? '' : 'disabled';
                                }
                            })
                            .on('changeDate', function(event) {
                                let date = event.date;
                                $deliveryDateMth.val(date.getMonth() + 1);
                                $deliveryDateDay.val(date.getDate());
                                $deliveryDateYr.val(date.getFullYear());
                            })
                            .data('datepicker');

                            next();
                        }

                        ```


                        Highlighted below is the new code added to the `loaded`
                        method:
                    - type: image
                      data: >-
                        //s3.amazonaws.com/user-content.stoplight.io/6116/1539275148248
                      header:
                        title: Code addition to loaded method in product.js
                    - type: text
                      data: >
                        Update the
                        `<theme-name>/templates/components/products/product-view.html`
                        template, replacing the existing `{{#if
                        product.event_date}}` block with the following:


                        ```

                        {{#if product.event_date}}
                            {{inject 'product' product}}
                            <div class="form-field">
                                <label class="form-label form-label--alternate form-label--inlineSmall">
                                {{product.event_date.name}}:
                                <small>{{lang 'common.required'}}</small>
                                </label>
                                <input type="text" class="form-input" id="deliveryDate" name="EventDate[Date]" required>
                                <input type="hidden" id="deliveryDateMth" name="EventDate[Mth]">
                                <input type="hidden" id="deliveryDateDay" name="EventDate[Day]">
                                <input type="hidden" id="deliveryDateYr" name="EventDate[Yr]">
                            </div>
                        {{/if}}

                        ```


                        Note that we're "injecting" the product here, so we have
                        access to its properties. This could be done closer to
                        the root of the tree, but it's been placed here for
                        proximity to the code that requires it.


                        We also needed to add form fields for the
                        `EventDate[Mth]`, `EventDate[Day]`, and `EventDate[Yr]`
                        data, which we update whenever the `changeDate` event
                        occurs. This conforms to the data format that the server
                        expects. These fields are hidden from the user.
              - title: Advanced NPM Example
                route:
                  path: /advanced-npm-example
                data:
                  blocks:
                    - type: html
                      data: <h1>Advanced NPM Example</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#advanced_video-of-what\">Video of What We're Building</a></li>\n    <li><a href=\"#advanced_install-dependencies\"></a>Install Dependencies</li>\n    <li><a href=\"#advanced_import-dependencies\"></a>Import Dependencies</li>\n    <li><a href=\"#advanced_update-webpackconfjs\"></a>Update webpack.conf.js</li>\n    <li><a href=\"#advanced_update-appjs\"></a>Update app.js</li>\n    <li><a href=\"#advanced_add-the-xcoupondrawer\"></a>Add the <<code>x-coupon-drawer</code>> Element to the Page</li>\n    <li><a href=\"#advanced_call-initreact\"></a>Call initReact from base.html</li>\n    <li><a href=\"#advanced_create-an-assetsjscomp\"></a>Create an assets/js/components Folder</li>\n    <li><a href=\"#advanced_create-a-coupondrawerjs-file\"></a>Create a CouponDrawer.js File</li>\n    <li><a href=\"#advanced_create-a-verticallinear\"></a>Create a VerticalLinearStepper.js File</li>\n\t</ul>\n</div>"
                    - type: text
                      data: '## Video of What We''re Building'
                    - type: text
                      data: '## Install Dependencies'
                    - type: text
                      data: '## Import Dependencies'
                    - type: text
                      data: '## Update webpack.conf.js'
                    - type: text
                      data: '## Update app.js'
                    - type: text
                      data: ''
                    - type: text
                      data: ''
                    - type: text
                      data: ''
                    - type: text
                      data: ''
                    - type: text
                      data: ''
              - title: Page Types and Life Cycle
                route:
                  path: /new-subpage
                data:
                  blocks:
                    - type: html
                      data: <h1>Page Types and Life Cycle</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#adding_bundling-and-minification\">Bundling and Minification</a></li>\n    <li><a href=\"#adding_development-options\"></a>Development Options</li>\n\t</ul>\n</div>"
        - title: Conditional-Logic Examples
          route:
            path: /conditional-logic-examples
          data:
            children:
              - title: 'Catalog Price Object: How Properties interact'
                route:
                  path: /catalog-price-object
                data: {}
              - title: 'Cart Price Properties: Relationships'
                route:
                  path: /cart-price-relationships
                data: {}
              - title: Calling Theme-Wide Variables via Handlebars
                route:
                  path: /calling-theme-wide-variables
                data: {}
              - title: Dynamic Content Rendering on Stencil Storefronts
                route:
                  path: /dynamic-content-rendering
                data: {}
        - title: Internationalization/Localization
          route:
            path: /internationalization-and-localization
          data:
            children:
              - title: Localizing Stores
                route:
                  path: /localizing-stores
                data:
                  blocks:
                    - type: html
                      data: <h1>Localizing Stores</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#localizing_localization-touchpoints\">Localization Touchpoints Overview</a></li>\n    <li><a href=\"#localizing_translating-theme-files\">Translating Theme Files via Stencil CLI</a></li>\n    <li><a href=\"#localizing_localizing-checkout\">Localizing Checkout</a></li>\n    <li><a href=\"#localizing_localizing-control-panel\">Localizing Non-Theme Content</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >-
                        ## Localization Touchpoints Overview 


                        You can run a BigCommerce store in any single language
                        of your choice. If you want to support multiple
                        languages, we recommend setting up a separate store for
                        each language. To fully localize a store into a
                        language/region other than U.S. English, you will need
                        to customize three areas:


                        Storefront theme pages: Translate static strings. This
                        requires adding translation files for your chosen
                        non-English languages, via Stencil CLI.


                        Checkout: Localizing checkout requires modifications
                        both to theme files (in Stencil CLI) and to settings in
                        the BigCommerce control panel.


                        Outside your theme: Adjust other localization details
                        via the BigCommerce control panel.


                        The following sections provide a linked summary of all
                        the steps involved.
                      header:
                        anchor: '#localizing_localization-touchpoints'
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Translating Theme Files via Stencil CLI


                        The core of localizing a store is to translate content
                        on your theme's page templates into each language that
                        you choose to support. You will need to abstract these
                        templates' literal text strings into `{{lang}}`
                        variables, then provide per-language JSON files that
                        define these variables in corresponding key/value pairs.


                        For details on this process, see this section's
                        remaining pages, starting with [Basis for
                        Internationalization]().
                      header:
                        anchor: '#localizing_translating-theme-files'
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Localizing Checkout


                        Localizing your theme's checkout and order confirmation
                        pages requires specific steps in:

                        * the corresponding templates 

                        * each of your JSON translation files 

                        * and in the BigCommerce control panel


                        **Note:** _To localize your theme's checkout and/or
                        order confirmation page, you must first enable
                        [Optimized One-Page Checkout.]()_


                        For details, please see the following pages:


                        * [Preparing Stencil Themes for Optimized One-Page
                        Checkout]() is a **prerequisite** for the remaining
                        checkout internationalization options below.


                        * [Currency-Conversion Options]() covers displaying
                        prices in alternate currencies.


                        * [Multi-Language Checkout]() covers translating your
                        checkout and/or order confirmation templates.
                      header:
                        anchor: '#localizing_localizing-checkout'
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Localizing Control Panel Content


                        The remaining localization options reside outside your
                        theme and are accessible through the BigCommerce control
                        panel:


                        * [Product Catalog](#product-catalog)

                        * [Currency](#currency)

                        * [Checkout Type](#checkout-type)

                        * [Date Format](#date-format)

                        * [Order Statuses](#order-statuses)

                        * [Blog](#blog)

                        * [Static Web Pages](#static-web-pages)

                        * [Transactional Emails](#transactional-emails)

                        * [Gift Certificates](#gift-certificates)


                        **Note:** _The BigCommerce platform does not currently
                        support translation of Transactional Emails or Gift
                        Certificates into languages other than English, so we
                        have rather provided a management best practice for
                        each._



                        ### <div id="product-catalog">Localizing the Product
                        Catalog</div>


                        You must localize the store's product catalog separately
                        from its theme. Each entry within a catalog can be set
                        up in only one language, so you will want to localize a
                        separate version of your catalog for each
                        single-language store.


                        For an overview of populating the store catalog –
                        including options for bulk-importing content that you
                        can localize outside the BigCommerce platform – please
                        see our support article on [Adding and Managing Your
                        Product Catalog]().


                        ### <div id="currency">Localizing Currency</div>

                        Each store's default currency is configured in the
                        BigCommerce control panel. For details, please see our
                        support article on Changing Your Default Currency.


                        ### <div id="date-format">Localizing Date Format</div>

                        You can set the appropriate date format for your store's
                        language/region in the BigCommerce control panel (under
                        Store Setup > Store Settings > Date & Timezone). For
                        details, please see this support article.


                        ### <div id="order-statuses">Localizing Order
                        Statuses</div>

                        The order-status labels displayed on a BigCommerce
                        storefront are configured outside your theme. You can
                        translate each of these strings via the BigCommerce
                        control panel's Orders > Order Statuses option. For
                        instructions, please see the Customizing an Order Status
                        Label support topic.


                        ### <div id="blog">Localizing the Blog</div>

                        You manage blog entries through the BigCommerce control
                        panel (under Storefront Content > Blog). You are free to
                        add blog content in any language you choose. For
                        details, please see this support article.


                        ### Localizing Static Web Pages

                        If you create static pages as Stencil custom templates,
                        you can localize their content just like other theme
                        pages' content. However, if you create custom pages via
                        the BigCommerce control panel (under Storefront Content
                        > Web Pages), you must also enter their localized
                        content via the control panel; for details, please see
                        this support article.


                        ### <div id="transactional-emails">Managing
                        Transactional Emails</div>

                        BigCommerce does not currently provide native support
                        for localizing transactional emails. To fully localize a
                        store into a language other than English, the simplest
                        solution is to disable the sending of BigCommerce native
                        emails. You can access this option from the BigCommerce
                        control panel's left nav in one of two locations
                        (depending on your store's control-panel version):


                        Storefront Design > My Themes > Design Options > More
                        [drop-down list] > Emails

                        Next, in the Enable column, uncheck the check box for
                        each email type that you want to disable. (These toggles
                        require no confirmation step.) For further details about
                        managing BigCommerce transactional emails, please see
                        this support article.


                        ### <div id="gift-certificates">Managing Gift
                        Certificates</div>

                        The BigCommerce platform does not currently support
                        translation of gift certificates into languages other
                        than English. To fully localize your store, you can
                        choose to disable gift certificates via the BigCommerce
                        control panel.
                      header:
                        anchor: '#localizing_localizing-control-panel'
              - title: Basis for Internationalization
                route:
                  path: /basis-for-internationalization
                data:
                  blocks:
                    - type: html
                      data: <h1>Basis for Internationalization</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#basis_what-translates\">What Does and Doesn't Translate</a></li>\n    <li><a href=\"#basis_required\">Required Subdirectory</a></li>\n    <li><a href=\"#basis_schema\">The Schema</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >-
                        ## What Does and Doesn't Translate


                        The Stencil framework allows you to define multiple
                        translations for each theme based on a predefined
                        schema. Theme developers are not required to localize a
                        theme in order to make it work. BigCommerce does not
                        provide translations for the theme’s content, however,
                        you have the option of localizing your themes for
                        desired target languages, based on the provided schema.


                        * In order for theme translation to occur, you must
                        create a JSON file for each language you choose to
                        support and include key/value pairs for the text
                        blocks/parameters that you choose to translate. The
                        following pages provide details for these steps.


                        * The translated values will be displayed to visitors
                        who have selected the corresponding language in their
                        browser's locale preferences. The Stencil framework
                        automatically detects the Accept-Language request HTTP
                        header from the visitor's browser.


                        * Where a Stencil theme contains no JSON file matching
                        any of the visitor's preferred languages, it will fall
                        back to the values in the default English-language JSON
                        file.


                        * Stencil's multi-language capabilities are currently
                        limited to these particular strings that you specify
                        within the theme. The Stencil framework does not
                        currently translate content rendered from a store's
                        catalog database – for example, products' names.


                        * If you want to fully support multiple languages, we
                        recommend that you set up a separate storefront for each
                        language. This will enable you to thoroughly customize
                        all of your content (including your product catalog) for
                        each target audience.
                    - type: text
                      data: >
                        ## Required Subdirectory


                        Within each theme, a top level `/lang/` subdirectory is
                        reserved for internationalization. This `.../lang/`
                        subdirectory, with its contained en.json file (which
                        contains English-language defaults), must be present in
                        order for a Stencil theme to function.


                        You can localize a theme by providing other appropriate
                        .json translation files in the `.../lang/` subdirectory.
                        One file is required for each language that you want to
                        support. (These can include non-U.S. versions of
                        English, each with their own spellings.)


                        Within these files, you would define key values
                        corresponding to the text blocks in your theme's
                        templates that you choose to abstract into translatable
                        keys.
                    - type: text
                      data: "## The Schema\n\nName your translation files based on the <a href=\"https://tools.ietf.org/html/bcp47\">BCP47 specification</a> of language and region codes. For a summary of how these codes are designed, see the World Wide Web Consortium’s <a href=\"http://www.w3.org/International/articles/language-tags/\">overview</a>.<br>\n\n <br>\n\nYou can find a list of code subtags in the <a href=\"http://www.iana.org/assignments/language-subtag-registry\">IANA Language Subtag Registry</a>. These subtags are primitives that you can combine to create file names’ prefixes for individual regions. Here are some examples:\n\n<table>\n\t\t<tr>\n    <th>Localization file name</th>\n    <th>Corresponding regional language variant</th>\n    <th>Subtags used</th>\n  </tr>\n  <tr>\n    <td class=\"\">en.json</td>\n    <td class=\"\">English (default file)</td>\n    <td class=\"\">en (English)</td>\n  </tr>\n  <tr>\n    <td class=\"\">en-US.json</td>\n    <td class=\"\">American English</td>\n    <td class=\"\">en (English) + US (United States)</td>\n  </tr>\n  <tr>\n    <td class=\"\">en-AU.json</td>\n    <td class=\"\">Australian English</td>\n    <td class=\"\">en (English) + AU (Australia)</td>\n  </tr>\n  <tr>\n    <td class=\"\">fr.json</td>\n    <td class=\"\">French</td>\n    <td class=\"\">en (French)</td>\n  </tr>\n  <tr>\n    <td class=\"\">fr-CA.json</td>\n    <td class=\"\">Canadian French</td>\n    <td class=\"\">fr (French) + CA (Canada)</td>\n  </tr>\n</table>\n\n\nFor more examples of frequently-used codes, see the following linked table’s \"LCID string\" (middle) column: <a href=\"http://www.science.co.il/Language/Locale-codes.asp\">http://www.science.co.il/Language/Locale-codes.asp</a>."
                    - type: text
                      data: >-
                        ## Localization File Structure


                        The `.json` translation files have a straightforward
                        structure of key-value pairs. Here is an example, from
                        Stencil’s default `en.json` file:


                        `"welcome_back": "Welcome back, {name}"`


                        Above, `"welcome_back"` is an arbitrary key name for a
                        welcome message. The string `"Welcome back, {name}"` is
                        its assigned value for English-language stores.


                        If you design your theme’s storefront pages to refer to
                        this message by its generic key name `"welcome_back"`,
                        they can pass its localized value in other languages, as
                        that value is defined in each language’s `.json` file.

                        Key-value pairs are grouped into objects, as you can see
                        in this longer example:


                        ```

                        {
                           "header": {
                            "welcome_back": "Welcome back, {name}"
                           },
                           "prelaunch": {
                            "coming_soon": "Coming Soon",
                            "intro": "This store will be launching shortly. Please visit again!"
                           },
                           "cart": {
                            "items": "{NUM, plural, =0{(0 items)} one {(# item)} other {(# items)}}",
                            "label": "Cart",
                            "is_empty": "Your cart is empty",
                             "coupon_code": "Coupon Code",
                            "gift_certificate": "Gift Certificate",
                            "freeshipping": "Free Shipping",
                            "shipping_peritem": "Per Item Shipping",
                            "shipping_estimator": {
                                "add_info": "Add Info",
                                "select_a_country": "Select a Country",
                                "select_a_state": "Select a State",
                                "estimate_shipping": "Estimate Shipping"
                            }
                           },
                        }

                        ```
              - title: Invoking Translation Keys
                route:
                  path: /invoking-translation-keys
                data:
                  blocks:
                    - type: html
                      data: <h1>Invoking Translation Keys</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#invoking_translation\">Translation Syntax</a></li>\n    <li><a href=\"#invoking_video\">Video Demo/a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >-
                        ## Translation Syntax


                        Once keys and values are defined in the appropriate
                        .json translation files, you invoke dynamic translation
                        strings using the Stencil framework’s `{{lang}}` custom
                        Handlebars helper. Your invocation would follow this
                        generic format:


                        `{{lang "translation.key"
                        optionalVariable=”someValue”}}`


                        Here is how this works. In a non-internationalized
                        theme, a storefront page might include a static/dynamic
                        string like this:


                        `<a href="{{ urls.account }}">Welcome Back <span>{{
                        customer.name }}</span></a>`


                        The corresponding internationalized version – ready to
                        work with any language – would substitute the fully
                        dynamic `{{ lang... }}` Handlebars helper shown below:


                        `<a href="{{ urls.account }}">{{ lang
                        "header.welcome_back" name=customer.name }}</a>`
                      header:
                        anchor: invoking_translation
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Video Demo


                        Watch a video demonstration of how JSON translation
                        files' key/value pairs interact with your templates'
                        Handlebars statements to localize your storefront
                        pages: 


                        <iframe width="560" height="315"
                        src="https://www.youtube.com/embed/ygiRGfSrmnA"
                        frameborder="0" allow="autoplay; encrypted-media"
                        allowfullscreen></iframe>
                      header:
                        anchor: invoking_video
                    - type: callout
                      data:
                        body: >-
                          Be sure to set permission 644 (rw-r–r–) on any new
                          translation files that you add. Without these
                          permissions, running your theme locally will fail,
                          with multiple error messages. Bundling your theme will
                          also fail, blocking its upload to a store.
                        type: warning
                        title: File Permissions Required
              - title: Features Supported
                route:
                  path: /features-supported
                data:
                  blocks:
                    - type: html
                      data: <h1>Features Supported</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#implementation_cornerstone-example\">Automatic Language Detection</a></li>\n    <li><a href=\"#implementation_cornerstone-example\">Cascading Translations</a></li>\n\t\t<li><a href=\"#implementation_cornerstone-example\">Nested Plurality and Gender Support</a></li>\n\n\t</ul>\n</div>"
                    - type: text
                      data: >-
                        The .json translation files are loaded and parsed as
                        UTF-8, so they should support virtually any natural
                        language. The schema also supports the following
                        features:
                    - type: text
                      data: >-
                        ## Automatic Language Detection


                        The Stencil framework can automatically detect a
                        localized language, based on the active shopper’s
                        `"Accept‑Language"` header.
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Cascading Translations


                        Cascading works as follows: Assume that a
                        Quebec/French-Canadian customer visits a storefront
                        built with both `fr.json` and `fr‑CA.json` localization
                        files. The framework places the `fr‑CA` locale "on top
                        of" the base `fr locale`. Therefore, any strings missing
                        from the `fr‑CA.json` file will “fall back” to
                        definitions in the base `fr.json file`, providing at
                        least approximate translations. This cascading works
                        generally across languages and locales.
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Nested Plurality and Gender Support

                        The framework allows you to code conditional plurality
                        for strings within each translation file. For example,
                        your code within an English-language file could overload
                        a single message to display in each of the following
                        forms – depending on the actual value of its two numeric
                        variables:


                        * "There are 3 items in 2 categories"

                        * "There is 1 item in 2 categories"

                        * "There are 2 items in 1 category"


                        Here is the markup that would handle the first three
                        words in each example above, assuming appropriate
                        parameters were inserted in the translation files:


                        ```

                        <h2 class="modal-header-title">
                           {{lang 'cart.added_to_cart.what_next' num_products=cart.quantity}} [...]
                        </h2>

                        ```


                        Similarly, the framework supports per-language
                        conditional coding of appropriate genders for pronouns
                        and nouns.
              - title: Implementation Example
                route:
                  path: /implementation-example
                data:
                  blocks:
                    - type: html
                      data: <h1>Implementation Example</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#implementation_cornerstone-example\">Cornerstone Implementation Example</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >-
                        Here is an example based on this file within
                        Cornerstone:

                        `cornerstone/templates/components/cart/shipping-estimator.html`


                        In the excerpt below, each highlighted `{{lang...}}`
                        statement is a Handlebars helper. Each of the statements
                        abstracts the message indicated by its
                        (English-language) key name to enable
                        internationalization of that message:


                        ```

                        <div class="shipping-estimator" style="display: none;">
                            <form class="estimator-form">
                              <button class="shipping-estimate-hide">{{lang 'cancel'}}</button>
                              <select name="shipping-country">
                              <option>{{lang 'cart.shipping_estimator.select_a_country'}}</option>
                              {{#each countries}}
                                  <option value="{{id}}" {{#if selected}}selected="selected"{{/if}}>
                                        {{name}}
                                  </option>
                              {{/each}}
                              </select>
                              <select name="shipping-state">
                              <option>{{lang 'cart.shipping_estimator.select_a_state'}}</option>
                              {{#each states}}
                                  <option value="{{id}}" {{#if selected}}selected="selected"{{/if}}>
                                      {{name}}
                                  </option>
                              {{/each}}
                              </select>
                              <input type="text" name="shipping-zip" value="{{selected_zip}}">
                              <button class="shipping-estimate-submit">{{lang 'cart.shipping_estimator.estimate_shipping'}}
                              </button>
                            </form>
                            <div class="shipping-quotes"></div>
                        </div>


                        ```



                        In the excerpts below, you can see that the default
                        theme’s basic `.../lang/en.json` file includes matches,
                        and value definitions, for each of the translation keys
                        in the Handlebars helpers above:



                        ```

                        {
                          "header": {
                                "welcome_back": "Welcome back, {name}"
                          },
                          ...
                              "label": "Cart",
                                "is_empty": "Your cart is empty",
                                "coupon_code": "Coupon Code",
                                "gift_certificate": "Gift Certificate",
                                "freeshipping": "Free Shipping",
                                "shipping_peritem": "Per Item Shipping",
                              "shipping_estimator": {
                                    "add_info": "Add Info",
                                  "select_a_country": "Select a Country",
                                  "select_a_state": "Select a State",
                                  "estimate_shipping": "Estimate Shipping"
                              }
                          },
                          "common": {
                                "currency_converter": "Currency Converter",
                                "newsletter_signup": "Sign up for our newsletter",
                                "form_submit": "Submit",
                                "required": "Required",
                                "email_address": "Email Address",
                              "edit": "Edit",
                              "no": "No",
                              "yes": "Yes",
                              "cancel": "Cancel",
                              "share": "Share",
                              "delete": "Delete",
                              "public": "Public",
                                "private": "Private",
                                "view_all": "View All",
                                "paginator": {
                                    "page_of": "Page {current} of {total}"
                              },
                              ...
                        ```



                        Translation files for other languages would use the same
                        format, to define these keys’ values in their respective
                        languages.
                      header:
                        anchor: '#implementation_cornerstone-example'
        - title: Shipping A Theme
          route:
            path: /shipping-a-theme
          data:
            children:
              - title: Shrinking Your Theme by Excluding Static Assets
                route:
                  path: /shrinking-your-theme
                data:
                  blocks:
                    - type: html
                      data: >-
                        <h1>Shrinking Your Theme by Excluding Static Assets
                        Using WebDAV</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#localizing_localization-touchpoints\">Localization Touchpoints Overview</a></li>\n    <li><a href=\"#localizing_translating-theme-files\">Translating Theme Files via Stencil CLI</a></li>\n    <li><a href=\"#localizing_localizing-checkout\">Localizing Checkout</a></li>\n    <li><a href=\"#localizing_localizing-control-panel\">Localizing Non-Theme Content</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >
                        ## Restructuring Your Theme



                        In this section, you will first isolate static assets
                        from your theme's local directory, then use WebDAV to
                        cloud-host those assets, and finally reference those
                        assets using Stencil's cdn Handlebars helper.

                        For an existing theme, make a backup of your whole
                        <theme‑name> directory before proceeding.


                        Examine your theme's /assets/ subdirectory and/or its
                        intended contents. Check for large static assets like
                        images (especially in /assets/img/) and videos that are
                        likely culprits in causing a bundled .zip file to go
                        toward or beyond BigCommerce's 50 MB limit.


                        Use WebDAV to upload these items to WebDAV's remote
                        /content/ directory. For WebDAV specifics, please see
                        BigCommerce's Knowledge Base articles on:

                        Connecting to WebDav

                        WebDAV Folder Structure


                        Throughout your theme, reference each of these assets
                        using Stencil's cdn custom Handlebars helper –
                        prepending the webdav: option to the assetPath
                        parameter.

                        Prepending webdav: will build a URL in the remote WebDAV
                        directory. This allows your theme's deployed topology to
                        diverge from any your local directory structure. As
                        noted above, the cdn helper will treat /content/ as the
                        default/root WebDAV directory. So, for example, this
                        statement:


                        `<img src="{{cdn "webdav:img/image.jpg"}}">`


                        will build the URL transformed below:


                        `<img
                        src="https://cdn.bcapp/3dsf74g/content/img/image.jpg">`


                        On your local machine, move the large static assets to a
                        location where the stencil bundle command will ignore
                        them.

                        This can be a location outside your <theme-name>
                        directory, or it can be the <theme-name>/assets/cdn/
                        subdirectory, which stencil bundle excludes from
                        bundling. (Separating these assets is necessary to
                        exclude them from the next step.)


                        Run or re-run the stencil bundle command, from inside
                        your streamlined <theme‑name> directory.

                        Once your resulting .zip file is 50 MB or smaller,
                        upload it to BigCommerce, as described here.
                    - type: callout
                      data:
                        type: warning
                        body: >-
                          Both in production and locally, subdirectories of your
                          theme's assets/ directory – like img/, js/, and fonts/
                          – are parallel to its scss/ subdirectory. So within
                          your CSS, path references to such assets should
                          reflect this parallel relationship – for example:
                          ../img/test.jpg.
                        title: URL References to Assets
                    - type: text
                      data: >-
                        ## WebDAV Folders and Stencil Themes


                        If you have used WebDAV in developing BigCommerce's
                        earlier (Blueprint) generation of themes, you will see
                        some differences when uploading Stencil themes.<br><br>


                        The directories accessible through WebDAV will
                        dynamically change, depending on the type of theme that
                        is active in the merchant's store, as follows:<p></p>


                        <table>
                          <tr>
                            <td class=""><b>Available while the merchant's active theme is Blueprint:</b></td>
                            <td class=""><b>Available while the merchant's active
                              theme is Stencil:</b></td>
                          </tr>
                          <tr>
                            <td class="">/content/</td>
                            <td class="">/content/</td>
                          </tr>
                          <tr>
                            <td class="">/product_images/</td>
                            <td class="">/product_images/</td>
                          </tr>
                          <tr>
                            <td class="">/product_downloads/</td>
                            <td class="">/product_downloads/</td>
                          </tr>
                          <tr>
                            <td class="">/import_files/</td>
                            <td class="">/import_files/</td>
                          </tr>
                          <tr>
                            <td class="">/exports/</td>
                            <td class="">/exports/</td>
                          </tr>
                          <tr>
                            <td class="">/template/</td>
                            <td class=""> </td>
                          </tr>
                          <tr>
                            <td class="">/mobile_template/</td>
                            <td class=""> </td>
                          </tr>
                         </table>

                        <i>The overall difference is that the WebDAV</i> <span
                        class="inline-code">/template/</span> and <span
                        class="inline-code">/mobile_template/</span>
                        <i>directories are <b>not</b> available for Stencil
                        themes. These templates must reside and remain within
                        your Stencil theme's local directory and file
                        structure.</i>
              - title: Staging A Theme for CDN Delivery
                route:
                  path: /staging-a-theme
                data:
                  blocks:
                    - type: html
                      data: <h1>Staging A Theme for CDN Delivery</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#staging_sizing-your-theme\">Sizing Your Theme</a></li>\n    <li><a href=\"#staging_sizing-your-theme\">Organizing Your Theme</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >-
                        ## Sizing Your Theme


                        Your theme should (ideally) bundle into an archive of
                        only a few megabytes. BigCommerce imposes a hard limit
                        of 50 MB, but most themes do not approach this limit,
                        unless they include many large static assets.


                        If your theme is unlikely to exceed 50 MB, you can
                        ignore the next two entries and jump directly to

                        Bundling and Submitting a Theme.


                        A few themes might exceed the 50 MB limit. In these
                        cases, you can use either the

                        Shrinking Your Theme...(WebDAV), or the Staging a Theme
                        for CDN Delivery, procedure to restructure

                        your theme to a size that's manageable for upload to
                        BigCommerce.
                      header:
                        anchor: '#staging_sizing-your-theme'
                    - type: text
                      data: >-
                        For themes that would otherwise exceed BigCommerce's 50
                        MB limit on uploads, delivering your theme's large
                        static assets via a CDN (content delivery network) is an
                        alternative to the simpler WebDAV approach.


                        The advantage of this alternative is that all assets
                        stay within your theme's directory, so your theme's
                        local structure matches its deployed structure. The
                        disadvantage is that the procedure outlined below
                        requires the expense of a CDN.


                        ## Organizing Your Theme


                        To stage your theme for CDN delivery, you would locally
                        store your large static assets within your theme's

                        <theme-name>/assets/cdn/ subdirectory. By design, the
                        stencil bundle command omits this subdirectory's
                        contents. So those contents do not count against the 50
                        MB limit on the resulting .zip file.


                        Then, as you develop your theme, reference each of these
                        assets using Stencil's cdn custom Handlebars helper, as
                        explained here.


                        When you are ready to upload your theme to BigCommerce,
                        follow the procedure starting here.
              - title: Bundling and Submitting a Theme
                route:
                  path: /bundling-and-submitting
                data:
                  blocks:
                    - type: html
                      data: <h1>Bundling and Submitting a Theme</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#bundling_downloaded\">Downloaded Theme? Refresh Dependencies</a></li>\n    <li><a href=\"#bundling_verify-directory\">Verify Directory and File Permissions</a></li>\n    <li><a href=\"#bundling_bundling-theme\">Bundling Your Theme</a></li>\n    <li><a href=\"#bundling_uploading-theme\">Uploading Your Theme</a></li>\n\t</ul>\n</div>\n\n\n\n\n\n\n\n\n"
                    - type: text
                      data: >-
                        ## Downloaded Theme? Refresh Dependencies


                        If you have customized a theme originally downloaded
                        from the BigCommerce Theme Marketplace: Before you
                        package your theme, make sure your theme directory
                        includes all the dependencies that BigCommerce requires
                        for submission. Follow the link for your scenario:


                        If you downloaded a refreshed version of Stencil's
                        default Cornerstone theme: Run `npm install` in the
                        theme directory to install refreshed JavaScript
                        dependencies, as outlined [here]().


                        If you downloaded a different Marketplace theme, and its
                        [version was lower than 1.10.0]():

                        You must also run jspm install in the theme directory,
                        as outlined [here]().
                      header:
                        anchor: bundling_downloaded
                    - type: callout
                      data:
                        body: >-
                          The `stencil bundle` and `stencil push` commands do
                          not check for the dependencies that these build
                          systems install. So if those dependencies are missing,
                          these commands will not immediately report errors.
                          However, your resulting .zip file will not properly
                          upload to BigCommerce, and will not run properly on a
                          storefront.
                        title: No Automatic Check for Dependencies
                        type: warning
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Verify Directory and File Permissions


                        If you have added any new subdirectories or files to
                        your base theme, verify that you have:


                        Set newly added directories to permission `755`
                        (`drwxr-xr-x`).

                        Set newly added files to permission `644` (`rw-r--r--`).
                      header:
                        anchor: bundling_verify-directory
                    - type: callout
                      data:
                        body: >-
                          Without these permissions, bundling your theme will
                          fail, blocking its upload to BigCommerce.
                        title: Writable Permissions Are Required
                        type: warning
                    - type: text
                      data: '---'
                    - type: text
                      data: >
                        ## Bundling Your Theme


                        Once you have verified the requirements above, you are
                        ready to process and package your theme for upload to
                        BigCommerce. Stencil CLI provides two alternatives for
                        creating a .zip file that contains all of your theme's
                        essentials, while excluding redundant components. These
                        options are available, depending on how you've
                        [authorized]() your theme:


                        * [Bundle Only]()

                        * [Bundle and Push]()


                        ### Bundle Only 


                        The stencil bundle command is available for all themes,
                        whether they were initialized using OAuth or Basic-Auth
                        tokens. To use it, just enter the following on your
                        command line:


                        `stencil bundle`


                        The `bundle` command will notify you of its progress and
                        completion.



                        ###  Check/Adjust Zipfile's Size


                        Check the resulting .zip file's size before you proceed.
                        The zipped bundle should (ideally) be only a few
                        megabytes. BigCommerce imposes a hard limit of 50 MB,
                        and any file size approaching that is problematic. If
                        your .zip file fits comfortably within the size limit
                        above, jump directly to Uploading Your Theme. However,
                        if your .zip file approaches or exceeds 50 MB, you must
                        first use one of these procedures to restructure your
                        theme to a size that's manageable for upload to
                        BigCommerce:


                        * [Shrinking Your Theme by Excluding Static Assets
                        (WebDAV)]()

                        * [Staging a Theme for CDN Delivery]()



                        ### Bundle and Push 


                        The `stencil push` command is available only for themes
                        that you have successfully [initialized]() using an
                        [OAuth token]() (with `Themes:modify scope`). This
                        command bundles your theme, and uploads it to the
                        associated store, in one continuous process.


                        For further requirements and usage details, please see
                        the [Command-Line Upload]() below.


                        For file-size error diagnostics and workarounds, please
                        _Check/Adjust Zipfile's Size_ above.


                        ### Software Requirements / Resolving Lint Errors


                        * Please use only the `stencil bundle` or the `stencil
                        push` command to process and package themes for
                        submission. These commands generate .zip files that
                        match BigCommerce's expected structure. They also
                        generate metadata required for your theme to function
                        properly.


                        * Do not create .zip files using general-purpose
                        archiving software. The resulting files will trigger
                        errors upon upload to BigCommerce.


                        * Do not open a bundled theme .zip file to add, delete,
                        rename, or update files. Doing so will make your theme
                        unusable on the production store.


                        * If bundling your theme triggers multiple lint errors
                        related to the `bundle.js` file, then your theme is
                        missing the `.eslintignore` file. Please retrieve this
                        file from the [Stencil Cornerstone
                        repo](https://github.com/bigcommerce/cornerstone/blob/master/.eslintignore),
                        then re-run `stencil bundle` or `stencil push`.
                      header:
                        anchor: bundling_bundling-theme
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Uploading Your Theme


                        BigCommerce provides two alternatives for uploading a
                        theme to its associated BigCommerce store. These options
                        are available, depending on how you've authorized your
                        theme:


                        * Control-Panel Upload (OAuth or Basic Auth)

                        * Command-Line Upload (OAuth Required)


                        ### Control-Panel Upload (OAuth or Basic Auth)


                        Uploading your theme via the BigCommerce control panel's
                        GUI is compatible with any store token (whether OAuth or
                        Basic-Auth), and with any OAuth token scope, and with
                        all versions of Stencil CLI. However, this option
                        requires that you first use stencil bundle to package
                        your theme into a .zip file. (Prepare your file
                        according to Bundle Only above.)


                        For the upload steps in the control panel, see the
                        [Uploading Custom Themes]() article in our Knowledge
                        Base. 


                        For error codes that you might encounter when uploading
                        a theme – and corresponding workarounds, see
                        [Troubleshooting Theme Uploads]().


                        ### Command-Line Upload (OAuth Required)


                        The stencil push command allows you to both bundle your
                        theme and upload it to the store, with a single terminal
                        command. To run stencil push, you must first:


                        Successfully initialize your theme using an OAuth token
                        that was created with the Themes:modify scope.

                        Install Stencil CLI version 1.12.0 or higher.


                        To check your current Stencil CLI version, enter stencil
                        --version or stencil -V on the command line. If you need
                        to update an earlier version, reinstall Stencil CLI.


                        ### Pushing a Theme Upload


                        To initiate bundling and upload, enter the following on
                        the command line:


                        `stencil push`


                        Stencil CLI is designed to display the same
                        notifications, prompts, and selection options that you
                        would receive when using the control panel's GUI. Below
                        are some of the notifications and interactions you might
                        see.


                        ### Successful Bundling


                        Stencil CLI will display `ok` confirmations, or `not ok`
                        errors, or `warnings` for individual substeps in
                        bundling and uploading your theme. If bundling is
                        successful, you will next see a `Processing` progress
                        bar to track the upload.
                      header:
                        anchor: bundling_uploading-theme
                    - type: image
                      data: >-
                        //s3.amazonaws.com/user-content.stoplight.io/6116/1539055887301
                    - type: text
                      data: >-
                        ### Successful Upload


                        Upon a successful upload, you will be prompted: `Would
                        you like to apply your theme to your store at
                        <storehash>? (y/N)` Any response except `y` or `Y` will
                        be processed as "No." You can always apply the theme
                        later through the control panel.


                        ### Apply Which Variation?


                        If you chose to apply the newly uploaded theme, you will
                        be prompted: `Which variation would you like to apply?
                        (Use arrow keys)`
                    - type: image
                      data: >-
                        //s3.amazonaws.com/user-content.stoplight.io/6116/1539055910721
                    - type: text
                      data: >-
                        Use your arrow keys to move the selection
                        caret/highlight to the variation you want, and then
                        press `Enter`.


                        Stencil CLI will then confirm which variation is active
                        on the storefront.
                    - type: image
                      data: >-
                        //s3.amazonaws.com/user-content.stoplight.io/6116/1539055915081
                    - type: text
                      data: >+
                        ## Theme Quota Warning


                        If you run `stencil push` when your store's `My Themes`
                        section has reached its [maximum of 20 themes](), you
                        will be prompted to select at least one existing theme
                        for deletion.

                    - type: image
                      data: >-
                        //s3.amazonaws.com/user-content.stoplight.io/6116/1539055988142
                    - type: text
                      data: >+
                        Custom themes – which are available for selection – will
                        have a circle to their left. Marketplace themes and the
                        store's active theme – all of which are protected from
                        deletion – will be flagged `(Disabled)`.


                        Use your arrow keys to move the selection caret to each
                        theme/version that you want to select. Then press the
                        spacebar to select it. (Filled circles will indicate
                        your selected themes/versions.)


                        If you are certain of your selections, you can next
                        press `Enter` to delete the themes.

                    - type: callout
                      data:
                        body: >-
                          Once you press `Enter`, the selected themes will be
                          deleted immediately, with no further confirmation.


                          If you have any doubts – especially about deleting
                          multiple themes/versions – it is safest to delete them
                          through the control panel GUI. This GUI allows you to
                          compare uploaded versions, and to inspect their
                          metadata.
                        title: ' Select Carefully – No Confirmation'
                        type: error
                    - type: text
                      data: >-
                        ## Other Bundling or Upload Errors


                        For any other `not ok` bundling or upload errors that
                        you receive, please refer to these debugging guidelines
                        Theme setup and sizing diagnostics in preceding sections
                        throughout this page, or the following article titled
                        [Troubleshooting Theme Uploads]().
              - title: Adding Recaptcha V2
                route:
                  path: /adding-recaptcha
                data:
                  blocks:
                    - type: html
                      data: <h1>Adding Recaptcha V2</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#localizing_localization-touchpoints\">Localization Touchpoints Overview</a></li>\n    <li><a href=\"#localizing_translating-theme-files\">Translating Theme Files via Stencil CLI</a></li>\n    <li><a href=\"#localizing_localizing-checkout\">Localizing Checkout</a></li>\n    <li><a href=\"#localizing_localizing-control-panel\">Localizing Non-Theme Content</a></li>\n\t</ul>\n</div>"
              - title: Troubleshooting Theme Uploads
                route:
                  path: /new-subpage-4
                data:
                  blocks:
                    - type: html
                      data: <h1>Troubleshooting Theme Uploads</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#localizing_localization-touchpoints\">Localization Touchpoints Overview</a></li>\n    <li><a href=\"#localizing_translating-theme-files\">Translating Theme Files via Stencil CLI</a></li>\n    <li><a href=\"#localizing_localizing-checkout\">Localizing Checkout</a></li>\n\t</ul>\n</div>"
      blocks:
        - type: html
          data: "<div class=\"cBrCommunityTheme\" style=\"display:block;\">\n  <div class=\"body-inner main-content\">\n    <div class=\"wrapper-for-sticky-footer-structure bg-x3lightgrey\">\n      <div class=\"header-pad\"></div>\n      <div>\n        <div class=\"siteforceContentArea\">\n          <div class=\"ui-widget\">\n            <div class=\"content-wrap\">\n              <div style=\"padding: 62px 0px 70px;background: url(&#x22;https://cdn6.bigcommerce.com/s-qtmbtj/product_images/uploaded_images/hero-bg.png&#x22;) center bottom no-repeat;background-repeat: repeat-x;background-position-y: 50%;\">\n                <div class=\"container\">\n                  <h1 class=\"h1 panel-title__text\">Stencil Documentation</h1>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div><!-- landing tiles -->\n        <div class=\"container siteforceContentArea\" style=\"margin-top: 10%; margin-bottom: 5%;\">\n          <div data-region-name=\"landingTiles\">\n            <div class=\"ui-widget\">\n              <div class=\"lift-content cBrLandingTiles\">\n                <div>\n                  <div class=\"container\">\n                    <div class=\"row row--pad\" style=\"background-color: #F6F7F9;\">\n                      <div class=\"column-md-12 column-lg-6 column--pad m-bottom-25\">\n                        <div class=\"panel-media\" id=\"community\">\n                          <div class=\"panel-media__wrap-icon\">\n                            <div class=\"panel-media__icon\">\n                              <img alt=\"\" src=\"https://via.placeholder.com/350x350\" srcset=\"https://via.placeholder.com/350x350\">\n                            </div>\n                          </div>\n                          <div class=\"panel-media__wrap-content\">\n                            <h4 class=\"h4 panel-media__title\"><a href=\"/api-docs/catalog/products/products-overview\">Getting Started</a></h4>\n                            <p class=\"panel-media__text type--sm\">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Praesent sed dictum sem. Nulla eu pellentesque erat. Fusce vitae purus vel tortor molestie pulvinar.</p>\n                          </div>\n                        </div>\n                      </div>\n                      <div class=\"column-md-12 column-lg-6 column--pad m-bottom-25\">\n                        <div class=\"panel-media\" id=\"blog\">\n                          <div class=\"panel-media__wrap-icon\">\n                            <div class=\"panel-media__icon\">\n                              <img alt=\"\" src=\"https://via.placeholder.com/350x350\" srcset=\"https://via.placeholder.com/350x350\">\n                            </div>\n                          </div>\n                          <div class=\"panel-media__wrap-content\">\n                            <h4 class=\"h4 panel-media__title\"><a href=\"/api-docs/api-reference\">Webhooks</a></h4>\n                            <p class=\"panel-media__text type--sm\">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Praesent sed dictum sem. Nulla eu pellentesque erat. Fusce vitae purus vel tortor molestie pulvinar.</p>\n                          </div>\n                        </div>\n                      </div>\n                      <div class=\"column-md-12 column-lg-6 column--pad m-bottom-25\">\n                        <div class=\"panel-media\" id=\"ideas\">\n                          <div class=\"panel-media__wrap-icon\">\n                            <div class=\"panel-media__icon\">\n                              <img alt=\"\" src=\"https://via.placeholder.com/350x350\" srcset=\"https://via.placeholder.com/350x350\">\n                            </div>\n                          </div>\n                          <div class=\"panel-media__wrap-content\">\n                            <h4 class=\"h4 panel-media__title\"><a href=\"/api-docs/getting-started/webhooks/about-webhooks\">Orders</a></h4>\n                            <p class=\"panel-media__text type--sm\">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Praesent sed dictum sem. Nulla eu pellentesque erat. Fusce vitae purus vel tortor molestie pulvinar.</p>\n                          </div>\n                        </div>\n                      </div>\n                      <div class=\"column-md-12 column-lg-6 column--pad m-bottom-25\">\n                        <div class=\"panel-media\" id=\"community\">\n                          <div class=\"panel-media__wrap-icon\">\n                            <div class=\"panel-media__icon\">\n                              <img alt=\"\" src=\"https://via.placeholder.com/350x350\" srcset=\"https://via.placeholder.com/350x350\">\n                            </div>\n                          </div>\n                          <div class=\"panel-media__wrap-content\">\n                            <h4 class=\"h4 panel-media__title\"><a href=\"/stencil-docs\">Storefront API's</a></h4>\n                            <p class=\"panel-media__text type--sm\">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Praesent sed dictum sem. Nulla eu pellentesque erat. Fusce vitae purus vel tortor molestie pulvinar.</p>\n                          </div>\n                        </div>\n                      </div>\n                      <div class=\"column-md-12 column-lg-6 column--pad m-bottom-25\">\n                        <div class=\"panel-media\" id=\"community\">\n                          <div class=\"panel-media__wrap-icon\">\n                            <div class=\"panel-media__icon\">\n                              <img alt=\"\" src=\"https://via.placeholder.com/350x350\" srcset=\"https://via.placeholder.com/350x350\">\n                            </div>\n                          </div>\n                          <div class=\"panel-media__wrap-content\">\n                            <h4 class=\"h4 panel-media__title\"><a href=\"/stencil-docs\">Catalog Products</a></h4>\n                            <p class=\"panel-media__text type--sm\">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Praesent sed dictum sem. Nulla eu pellentesque erat. Fusce vitae purus vel tortor molestie pulvinar.</p>\n                          </div>\n                        </div>\n                      </div>\n                      <div class=\"column-md-12 column-lg-6 column--pad\">\n                        <div class=\"panel-media\" id=\"community\">\n                          <div class=\"panel-media__wrap-icon\">\n                            <div class=\"panel-media__icon\">\n                              <img alt=\"\" src=\"https://via.placeholder.com/350x350\" srcset=\"https://via.placeholder.com/350x350\">\n                            </div>\n                          </div>\n                          <div class=\"panel-media__wrap-content\">\n                            <h4 class=\"h4 panel-media__title\"><a href=\"/stencil-docs\">List Your App</a></h4>\n                            <p class=\"panel-media__text type--sm\">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Praesent sed dictum sem. Nulla eu pellentesque erat. Fusce vitae purus vel tortor molestie pulvinar.</p>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div class=\"empty-block-for-sticky-footer\"></div>\n        </div>\n        <footer class=\"footer\">\n          <div class=\"footer__top\">\n            <div class=\"container\">\n              <div class=\"footer__wrap-menu clr\" style=\"padding-left: 3%;\">\n                <ul class=\"footer__menu\">\n\t<li class=\"footer__menu-item\"><a class=\"footer__menu-link\" href=\"https://status.bigcommerce.com/\">API Status</a></li>\n                  <li class=\"footer__menu-item\"><a class=\"footer__menu-link\" href=\"https://www.bigcommerce.com/partners/\">Become a Partner</a></li>\n                  <li class=\"footer__menu-item\"><a class=\"footer__menu-link\" href=\"https://www.bigcommerce.com/partners/affiliates/\">Become an Affiliate</a></li>\n                  \n<li class=\"footer__menu-item\"><a class=\"footer__menu-link\" href=\"https://forum.bigcommerce.com/s/article/BigCommerce-Community-Guide\">Community Guide</a></li>\n<li class=\"footer__menu-item\"><a class=\"footer__menu-link\" href=\"https://forum.bigcommerce.com/s/article/Community-Code-of-Conduct\">Community Code of Conduct</a></li>\n<li class=\"footer__menu-item\"><a class=\"footer__menu-link\" href=\"https://forum.bigcommerce.com/s/article/Community-Terms-of-Use\">Community Terms of Use</a></li>\n<li class=\"footer__menu-item\"><a class=\"footer__menu-link\" href=\"https://www.bigcommerce.com/terms/api-terms/\">API Terms of Service</a></li>\n                </ul>\n              </div>\n            </div>\n          </div>\n          <div class=\"footer__bottom\">\n            <div class=\"container\">\n              <div class=\"row--pad clr\">\n                <div class=\"column-md-12 column-lg-6 column--pad\"><a class=\"footer__logo icon-svg-logo-alt\" href=\"#\"></a>\n                  <p class=\"footer__copy\">©2017 BigCommerce Pty. Ltd. Shopping Cart Software</p>\n                </div>\n                <div class=\"column-md-12 column-lg-6 column--pad\">\n                  <div class=\"footer__wrap-soc-sharing\">\n                    <ul class=\"footer__soc-sharing\">\n                      <li class=\"footer__soc-sharing-item\"><a class=\"footer__soc-sharing-link\" href=\"http://twitter.com/Bigcommerce\">Twitter</a></li>\n                      <li class=\"footer__soc-sharing-item\"><a class=\"footer__soc-sharing-link\" href=\"http://www.facebook.com/Bigcommerce\">Facebook</a></li>\n                      <li class=\"footer__soc-sharing-item\"><a class=\"footer__soc-sharing-link\" href=\"http://www.linkedin.com/company/bigcommerce\">Linkedin</a></li>\n                      <li class=\"footer__soc-sharing-item\"><a class=\"footer__soc-sharing-link\" href=\"http://www.youtube.com/BigcommerceDotCom\">Youtube</a></li>\n                      <li class=\"footer__soc-sharing-item\"><a class=\"footer__soc-sharing-link\" href=\"http://pinterest.com/bigcommerce/\">Pinterest</a></li>\n                      <li class=\"footer__soc-sharing-item\"><a class=\"footer__soc-sharing-link\" href=\"https://www.instagram.com/bigcommerce/\">Google +</a></li>\n                    </ul>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </footer>\n      </div>\n    </div>\n  </div>\n</div>"
theme:
  background: '#3550b6'
logo: >-
  https://cdn6.bigcommerce.com/s-qtmbtj/product_images/uploaded_images/bigcommerce-logomark-darkbg.png
